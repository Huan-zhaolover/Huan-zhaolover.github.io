<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Vue环境配置</title>
      <link href="/2018/12/21/Vue/Vue%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/12/21/Vue/Vue%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>Vue配置</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN环境配置</title>
      <link href="/2018/12/10/ReactNative/RN%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/12/10/ReactNative/RN%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建RN环境"><a href="#搭建RN环境" class="headerlink" title="搭建RN环境"></a>搭建RN环境</h3><blockquote><p>1.安装<code>Homebrew</code>：</p></blockquote><ul><li><p>Homebrew, Mac 系统的包管理器，用于安装 NodeJS 和一些其他必需的工具软件</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/install)"</span></span><br></pre></td></tr></table></figure></li><li><p>homebrew 在安装软件时可能会碰到/usr/local目录不可写的权限问题。</p>  <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">chown</span> -R <span class="string">`whoami`</span> /usr/<span class="keyword">local</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>上述步骤中会提示输入密码然后开始下载Homebrew，如果此时网速不稳定可能会出现错误提示：<code>curl: (35) Server aborted the SSL handshake。</code> 此时需要执行卸载操作，输入如下命令进行卸载  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e "$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster<span class="regexp">/uninstall)"</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>2.使用Homebrew来安装<code>npm</code> <code>Node.js</code>.<br>    <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.nrm 是一个npm 源管理器，允许你快速地在如下 npm 源间切换：</p></blockquote><ul><li><p>安装</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g nrm</span><br></pre></td></tr></table></figure></li><li><p>使用查看源</p>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nrm ls</span></span><br></pre></td></tr></table></figure></li><li><p>测试源</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试一个</span><br><span class="line">nrm <span class="built_in">test</span> npm </span><br><span class="line">测试所有</span><br><span class="line">nrm <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>更换源</p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm <span class="keyword">use</span> taobao</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>4.安装WatchMan/安装Flow</p></blockquote><ul><li><p>该插件用于监控bug文件和文件变化 ，并且可以触发指定的操作</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>watchman</span><br></pre></td></tr></table></figure></li><li><p>flow是一个 JavaScript 的静态类型检查器，安装后，方便找出代码中可能存在的类型错误</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>flow</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>5.React Native安装</p></blockquote><ul><li><p>安装React Native：</p>  <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g yarn react-<span class="keyword">native</span>-cli</span><br></pre></td></tr></table></figure></li><li><p>如果提示root权限不够</p>  <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">npm</span> install -g react-<span class="keyword">native</span>-cli</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>6.创建新项目</p></blockquote><pre><code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-<span class="keyword">native</span> <span class="keyword">init</span> 项目名称</span><br><span class="line">react-<span class="keyword">native</span> <span class="keyword">init</span> 项目名称 --version <span class="number">0.40</span>.0   <span class="comment">//创建一个指定版本为0.40.0版本的项目</span></span><br></pre></td></tr></table></figure></code></pre><blockquote><p>7.配置iOS/android之后 运行项目</p></blockquote><ul><li><p>iOS</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></span><br></pre></td></tr></table></figure></li><li><p>android</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native <span class="keyword">run</span><span class="bash">-android</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>8.其他命令</p></blockquote><ul><li><p>查看本地的React Native的版本    </p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-<span class="keyword">native</span> --version</span><br></pre></td></tr></table></figure></li><li><p>升级或者降级npm包的版本</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">--save</span> <span class="selector-tag">react-native</span>@<span class="keyword">0</span>.<span class="keyword">18</span></span><br></pre></td></tr></table></figure></li><li><p>更新本地的React Native的版本</p>  <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> update -g react-<span class="keyword">native</span>-cli</span><br></pre></td></tr></table></figure></li><li><p>更新项目templates文件</p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-<span class="keyword">native</span> upgrade</span><br></pre></td></tr></table></figure></li></ul><h3 id="搭建iOS开发环境"><a href="#搭建iOS开发环境" class="headerlink" title="搭建iOS开发环境"></a>搭建iOS开发环境</h3><blockquote><p>1.下载Xcode AppStore 下载，或者AppDeveloper中心download下载</p></blockquote><blockquote><p>2.安装cocoapods</p></blockquote><ul><li>开始安装 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="keyword">install</span> -n /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> cocoapods</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果安装了多个Xcode使用下面的命令选择（一般需要选择最近的Xcode版本）</p>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -<span class="keyword">switch</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer</span><br></pre></td></tr></table></figure></li><li><p>安装本地库</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="built_in">setup</span></span><br></pre></td></tr></table></figure></li><li><p>使用终端cd到工程目录下 创建Podfile文件：</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xxx/xxx/xxx/ios</span><br><span class="line">pod <span class="keyword">init</span></span><br></pre></td></tr></table></figure></li><li><p>安装第三方库</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="keyword">install</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>3.安装cocoapods中间的问题</p></blockquote><ul><li><p>用web storm 运行react-native 工程时，出错：</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun: error: unable <span class="keyword">to</span> <span class="builtin-name">find</span> utility <span class="string">"instruments"</span>, <span class="keyword">not</span> a developer<span class="built_in"> tool </span><span class="keyword">or</span> <span class="keyword">in</span> PATH</span><br></pre></td></tr></table></figure></li><li><p>解决方法： 前提是你已经安装了xcode在 终端执行如下命令 </p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -s <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/</span></span><br></pre></td></tr></table></figure></li><li><p>安装pod install 时候 停在installing React 上</p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">需要安装React的依赖</span><br><span class="line">pod <span class="string">'React'</span>, <span class="string">path:</span> rn_path, <span class="string">subspecs:</span> [</span><br><span class="line">    <span class="string">'Core'</span>,</span><br><span class="line">    <span class="string">'RCTActionSheet'</span>,</span><br><span class="line">    <span class="string">'RCTAnimation'</span>,</span><br><span class="line">    <span class="string">'RCTGeolocation'</span>,</span><br><span class="line">    <span class="string">'RCTImage'</span>,</span><br><span class="line">    <span class="string">'RCTLinkingIOS'</span>,</span><br><span class="line">    <span class="string">'RCTNetwork'</span>,</span><br><span class="line">    <span class="string">'RCTSettings'</span>,</span><br><span class="line">    <span class="string">'RCTText'</span>,</span><br><span class="line">    <span class="string">'RCTVibration'</span>,</span><br><span class="line">    <span class="string">'RCTWebSocket'</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  pod <span class="string">'aliyun-oss-react-native'</span>, :path =&gt; <span class="string">'../node_modules/aliyun-oss-react-native'</span></span><br></pre></td></tr></table></figure></li><li><p>[iOS][cocoapods] ‘RCTAnimation/RCTValueAnimatedNode.h’ file not found</p>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">It works <span class="keyword">if</span> change</span><br><span class="line">#<span class="keyword">import</span> &lt;RCTAnimation/RCTValueAnimatedNode.h&gt; to </span><br><span class="line">#<span class="keyword">import</span> <span class="string">"RCTValueAnimatedNode.h"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="搭建Android-开发环境"><a href="#搭建Android-开发环境" class="headerlink" title="搭建Android 开发环境"></a>搭建Android 开发环境</h3><blockquote><p>1下载安装JDK</p></blockquote><ul><li>查看JDK版本</li></ul><blockquote><p>2.下载Android Studio2.0 或更高版本。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础2</title>
      <link href="/2018/12/01/%E9%9D%A2%E8%AF%95/FrontPrevew1/"/>
      <url>/2018/12/01/%E9%9D%A2%E8%AF%95/FrontPrevew1/</url>
      
        <content type="html"><![CDATA[<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul><li>1.JS的typeof 会返回什么数据类型 -&gt; (object| number|function|boolen|undefind)</li><li><p>判断一个字符串中出现的次数最多的字符，统计这个次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">test1()&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'asdfssaaasasasasaa'</span>; <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!json[str.charAt(i)])&#123;</span><br><span class="line">            json[str.charAt(i)] = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            json[str.charAt(i)]++;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> iMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> iIndex = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> json)&#123;</span><br><span class="line">        <span class="keyword">if</span>(json[i]&gt;iMax)&#123;</span><br><span class="line">            iMax = json[i];</span><br><span class="line">            iIndex = i;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">'出现次数最多的是:'</span>+iIndex+<span class="string">'出现'</span>+iMax+<span class="string">'次'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个获取非行间样式的函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getStyle(obj,attr,value) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.currentStyle) &#123; <span class="comment">//ie</span></span><br><span class="line">            <span class="keyword">return</span> obj.currentStyle(attr); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">//标准浏览器</span></span><br><span class="line">            obj.getComputedStyle(attr,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        obj.style[attr] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>闭包是什么，有什么特性，对页面有什么影响<ul><li>闭包是能读取其他函数内部变量的函数</li><li><a href="http://blog.csdn.net/gaoshanwudi/article/details/7355794" target="_blank" rel="noopener">会延长函数变量的声明周期</a> </li></ul></li><li>JSONP 的原理 为什么不是真正的Ajax<ul><li>jsonp 只是动态创建script标签，回调函数</li><li>Ajax 是页面无刷新请求数据操作 </li></ul></li><li>JS的本地对象，内置对象 宿主对象<ul><li>本地对象可以new实例化的 array obj regexp</li><li>内置对象 不可以实例化 的，gload math 等</li><li>宿主对象 BOM对象 document window等</li></ul></li><li>Window.location.search 返回什么？(返回问好后面的，?number1&amp;page=2&amp;id=2111)</li><li>Window.location.hash返回的是什么？(#后面的锚点<code>http://www.sina.com/getage?#age</code> 中的<code>#age</code>)</li><li><p>阻止冒泡函数 兼容W3C 和IE</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stopPropagation(e) &#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span>(e.stopPropagation) &#123; <span class="comment">//W3C阻止冒泡方法 </span></span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        e.cancelBubble = <span class="literal">true</span>; <span class="comment">//IE阻止冒泡方法</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象和函数的log</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">unction  f1()&#123;</span><br><span class="line">    <span class="keyword">var</span>  tmp  =  <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);      <span class="comment">//A</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);   <span class="comment">//B</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  obj  =  <span class="keyword">new</span>  f1();  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.x)          <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(f1());     <span class="comment">//3</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 1 构造函数，内部的this 就是f1 ,log:1,3</span></span><br><span class="line"><span class="comment">// 2 创建的实例：log:3</span></span><br><span class="line"><span class="comment">// 3. 简单的一个函数：this是window，JS特性是向外层去找，所以log: 1 3 undefined</span></span><br></pre></td></tr></table></figure><ul><li>函数的作用域问题：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeObjectProperty</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">        o.siteUrl = <span class="string">"http://www.csser.com/"</span>; </span><br><span class="line">        o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        o.siteUrl = <span class="string">"http://www.popcg.com/"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> CSSer = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">changeObjectProperty(CSSer);</span><br><span class="line"><span class="built_in">console</span>.log(CSSer.siteUrl); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果 CSSer 参数是按引用传递的，那么结果应该是 "http://www.popcg.com/"，但实际结果却仍是"http://www.csser.com/"。</span></span><br><span class="line"><span class="comment">事实是这 样的:在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可 以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局 部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放 内存。</span></span><br><span class="line"><span class="comment">(补充:内部环境可以通过作用域链访问所有的外部环境中的变量对象，但 外部环境无法访问内部环境。每个环境都可以向上搜索作用域链，以查询变量和函数 名，反之向下则不能。)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>JS 加减运算 <ul><li><code>alert(&#39;5&#39;+3)</code>  数字和字符串加 转换为字符串格式 </li><li>alert(‘5’-3)   字符串和数字减 转换为Number类型</li></ul></li><li>为什不能定义1PX 的div 容器<ul><li>IE6这个问题是默认行高造成的，解决：<code>overflow:hidden</code>  <code>zoom:0.08</code> <code>line-height:1px</code></li></ul></li><li><p>闭包函数运行log</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">2</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">3</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">4</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">foo.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">5</span>)</span><br><span class="line">&#125;; </span><br><span class="line">foo.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">6</span>)</span><br><span class="line">&#125;;</span><br><span class="line">foo.a(); <span class="comment">//6</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</span><br><span class="line">obj.a(); <span class="comment">//2</span></span><br><span class="line">foo.a(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure></li><li><p>匹配输入的字符：第一个必须是字母或下划线开头，后面的是字母数字或者下划线构成，长度5-20 <code>/^[a-zA-Z_][a-zA-Z0-9_]{4,19}/</code></p></li><li>html添加事件的几种方法 <code>onclick</code> <code>attachEvent</code> <code>addEventListener</code></li><li>BOM的对象？<ul><li><code>Window</code> 是JS的最顶层 其他BOM对象都是Window的属性</li><li><code>doucument</code> 文档对象</li><li><code>location</code> 浏览器的当前URL </li><li><code>navigation</code> 浏览器本身信息</li><li><code>screen</code> 客户端屏幕信息</li><li><code>history</code> 浏览器访问历史信息 </li></ul></li><li><p>JS中的简单继承 <code>Call</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textCallAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, money</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name  =  name;</span><br><span class="line">        <span class="keyword">this</span>.money  =  money;</span><br><span class="line">        <span class="keyword">this</span>.info  =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'姓名: '</span>+<span class="keyword">this</span>.name+<span class="string">' 钱: '</span>+ <span class="keyword">this</span>.money);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//定义孩子类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        Parent.call(<span class="keyword">this</span>, name); <span class="comment">//继承 姓名属性，不要钱。 </span></span><br><span class="line">        <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'姓名: '</span>+<span class="keyword">this</span>.name);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例化类</span></span><br><span class="line">    <span class="keyword">var</span> per = <span class="keyword">new</span> Parent(<span class="string">'parent'</span>, <span class="number">800000000000</span>);</span><br><span class="line">    <span class="keyword">var</span> chi = <span class="keyword">new</span> Children(<span class="string">'child'</span>);</span><br><span class="line">    per.info();  <span class="comment">// 查询自己有方法</span></span><br><span class="line">    chi.info();  <span class="comment">// 查询自己有方法，如果没有向父类查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>bind()</code> <code>live()</code> <code>delegate()</code> 的区别？</p><ul><li><code>bind</code> 绑定事件，对新添加的事件不起作用，方法用于将一个处理成语附加到每个匹配事件上并返回Jquery 对象</li><li><code>live</code> 方法将一个时间处理程序附加到与当前选择器匹配到所有的元素的制定事件上并返回JQuery对象</li><li><code>delegate</code> 放大基于一组特定的根元素将处理程序附加到匹配选择器的所有元素的一个或者多个事件上</li></ul></li><li>typeof [1,2] 返回的object | 返回的类型有 boolen string number object function undefined</li><li>Link 和import的区别<ul><li>用途：Link是Html标签  除了加载CSS 外，还可以定义RSS的其他事物，@import 属于CSS范畴 只能加载CSS</li><li>载入时机：Link引用CSS时，在页面载入的时候加载，@import 网页完全载入之后加载</li><li>兼容性问题：Link时html标签，无兼容性问题 @import时CSS2.1提出来的，低版本无法兼容</li><li>改变样式：Link支持用JS控制DOM去改变样式 @import不支持</li></ul></li><li>Window.onload 和Window.ready的区别？<ul><li>Load需要图片和包含的文件都在加进来之后执行</li><li>ready是不包含图片和非文字的 文档结构准备好就执行 DOM结构绘制完成之后就执行</li></ul></li><li>如何优化代码<ul><li>代码重用</li><li>避免使用全局变量</li><li>拆分函数 -&gt; 避免函数过于臃肿单一职责</li><li>适当的注释 尤其是复杂的业务逻辑和计算逻辑 应写出业务逻辑的具体过程</li><li>内存管理，闭包的变量的释放  </li></ul></li><li><p>文本域当按下<code>enter</code> 键时，不换行，而是换成<code></code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceTextEnterKey</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'textarea'</span>)</span><br><span class="line">    dom.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault()        <span class="comment">//为了阻止 enter 键的默认换行效果</span></span><br><span class="line">        <span class="keyword">if</span>(e.keycode == <span class="string">'enter键码'</span>)&#123;</span><br><span class="line">            dom.value+=<span class="string">"&#123;&#123;enter&#125;&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用原声的JS实现Jquer的Post/get 请求 以及跨域问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">占位置：</span><br><span class="line">POST：</span><br><span class="line">GET：</span><br><span class="line">跨域配置</span><br></pre></td></tr></table></figure></li><li><p>web 前端性能优化 优化思路？</p><ul><li>网络资源 ：设置缓存 减少Http请求 </li><li>本地资源：多个小图配置程精灵图，</li><li>加载进度 JS 循环引用 重复代码合并抽取 没用的图片定期删除 减小包体积</li></ul></li><li>reayonly 与disable的区别<ul><li>readonly 只针对inputtext / passwodd 和textarea 有效</li><li>而disable 对于所有的表单元素都有效，当表单元素使用了disable之后，当把表单提交的时候，元素值不会传递出去</li><li>readonly 会将值传递出去</li></ul></li><li>尽可能详尽的解释Ajax的工作原理<ul><li>Ajax原理通过XMLHttpRequest对象来向服务器发异步请求 ，从服务器获得数据，然后通过JS来操作DOM来更新界面，</li><li>XMLHttpRequest时Ajax的核心机制，是IE5首先引入的，支持异步请求的技术， </li></ul></li><li>JS同源策略: <code>域名 协议 端口</code> 相同</li><li>如何实现设计中用了非标准的字体?</li><li>HTTP 协议中GET 金和POST有什么区别，分别使用什么场景 使用场景：<ul><li>get 传送的数据长度有限制，post没有</li><li>get 通过url 传递 在浏览器地址栏可见，post在报文中传递</li><li>post一般用于表单提交</li><li>get一般用于简单的数据查询，严格要求不那么高的场景</li></ul></li><li><p>HTTP状态码 【200 302 304 403 404 500】分别表示什么</p><ul><li>200请求成功</li><li>302临时重定向 客户端应当继续原有的地址发送以后的请求，只有在cache-control 或Expirse中进行了指定的情况下这个相应才是可缓存的</li><li>304如果客户端 发送了一个带条件的GET请求并且被允许，而内容没有改变，304响应禁止包含消息体 因此消息头后以第一个空行结尾</li><li>403 服务器拒绝执行</li><li>404 请求失败，请求的资源未在服务器上发现</li><li>500 服务器遇到了一个未曾预料的状况，导致无法完成对请求的处理，一般出现在服务器端代码出现错误</li></ul></li><li><p>HTTP协议中，header信息里面 -&gt; 怎么控制页面失效时间？ <code>last-modified</code> <code>cache-control</code> <code>Expires</code></p><ul><li><code>Last-Modified</code> 文档最后修改的时间 客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态 Last-Modified也可以通过setDateHeader 方法来设置</li><li><code>Expires</code> 应该在什么时候认为文档过期，从而不再缓存它</li></ul></li><li><p>优化常用的优化WEB页面加载速度的方法(从网络请求 CSS JS 服务器等)</p></li><li><p>JS中实现一个map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMap</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Array</span>.prototype.map2=<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>[i]=callback(<span class="keyword">this</span>[i]);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> temq = [&#123;<span class="attr">name</span>:<span class="string">'1'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'2'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'3'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'4'</span>&#125;]</span><br><span class="line">        temq.map2(<span class="function"><span class="params">obj</span>=&gt;</span> obj2.name)</span><br><span class="line">        <span class="keyword">var</span> nameStr = temq.map2(<span class="function"><span class="keyword">function</span> (<span class="params">amodel</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> amodel.name</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>如何获取对象A的所有属性(可枚举的，不可枚举的，不包括继承来的属性)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys——IE9+</span><br><span class="line"><span class="comment">//或者使用 for...in 并过滤出继承的属性 </span></span><br><span class="line"><span class="keyword">for</span>(o <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.hasOwnproperty(o))&#123;</span><br><span class="line"><span class="comment">//把 o 这个属性放入到一个数组中 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三种弹框的单词三种弹框的功能 【alert confirm prompt】</p></li><li>console.log(8 | 1) -&gt; log:9</li><li><p>JS数组添加，删除 排序 方法有哪些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.contact() <span class="comment">//拼接数组</span></span><br><span class="line"><span class="built_in">Array</span>.join()    <span class="comment">// 用，拼接 </span></span><br><span class="line"><span class="built_in">Array</span>.length    <span class="comment">// 数组长度</span></span><br><span class="line"><span class="built_in">Array</span>.pop()     <span class="comment">//尾部删除并返回数组的最后一个元素</span></span><br><span class="line"><span class="built_in">Array</span>.push()    尾部给添加元素</span><br><span class="line"><span class="built_in">Array</span>.shift()   头部移除</span><br><span class="line"><span class="built_in">Array</span>.unshift() 头部插入</span><br><span class="line"><span class="built_in">Array</span>.splice()   删除位置，长度</span><br><span class="line"><span class="built_in">Array</span>.slice()   返回数组的一部分</span><br><span class="line"><span class="built_in">Array</span>.reverse() 反转</span><br><span class="line"><span class="built_in">Array</span>.sort()    排序 函数或箭头函数</span><br><span class="line"><span class="built_in">Array</span>.toString()    转换为字符串</span><br><span class="line"><span class="built_in">Array</span>.toLocaleString()  将数组 转换成局部字符串</span><br></pre></td></tr></table></figure></li><li><p>JS中callee 和 caller的作用区别</p><ul><li>caller :返回一个函数的引用 该函数调用了当前函数<code>fn.caller()</code></li><li>callee 返回正在被执行的function 函数 ，也就是指定的function对象的上下文 <code>arguments.callee</code> </li></ul></li><li>在JS中什么是伪数组？如何将伪数组转化为数组<ul><li>伪数组(类数组) 无法调用length，但可以通过for遍历，典型的函数是arguments 还有使用getElementsByTagName,document.childNodes 等返回的Nodeist都是伪数组</li></ul></li><li><p>立即执行函数/闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setImmedFunc()&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a,b=<span class="number">5</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// number number undefined number</span></span><br></pre></td></tr></table></figure></li><li><p>运算符之间的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b = a * <span class="number">0</span>; </span><br><span class="line"><span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 26</span></span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line"></span><br><span class="line">&lt;script&gt; </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var a;</span></span><br><span class="line"><span class="regexp">    var b = a * 0;</span></span><br><span class="line"><span class="regexp">    if (b == b) &#123;    /</span><span class="regexp">/b=0</span></span><br><span class="line"><span class="regexp">        console.log(b * 2 + "2" - 0 + 4);</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        console.log(!b * 2 + "2" - 0 + 4);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/6</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-09%20%E4%B8%8A%E5%8D%8810.25.38.png?30" alt="屏幕快照 2018-12-09 上午10.25.38"></p><ul><li><code>btn.addEvenetListener()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>); <span class="keyword">var</span> handler = &#123;</span><br><span class="line">    id: <span class="string">'_eventHandler'</span>,</span><br><span class="line">    exec: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, handler.exec);</span><br></pre></td></tr></table></figure><ul><li>原型链继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    proto: &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">F.prototype = obj.proto;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line">    </span><br><span class="line">obj.proto.c = <span class="number">3</span>;</span><br><span class="line">obj.proto = &#123;<span class="attr">a</span>:<span class="number">-1</span>, <span class="attr">b</span>:<span class="number">-2</span>&#125;;</span><br><span class="line">alert(f.a);<span class="comment">//1</span></span><br><span class="line">alert(f.c);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> F.prototype[<span class="string">'a'</span>];</span><br><span class="line">alert(f.a);<span class="comment">//undefined</span></span><br><span class="line">alert(obj.proto.a);<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">添加属性会继承，父影响子，子不影响父</span><br></pre></td></tr></table></figure><ul><li>写出函数DateDemo()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">DateDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d, s=<span class="string">"今天日期是:"</span>; d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    s += (d.getMonth() + <span class="number">1</span>) + <span class="string">"/"</span>; s += d.getDate() + <span class="string">"/"</span>; s += d.getFullYear();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(DateDemo())</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTML5-CSS3"><a href="#HTML5-CSS3" class="headerlink" title="HTML5 CSS3"></a>HTML5 CSS3</h3><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li>农场买了一只羊，第一年是小羊，第二年底生一只，第三年不生，第四年底再生一只，第 五年死掉</li><li>写出代码对下列数组去重并从大到小排列 {5,2,3,6,8,6,5,4,7,1,9}先去重再排序</li><li><code>约瑟夫环</code> 已知 n 个人(以编号 1，2，3…分别表示)围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列;他的下一个人又从1开始报数，数到m的那个人又出列;依此规律重复下去，直到圆桌周围的人全部 出列</li><li>有 1 到 10w 这个 10w 个数，去除 2 个并打乱次序，如何找出那两个数?</li><li>请写一个正则表达式:要求最短 6 位数，最长 20 位，阿拉伯数和英文字 母(不区分大小写)组成<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,20}$</code></li><li>统计 1 到 400 亿之间的自然数中含有多少个 1?比如 1-21 中，有<code>1、10、11、12、13、14、15、16、17、18、19、20、21</code> 这么多自然数有 13 个 1</li><li>删除与某个字符相邻且相同的字符，比如 fdaffdaaklfjklja 字符串处理<br>之后成为“fdafdaklfjklja”</li><li>请写出一个程序，在页面加载完成后动态创建一个 form 表 单，并在里面添加一个 input 对象并给它任意赋值后义 post 方式 提交到:<a href="http://127.0.0.1/save.php" target="_blank" rel="noopener">http://127.0.0.1/save.php</a></li><li>用 JavaScript 实现冒泡排序。数据为 23、45、18、37、92、13、24</li></ul><h3 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h3><ul><li>$.ajax()常用的参数有哪些</li><li>用post请求并带有发送数据的和返回数据的样例 </li><li>jQuery 的 slideUp 动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行， 该如何处理呢?</li></ul><h3 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h3><h3 id="JS流行框架"><a href="#JS流行框架" class="headerlink" title="JS流行框架"></a>JS流行框架</h3><h3 id="移动开发"><a href="#移动开发" class="headerlink" title="移动开发"></a>移动开发</h3><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h3 id="前端概括性问题"><a href="#前端概括性问题" class="headerlink" title="前端概括性问题"></a>前端概括性问题</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>转-读书笔记---你不知道的JavaScript(上).md</title>
      <link href="/2018/12/01/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0---%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript(%E4%B8%8A)/"/>
      <url>/2018/12/01/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0---%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/26/16750523a9aa70eb?w=1884&amp;h=768&amp;f=png&amp;s=114301" alt=""></p><ul><li><p>1.问:为什么要写这么长,有必要吗?是不是脑子秀逗了?<br>答:我想这是大部分人看到这个标题都会问的问题.因为作为一个男人,我喜欢长一点,也不喜欢分割成几个部分.一家人就要在一起,整整齐齐.好吧,正经点,其实整篇前言可以说都是在回答这个问题.你<strong>可以选择先看完前言,再决定要不要和书本搭配起来阅读.</strong> 这里先简单捋一下:1,内容多:首先这篇读书笔记本来内容就很多,是对书本的全方位详解.2,针对新人:针对那种红宝书草草读过一遍,对js只浮于接口调用的新手.3,留给读者自己提炼:读这种社科类书籍一般是先读厚,再读薄.这篇笔记就属于最开始’读厚’的阶段.在读者彻底读懂后,再自己进一步提炼.关于怎么读书,我后面会详细介绍.</p></li><li><p>2.问:这么长,那到底包含了些什么内容?<br>答:笔记的目录结构和书本的完全一致.对每一节的内容进行更通俗的解读(针对新人),对示例进行更深的说明,有的会辅以流程图,并提供对应的mdn连接;对内容进行归纳,小节脉络更清晰;添加了大量实际工作时的注意事项,增加了更加清晰和易懂的示例及注释,并在原文基础上进行了拓展和总结;对书中的错误和说了<code>后面会进行介绍</code>,而没有介绍的填坑,翻译或者容易引起误会的称呼的说明;添加了个人读书时的感受和吐槽.</p></li><li><p>3.问:书已经够多了,还要看你这么长的笔记?<br>答:首先你要知道读这种技术类书籍,不是读小说!读完并不意味着你读懂了.而是需要将书中的知识转换成你自己的.这篇笔记就是,帮助新手更方便地理解知识点,更流畅地进行阅读.也可以在读完一节后,通过对比,发现自己有什么知识点是不懂或者遗漏,理解有误的. 并且一些注意事项,容易被误导的,关于书中观点的吐槽等等,其实想说的都已经写在笔记里了.</p></li><li><p>4.问:这本书到底怎么样,有没有其他人说的那么好?<br>答:这是一个先扬后抑的回答.首先毫无疑问这是一本非常不错的书!它系统地全面地对JavaScript进行解读,优点缺点全都有.当你<strong>彻底读懂</strong>这本书后,你对JavaScript的几乎所有疑问都会得到解答(我对作用域是不是”对象”的疑问?也得到了解答).但它也是有一定门槛的,如果你对JS不熟,常用接口都不熟,很多名词的表层意思都不太理解.这本书并不适合你,你花在问谷歌娘的时间可能比你读书的都长,读起来也是一知半解;不同于其他书,这本书很多时候没有给出明确的概念定义,需要你自己反复阅读理解他的话.每一小节的脉络结构也不是那么清晰,有时候需要自己去梳理;不知道是不是翻译的锅,很多东西解释得有点迷,本来很简单,但却说一堆并不常用的术语(可能国内不是这么叫的),看得你一脸懵逼!有时候同一个概念,前后会出现三四个不同的名词进行指代,没有任何说明;整本书,具有很强的作者主观情感在里面.前半段,把JS捧得很高,说它引擎的各种优化好!但到后半段关于JavaScript中模拟类和继承”的批评,说它们具有很大误导性!更是嗤之以鼻!就差爆粗口了,好像JavaScript就是一个异教徒,应该绑在十字架上被烧死!但是他这样的观点,都是站在其他类语言的角度来看待,产生的.我想更多的读者可能是只接触过JavaScript这一种语言,对他们来说,其实是根本没有这些”疑惑”的!</p></li></ul><h2 id="读书建议"><a href="#读书建议" class="headerlink" title="读书建议:"></a>读书建议:</h2><ul><li>1.不要抱任何功利和浮躁的心来读书!<br>这种以理论,概念为主的书,其实大家都是不那么愿意读的.一是读起来很费劲,抽象.二是实际工作,几乎不会用到,在现在浮躁的前端圈这是吃力不讨好.那这本书最大的用处是什么?没错,就是被很多人用来<strong>应付面试!?</strong> 这本身没什么问题,你读懂系列三本书,所有涉及JS的面试都能轻松应对.但是当抱着功利心时,你更多的则是敷衍.对书中的概念进行机械的复制,再粘贴上自己肤浅的理解.OK,应付那些也是跟风的面试官足够了.一般你回答了,他们也不会继续往下问,问深了自己也不清楚,也不好否定你.如果你够自信,’瞎扯’也可以唬住.如果你答不上,脸皮厚的会让你回去自己查.真正知道的面试官,其实都是会给你解释的,他们也不会忙到差这点时间.其实他们心里也是很乐意展示自己学识丰富的一面.<br>这种功利读书方式,即使你读完了(更多人是半途而废),对你的技术也不会有任何帮助.因为读完,你其实是一知半解的.这样反而更糟,甚至可能会对你之前JavaScript正确的理解产生混淆.</li></ul><ul><li>2.认认真真读完一本书好过收藏一百篇相关文章(其实你压根连一半都不会看)!     </li></ul><p>我一直认为想系统弄懂一门知识,书本才是最好的选择,它绝对比你东拼西凑找来的一堆文章要好得多!现在前端圈随便看看,一大堆全是原型链,闭包,this…这些内容.里面的内容大同小异,很多理解也是比较浅显,考虑的也比较片面.但浮躁的人就是喜欢这种文章,觉得自己收藏了,看了就彻底理解了(!?).其实这些文章里有很多都是借鉴了本书.     </p><p>首先,你必须知道知识都是有体系的,不是完全独立的.例如想要彻底理解,原型链,闭包,this.就必须先弄清作用域和函数.知识都是环环相扣,相互关联的.如果你想彻底弄懂,还是选择读书吧,由浅入深,全面理清所有知识点的关联.记住 <strong>“一知半解”永远比”无知”更糟!</strong>(当然不懂装懂,还振振有词的人另当别论).</p><ul><li>3.如何读书:<strong>先读厚,再读薄!</strong><br>首先<strong>先把书读厚:</strong> 将每一节里的所有知识点弄懂,不留遗漏.记下所有提到的知识点,并将重要的知识点高亮标识(电子书的话).然后在自己本地的MD笔记里,按照一定的逻辑顺序,<strong>尽量用自己的话语</strong>进行阐述总结这些知识点.如果有读几遍也不理解的地方,可以查询MDN,结合自己的实际工作经验,或者先圈起来,继续往下读,随着后面理解的深入,前面不懂的地方自然也就明了了.<strong>这篇读书笔记就是带你怎么把书读厚.</strong><br>然后<strong>把书读薄:</strong> 这部分需<strong>读者你自己</strong>在彻底理解的基础上,并站在全局的角度进行归纳去总结.先是按章进行思维导图式的总结.然后章与章之间进行规律总结,并记住特例.例如:作用域与原型链都有一个类似的”就近原则”,由于就近原则所以就产生了”屏蔽”.这些都是需要<strong>自己</strong>站在全局融会贯通的角度去总结.虽然网上有别人总结好的,但我们不应该养成什么都依赖别人,自己直接复制的习惯(如果你想一直做一个’复制粘贴’程序员的话).</li></ul><h1 id="第一部分-作用域和闭包"><a href="#第一部分-作用域和闭包" class="headerlink" title="第一部分 作用域和闭包"></a>第一部分 作用域和闭包</h1><p>链接：<a href="https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4" target="_blank" rel="noopener">https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="第一章-作用域是什么"><a href="#第一章-作用域是什么" class="headerlink" title="第一章 作用域是什么"></a>第一章 作用域是什么</h2><h3 id="1-1-编译原理"><a href="#1-1-编译原理" class="headerlink" title="1.1 编译原理"></a>1.1 编译原理</h3><p><strong>传统编译的三个步骤</strong></p><ul><li><strong>1,分词/词法分析(Tokenizing/Lexing) :</strong> 这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。例如，考虑程序var a = 2;。这段程序通常会被分解成 为下面这些词法单元:var、a、=、2、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。</li><li><strong>2,解析/语法分析(Parsing):</strong> 这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“<strong>抽象语法树</strong>”(Abstract Syntax Tree，AST)。var a = 2; 的抽象语法树中可能会有一个叫作 VariableDeclaration 的顶级节点，接下来是一个叫作Identifier(它的值是a)的子节点，以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral(它的值是 2)的子节点。</li><li><strong>3,代码生成:</strong> 将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指令，用来创建一个叫作 a 的变量(包括分配内存等)，并将一个值储存在 a 中。</li></ul><p><strong><em>说明:</em></strong> 此处只需记住第一步:分词/词法分析.第二步:解析/语法分析,得到抽象语法树(AST).第三步:代码生成,将抽象语法树转换为机器指令.</p><p><strong>JavaScript与传统编译的不同点:</strong></p><ul><li>1,JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化.</li><li>2,JavaScript与传统的编译语言不同，它不是在构建之前提前编译的，大部分情况下,它是在代码执行前的几微秒(甚至更短)进行编译.</li><li>3,JavaScript 引擎用尽了各种办法(比如 JIT，可以延 迟编译甚至实施重编译)来保证性能最佳。</li><li>4,JavaScript的编译结果不能在分布式系统中进行移植。</li></ul><h3 id="1-2-理解作用域"><a href="#1-2-理解作用域" class="headerlink" title="1.2 理解作用域"></a>1.2 理解作用域</h3><h4 id="1-2-1-演员表-代码编译到执行的参与者"><a href="#1-2-1-演员表-代码编译到执行的参与者" class="headerlink" title="1.2.1 演员表(代码编译到执行的参与者)"></a>1.2.1 演员表(代码编译到执行的参与者)</h4><p>首先介绍将要参与到对程序 var a = 2; 进行处理的过程中的演员们，这样才能理解接下来将要听到的对话。</p><ul><li>引擎<br>从头到尾负责整个 JavaScript 程序的编译及执行过程。</li><li>编译器<br>引擎的好朋友之一，负责语法分析及代码生成等脏活累活(详见前一节的内容)。</li><li>作用域<br>引擎的另一位好朋友，负责收集并维护由所有声明的标识符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。<h4 id="1-2-2-对话-代码编译执行过程"><a href="#1-2-2-对话-代码编译执行过程" class="headerlink" title="1.2.2 对话(代码编译执行过程)"></a>1.2.2 对话(代码编译执行过程)</h4><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b0e35937a479?w=1186&amp;h=1292&amp;f=png&amp;s=105617" alt="JavaScript对var a =2;的处理过程"></li></ul><h4 id="1-2-3-作用域的LHS查询和RHS查询"><a href="#1-2-3-作用域的LHS查询和RHS查询" class="headerlink" title="1.2.3 作用域的LHS查询和RHS查询"></a>1.2.3 作用域的LHS查询和RHS查询</h4><p>由上图可知,引擎在获得编译器给的代码后,还会对作用域进行询问<strong>变量</strong>.</p><p>现在将例子改为var a = b;此时引擎会对变量a和变量b都向<strong>作用域</strong>进行查询.查询分为两种:LHS和RHS.其中L代表左.R代表右.即对变量a进行LHS查询.对变量b进行RHS查询.</p><p>单单从表象上看.LHS就是作用域对<code>=</code>左边变量的查询.RHS就是作用域对<code>=</code>右边变量的查询.但实际上并不是这么简单,首先LHS和RHS都是对变量进行查询,这也是我为什么要将例子从var a=2;改为var a=b;两者的区别是两者最终要查询到的东西并不一致.LHS是要查询到变量的声明(而不是变量的值),从而后面可以为其赋值.RHS是要查询到变量最终的值.还有一点,LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“= 赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最 好将其理解为“赋值操作的目标是谁(LHS)”以及“谁是赋值操作的源头(RHS)”.或者这样理解如果这段代码需要得到该变量的’源值’,则会进行RHS查询.</p><h4 id="1-2-4-引擎和作用域的对话"><a href="#1-2-4-引擎和作用域的对话" class="headerlink" title="1.2.4 引擎和作用域的对话"></a>1.2.4 引擎和作用域的对话</h4><p>这部分比较简单就是通过拟人方式比喻引擎和作用域的合作过程.一句话概括就是,引擎进行LHS和RHS查询时都会找作用域要.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">2</span> );</span><br></pre></td></tr></table></figure></p><p>让我们把上面这段代码的处理过程想象成一段对话，这段对话可能是下面这样的。</p><p>引擎:我说作用域，我需要为 foo 进行 RHS 引用。你见过它吗?<br>作用域:别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。<br>引擎:哥们太够意思了!好吧，我来执行一下 foo。<br>引擎:作用域，还有个事儿。我需要为 a 进行 LHS 引用，这个你见过吗?<br>作用域:这个也见过，编译器最近把它声名为 foo 的一个形式参数了，拿去吧。<br>引擎:大恩不言谢，你总是这么棒。现在我要把 2 赋值给 a。<br>引擎:哥们，不好意思又来打扰你。我要为 console 进行 RHS 引用，你见过它吗?<br>作用域:咱俩谁跟谁啊，再说我就是干这个。这个我也有，console 是个内置对象。 给你。<br>引擎:么么哒。我得看看这里面是不是有 log(..)。太好了，找到了，是一个函数。<br>引擎:哥们，能帮我再找一下对 a 的 RHS 引用吗?虽然我记得它，但想再确认一次。<br>作用域:放心吧，这个变量没有变动过，拿走，不谢。<br>引擎:真棒。我来把 a 的值，也就是 2，传递进 log(..)。</p><h3 id="1-3作用域嵌套"><a href="#1-3作用域嵌套" class="headerlink" title="1.3作用域嵌套"></a>1.3作用域嵌套</h3><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。进而形成了一条作用域链.因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。</p><p>当引擎需要对作用域进行查询时.引擎会从当前的执行作用域开始查找变量，如果找不到， 就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都 会停止。</p><h3 id="1-4-异常"><a href="#1-4-异常" class="headerlink" title="1.4 异常"></a>1.4 异常</h3><p>例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( a + b ); </span><br><span class="line">  b = a;</span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">2</span> );</span><br></pre></td></tr></table></figure></p><ul><li>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 <strong>ReferenceError</strong> 异常。例如上面例子中<code>console.log(a+b)</code>由于RHS此时是找不到b的值.故会抛出ReferenceError.</li><li>如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 <strong>TypeError</strong>。</li><li>当引擎执行 LHS 查询时，<strong>如果在顶层(全局作用域)中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量</strong>，并将其返还给引擎，前提是程序运行<strong>在非 “严格模式”下</strong>。例如上面例子中的<code>b=a;</code>.</li><li>在严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。</li></ul><h3 id="1-5-LHS与RHS小结"><a href="#1-5-LHS与RHS小结" class="headerlink" title="1.5 LHS与RHS小结"></a>1.5 LHS与RHS小结</h3><ul><li>LHS和RHS查询都是引擎对作用域的查询</li><li>LHS和RHS查询都是只对变量进行查询</li><li>LHS和RHS都会沿着作用域链进行查询,直到最上层的全局作用域.如果没找到的话,在非严格模式下,LHS则会在全局创建一个相同名称的变量.RHS则会抛出ReferenceError的异常.</li><li>如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。</li><li>LHS只是找到变量的容器而已,方便进行赋值</li><li><code>=</code>操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。此时都会进行LHS查询</li><li>RHS查询则需要找到变量的值.</li></ul><h2 id="第二章-词法作用域"><a href="#第二章-词法作用域" class="headerlink" title="第二章 词法作用域"></a>第二章 词法作用域</h2><p>作用域分为两种工作模式:</p><ul><li>1,<strong>词法作用域</strong>.是目前最为普遍的，被大多数编程语言所采用的模式.当然JavaScript也是使用的词法作用域.</li><li>2,动态作用域.使用较少,比如 Bash 脚本、Perl 中的一些模式等.</li></ul><h3 id="2-1-词法阶段"><a href="#2-1-词法阶段" class="headerlink" title="2.1 词法阶段"></a>2.1 词法阶段</h3><p><strong>词法阶段:</strong> 大部分标准语言编译器的第一个工作阶段叫作词法化(也叫单词化)。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。</p><p><strong>词法作用域:</strong> 词法作用域就是定义在词法阶段的作用域也被称为静态作用域。即在JavaScript里作用域的产生是在编译器出来的第一阶段词法阶段产生的,并且是你在书写完代码时就已经确定了的.</p><p><strong>词法作用域位置:</strong> 词法作用域位置范围完全由写代码期间函数所声明的位置来决定.</p><p><strong>理解词法作用域及嵌套:</strong><br>看下例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">c</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( a, b, c );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bar( b * <span class="number">3</span> ); </span><br><span class="line">&#125;</span><br><span class="line">foo( <span class="number">2</span> ); <span class="comment">// 2, 4, 12</span></span><br></pre></td></tr></table></figure></p><p>在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们分成3个逐级包含的”气泡作用域”。</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b17a466f8fb0?w=2020&amp;h=814&amp;f=png&amp;s=173375" alt=""></p><ul><li>1:包含着整个全局作用域，其中只有一个标识符:foo。</li><li>2:包含着 foo 所创建的作用域，其中有三个标识符:a、bar 和 b。</li><li>3:包含着 bar 所创建的作用域，其中只有一个标识符:c。</li></ul><p><strong>注意:</strong> 没有任何函数的气泡可以(部分地)同时出现在两个外部作用域的气泡中，就如同没有任何函数可以部分地同时出现在两个父级函数中一样。</p><p><strong>引擎对作用域的查找:</strong><br>这一部分在上一节中已经说过,就是从当前作用域逐级向上,直到最上层的全局作用域.这里再进一步进行讲解.<strong>作用域查找会在找到第一个匹配的标识符时停止</strong>。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。抛开遮蔽效应， 作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p><p><strong>注意:</strong></p><ul><li>全局变量会自动成为全局对象(比如浏览器中的 window对象)的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引 用来对其进行访问。例如:<code>window.a</code>  通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。</li><li>词法作用域查找只会查找一级标识符，比如 a、b 和 c。<strong>如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符</strong>，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。</li></ul><h3 id="2-2-欺骗词法"><a href="#2-2-欺骗词法" class="headerlink" title="2.2 欺骗词法"></a>2.2 欺骗词法</h3><p><strong>欺骗词法:</strong> 引擎在运行时来“修改”(也可以说欺骗)词法作用域.或者说就是在引擎运行时动态地修改词法作用域(本来在编译词法化就已经确定的).</p><p><strong>欺骗词法的两种机制:</strong>(下面这两种机制理解了解即可,不推荐实际开发使用)</p><h4 id="2-2-1-eval"><a href="#2-2-1-eval" class="headerlink" title="2.2.1 eval"></a>2.2.1 eval</h4><p>JavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。即将eval放在该词法作用域,然后eval携带的代码就会动态加入到该词法作用域.</p><p>通过下面的例子加深理解:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">str, a</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">eval</span>( str ); <span class="comment">// 欺骗! </span></span><br><span class="line">  <span class="built_in">console</span>.log( a, b );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">foo( <span class="string">"var b = 3;"</span>, <span class="number">1</span> ); <span class="comment">// 1, 3</span></span><br></pre></td></tr></table></figure></p><p>eval(..) 调用中的 “var b = 3;” 这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量 b，因此它对已经存在的 foo(..) 的词法作用域进行了修改。当 console.log(..) 被执行时，会在 foo(..) 的内部同时找到 a 和 b，但是永远也无法找到外部的 b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。</p><p><strong>注意:</strong> </p><ul><li>eval(..) 通常被用来执行动态创建的代码.可以据程序逻辑动态地将变量和函数以字符形式拼接在一起之后传递进去。</li><li>在严格模式下,eval(…)无法修改所在的作用域。</li><li>与eval(…)类似,setTimeout(..)和 setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。</li><li>new Function(..) 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数(前面的参数是这个新生成的函数的形参)。这种构建函数的语法比 eval(..) 略微安全一些，但也要尽量避免使用。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a + b;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">1111</span>));  <span class="comment">//1112</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-2-with-不推荐实际使用"><a href="#2-2-2-with-不推荐实际使用" class="headerlink" title="2.2.2 with(不推荐实际使用)"></a>2.2.2 with(不推荐实际使用)</h4><p>例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    a = <span class="number">2</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  a: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = &#123; </span><br><span class="line">  b: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line">foo( o1 );</span><br><span class="line"><span class="built_in">console</span>.log( o1.a ); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">foo( o2 );</span><br><span class="line"><span class="built_in">console</span>.log( o2.a ); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 2——不好，a 被泄漏到全局作用域上了!</span></span><br></pre></td></tr></table></figure></p><p>起初你会觉得o1的a属性被with里的a进行了词法引用被遮蔽了成为了2.而o2没有a属性,此时with不能进行词法引用,所以此时o2.a就会变成undefined.但是,为什么最后console.log(a)会为2?因为在执行foo(o2)时,with会对其中的a=2进行LHS查询,但它在o2作用域,foo()作用域,全局作用域都没找到,因此就创建了一个全局变量a并随后赋值2.</p><p>总的来说,with就是将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</p><p><strong>注意:</strong> 使用 eval(..) 和 with 的原因是会被严格模式所影响(限制)。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval(..) 也被禁止了。</p><h4 id="2-2-3-性能"><a href="#2-2-3-性能" class="headerlink" title="2.2.3 性能"></a>2.2.3 性能</h4><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行<strong>静态分析</strong>，并<strong>预先确定</strong>所有变量和函数的定义位置，才能在执行过程中快速找到标识符。但是eval(..) 和 with会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词法作用域。这么做就会导致引擎无法知道eval和with它们对词法作用域进行什么样的改动.只能对部分不进行处理和优化!因此如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢!。</p><h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h3><ul><li>词法作用域是在你书写代码时就已经决定了的.在编译的第一阶段词法分析阶段产生词法作用域.此时词法作用域基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。</li><li>eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域(在运行时)。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域(同样是在运行时)。</li><li>一般不要在实际代码中使用eval(…)和with,因为不仅危险,而且会造成性能问题!</li></ul><h2 id="第三章-函数作用域和块作用域"><a href="#第三章-函数作用域和块作用域" class="headerlink" title="第三章 函数作用域和块作用域"></a>第三章 函数作用域和块作用域</h2><h3 id="3-1-函数中的作用域"><a href="#3-1-函数中的作用域" class="headerlink" title="3.1 函数中的作用域"></a>3.1 函数中的作用域</h3><ul><li>JavaScript 具有基于函数的作用域，一般情况下每声明 一个函数都会创建一个函数作用域.</li><li>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。这样的好处是JavaScript 变量可以根据需要改变值类型。</li></ul><h3 id="3-2-隐藏内部实现"><a href="#3-2-隐藏内部实现" class="headerlink" title="3.2 隐藏内部实现"></a>3.2 隐藏内部实现</h3><p>因为</p><ul><li>子级函数作用域可以直接访问父级函数作用域里的标识符;</li><li>父级函数作用域不能直接访问子级函数作用域里的标识符.</li></ul><p>所以用函数声明对代码进行包装，实际上就是把这些代码“隐藏”起来了。</p><p>为什么要将代码进行”隐藏”?<br>因为最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必 要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。<br><strong>隐藏的好处:</strong></p><ul><li>实现代码私有化,减少外部对内部代码的干扰,保持其稳定性.</li><li><strong>规避冲突:</strong> 可以避免同名标识符之间的冲突， 两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致 变量的值被意外覆盖。那么一般规避冲突的手段有哪些?<ul><li><ol><li><strong>全局命名空间:</strong> 变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象(命名空间)的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。 </li></ol></li><li>2.<strong>模块管理:</strong> 另外一种避免冲突的办法和现代的模块机制很接近，就是从众多模块管理器中挑选一个来 使用。实际上就是我们常用的amd,commonjs,import模块机制.</li></ul></li></ul><h3 id="3-3-函数作用域"><a href="#3-3-函数作用域" class="headerlink" title="3.3 函数作用域"></a>3.3 函数作用域</h3><p><strong>函数声明与函数表达式:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道函数foo内的变量和函数被隐藏起来了,是不会对全局作用域造成污染.但是变量名foo仍然存在于全局作用域中,会造成污染.那有什么方法能避免函数名的污染呢?那就是作为函数表达式,而不是一个标准的函数声明.这样函数名只存在于它自己的函数作用域内,而不会存在于其父作用域,这样就没有了污染.举个函数声明的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 3 </span></span><br><span class="line">&#125;)(); </span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>当我们用()包裹一个函数,并立即执行.此时这个包装函数声明是从<code>(function</code>开始的而不是从function关键字开始.这样foo就会被当做一个函数表达式,而不是一个函数声明(即foo不会存在于父级作用域中).回到上面的例子中,全局作用域是访问不到foo的,foo只存在于它自己的函数作用域中.</p><p><strong>补充: 什么是函数声明和函数表达式</strong><br>首先我们得了解JS声明函数的三种方式:</p><ul><li><strong>函数表达式(Function Expression):</strong> 将函数定义为表达式语句（通常是变量赋值,也可以是自调用形式）的一部分。通过函数表达式定义的函数可以是命名的，也可以是匿名的。因为它可以没有函数名,因此常被用作匿名函数.如果有,其函数名也只存在自身的函数作用域.并且函数表达式不能以“function”开头.函数表达式可以存储在变量或者对象属性里. (在函数声明前加上运算符是可以将其转化为函数表达式的.例如<code>!</code>,<code>+</code>,<code>-</code>,<code>()</code>.举个例子:<code>!function(){console.log(1)}()</code>的结果是1,并不会报错)</li><li><strong>函数声明(Function Declaration):</strong>  函数声明是一种独立的结构,它会声明一个具名函数,并必须以function开头. 且函数声明会进行函数提升.使它能在其所在作用域的任意位置被调用,即后面的代码中可以将此函数通过函数名赋值给变量或者对象属性.</li><li><strong>Function()构造器:</strong> 即使用Function构造器创建函数.不推荐这种用法, 容易出问题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function()构造器</span></span><br><span class="line"><span class="keyword">var</span> f =<span class="keyword">new</span> <span class="built_in">Function</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f())</span><br><span class="line"><span class="comment">//思考一下,这里会打印出什么</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>怎么区分函数声明和函数表达式:</strong><br>看 function 关键字出现在声明中的位置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。例如上例中,是从<code>(</code>开始而不是function.</p><p><strong>补充:</strong> 上面这段是原书的解释,我觉得这个解释并不完全,这里给出我自己的解释.</p><ul><li>表象区别:和它说的一样,只要是<strong>以function开头进行声明,并且含有函数名</strong>的就一定是函数声明.</li><li>内在区别:其实我在上面补充两者的定义时已经说得很清楚了,我再对比总结下.<ul><li>函数提升:函数声明,会将整个函数进行提升.而函数表达式则不会提升,它是在引擎运行时进行赋值，且要等到表达式赋值完成后才能调用。 </li><li>函数表达式是可以没有函数名的,如果有,它的函数名也只存在于自身的作用域,<code>var f = function fun(){console.log(fun)}</code>其他地方是没有的.这也避免了全局污染,也方便递归.</li></ul></li></ul><h4 id="3-3-1-匿名和具名"><a href="#3-3-1-匿名和具名" class="headerlink" title="3.3.1 匿名和具名"></a>3.3.1 匿名和具名</h4><p>函数表达式可以是匿名的，而函数声明则不可以省略函数名.有函数名的就是具名函数,没有函数名的就是匿名函数.</p><p>匿名函数的缺点:</p><ul><li><ol><li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li></ol></li><li><ol start="2"><li>如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</li></ol></li><li><ol start="3"><li>匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。</li></ol></li></ul><p>所以给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践.</p><p><strong>PS:</strong> 个人意见是如果函数表达式有赋值给变量或属性名或者就是一次性调用的.其实是没必要加上函数名.因为代码里取名本来就很难,取不好反而会造成误解.</p><h4 id="3-3-2-立即执行函数表达式"><a href="#3-3-2-立即执行函数表达式" class="headerlink" title="3.3.2 立即执行函数表达式"></a>3.3.2 立即执行函数表达式</h4><p>比如 (function foo(){ .. })()。第一个 ( ) 将函数变成表达式，第二个 ( ) 执行了这个函数。这就是立即执行函数表达式,也被称为IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression);</p><p>IIFE可以具名也可以匿名.好处和上面提到的一样.IIFE还可以是这种形式<code>(function(){ .. }())</code>.这两种形式在功能上是一致的。</p><h3 id="3-4-块作用域"><a href="#3-4-块作用域" class="headerlink" title="3.4 块作用域"></a>3.4 块作用域</h3><p>函数作用域是JavaScript最常见的作用域单元,有时我们仅会将var赋值变量在if或for的{…}内使用,而不会在其他地方使用.但它仍然会对外层的函数作用域造成污染.这个时候就会希望能有一个作用域能将其外部的函数作用域隔开,声明的变量仅在此作用域有效.块作用域(通常就是{…}包裹的内部)就可以帮我们做到这点.</p><p>从 ES3 发布以来，JavaScript 中就有了块作用域，而 with 和 catch 分句就是块作用域的两个小例子。</p><h4 id="3-4-1-with"><a href="#3-4-1-with" class="headerlink" title="3.4.1 with"></a>3.4.1 with</h4><p>我们在第 2 章讨论过 with 关键字。它不仅是一个难于理解的结构，同时也是块作用域的一个例子(块作用域的一种形式)，用 with 从对象中创建出的作用域仅在 with 声明中而非外部作用域中有效。</p><h4 id="3-4-2-try-catch"><a href="#3-4-2-try-catch" class="headerlink" title="3.4.2 try/catch"></a>3.4.2 try/catch</h4><p>try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="literal">undefined</span>(); <span class="comment">// 执行一个非法操作来强制制造一个异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( err ); <span class="comment">// 能够正常执行! </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( err ); <span class="comment">// ReferenceError: err not found</span></span><br></pre></td></tr></table></figure></p><p>err 仅存在 catch 分句内部，当试图从别处引用它时会抛出错误。<br>那么如果我们想用catch创建一个不是仅仅接收err的块作用域,该怎么做呢?<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">throw</span> <span class="number">2</span>;&#125;<span class="keyword">catch</span>(a)&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><p>这样就创建了一个块作用域,且a=2,仅在catch分句中存在.在ES6之前我们可以使用这种方法来使用块作用域.</p><h4 id="3-4-3-let"><a href="#3-4-3-let" class="headerlink" title="3.4.3 let"></a>3.4.3 let</h4><p>ES6 引入了新的 let 关键字，提供了除 var 以外的另一种变量声明方式。let 关键字可以将变量绑定到所在的任意作用域中(通常是 { .. } 内部)。</p><p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。例如在if的{…}内用let声明一个变量.那什么是显式地创建块作用域呢?就是单独创建<code>{}</code>来作为let的块作用域.而不是借用if或者for提供的<code>{}</code>.例如<code>{let a=2;console.log(a)}</code><br><strong>注意:</strong> 使用 let 进行的声明不会在块作用域中进行提升.<br><strong>块作用域的好处:</strong></p><ul><li>1,垃圾收集<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 在这里做点有趣的事情</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> someReallyBigData=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">//dosomeing</span></span><br><span class="line">     &#125;</span><br><span class="line">     process(someReallyBigData);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"my_button"</span>);</span><br><span class="line">     btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"button click"</span>);</span><br><span class="line"><span class="comment">//假如我们在这里继续调用someReallyBigData就会形成闭包,导致不能垃圾回收(这段是书里没有,我加上方便理解的)</span></span><br><span class="line">     &#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><p>click 函数的点击回调并不需要 someReallyBigData 变量。理论上这意味着当 process(..) 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于 click 函数形成了一个覆盖整个作用域的闭包，JavaScript 引擎极有可能依然保存着这个结构(取决于具体实现)。<br>但显式使用块作用域可以让引擎清楚地知道没有必要继续保存 someReallyBigData 了:<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 在这里做点有趣的事情</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 在这个块中定义的内容可以销毁了! </span></span><br><span class="line"> &#123;</span><br><span class="line">       <span class="keyword">let</span> someReallyBigData = &#123; .. &#125;; </span><br><span class="line">   process( someReallyBigData );</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"my_button"</span>);</span><br><span class="line">     btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"button click"</span>);</span><br><span class="line">     &#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><ul><li><ol start="2"><li>let循环<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123; </span><br><span class="line">  <span class="built_in">console</span>.log( i );</span><br><span class="line">     &#125;</span><br><span class="line"><span class="built_in">console</span>.log( i ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><p>for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。这样就避免了i对外部函数作用域的污染.</p><h4 id="3-4-4-const"><a href="#3-4-4-const" class="headerlink" title="3.4.4 const"></a>3.4.4 const</h4><p>除了 let 以外，ES6 还引入了 const，同样可以用来创建块作用域变量，但其值是固定的(常量)。之后任何试图修改值的操作都会引起错误。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">3</span>; <span class="comment">// 包含在 if 中的块作用域常量</span></span><br><span class="line">  a = <span class="number">3</span>; <span class="comment">// 正常!</span></span><br><span class="line">  b = <span class="number">4</span>; <span class="comment">// 错误! </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log( b ); <span class="comment">// ReferenceError!</span></span><br></pre></td></tr></table></figure></p><h3 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h3><p>函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，可以有效地与外部作用域隔开.    </p><p>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)即块作用域。ES6中就提供了let和const来帮助创建块作用域.</p><h2 id="第四章-提升"><a href="#第四章-提升" class="headerlink" title="第四章 提升"></a>第四章 提升</h2><h3 id="4-1-先有鸡-赋值-还是先有蛋-声明"><a href="#4-1-先有鸡-赋值-还是先有蛋-声明" class="headerlink" title="4.1 先有鸡(赋值)还是先有蛋(声明)"></a>4.1 先有鸡(赋值)还是先有蛋(声明)</h3><p>考虑第一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a; </span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br></pre></td></tr></table></figure></p><p>输出结果是2,而不是undefined</p><p>考虑第二段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( a ); </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>输出结果是undefined,而不是ReferenceError<br>考虑完以上代码,你应该会考虑这个问题.到底是声明(蛋)在前，还是赋值(鸡)在前?</p><h3 id="4-2-编译器再度来袭"><a href="#4-2-编译器再度来袭" class="headerlink" title="4.2 编译器再度来袭"></a>4.2 编译器再度来袭</h3><p>编译器的内容,回忆一下，引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是<strong>找到所有的声明，并用合适的作用域将它们关联起来。 之后引擎会询问作用域,对声明进行赋值操作.</strong></p><p>那么,在编译阶段找到所有的声明后,编译器又做了什么?答案就是<strong>提升</strong><br>以上节的第一段代码为例,<strong>当你看到 var a = 2; 时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个声明:var a;和a = 2;。</strong> 第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。在第一个声明在编译阶段时,编译器会对<code>var a;</code>声明进行提升(即把<code>var a;</code>置于所在作用域的最上面).而<code>a = 2;</code>则会保持所在位置不动.此时代码会变成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; </span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br></pre></td></tr></table></figure></p><p>由此可知,<strong>在编译阶段,编译器会对声明进行提升.即先有蛋(声明)后有鸡(赋值)。</strong><br><strong>哪些声明会被进行提升?</strong></p><ul><li>变量声明:例如上例中的<code>var a;</code>.不包括后面的<code>a = 2;</code>即<strong>不包含有赋值操作的声明.</strong></li><li>函数声明:注意<strong>是函数声明,而不是函数表达式!</strong>(不清楚可以看前面的3.3节,我有详细说明).函数声明提升,是将整个函数进行提升,而不是仅仅函数名的提升.</li></ul><h3 id="4-3-函数优先"><a href="#4-3-函数优先" class="headerlink" title="4.3 函数优先"></a>4.3 函数优先</h3><p>函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个“重复”声明的代码中)是函数会首先被提升，然后才是变量。<br>考虑以下代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>会输出 1 而不是 2 !这个代码片段会被引擎理解为如下形式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意，var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明(因此被忽略了)，因为函数声明会被提升到普通变量之前。<br><strong>注意:</strong> js会忽略前面已经声明的声明(不管是变量声明还是函数声明,只要其名称相同,则后续不会再进行重复声明).但是对该变量新的赋值,会覆盖之前的值.<br><strong>一句话概括:函数声明的优先级高于变量声明,会排在它前面.</strong></p><h3 id="4-4-小结"><a href="#4-4-小结" class="headerlink" title="4.4 小结"></a>4.4 小结</h3><ul><li>对于<code>var a = 2</code>  JavaScript引擎会将var a和 a = 2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</li><li>论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的最顶端，这个过程被称为提升。</li><li>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升(即赋值操作都不会提升)。</li><li>注意:，当普通的 var 声明和函数声明混合在一起的时候，并且声明相同时(var的变量名和函数名相同时,会引发js对重复声明的忽略)!一定要注意<strong>避免重复声明!</strong></li></ul><h2 id="第五章-作用域闭包"><a href="#第五章-作用域闭包" class="headerlink" title="第五章 作用域闭包"></a>第五章 作用域闭包</h2><h3 id="5-1-启示"><a href="#5-1-启示" class="headerlink" title="5.1 启示"></a>5.1 启示</h3><ul><li>JavaScript中闭包无处不在，你只需要能够识别并拥抱它。</li><li>闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。</li></ul><h3 id="5-2-实质问题-amp-amp-5-3-现在我懂了"><a href="#5-2-实质问题-amp-amp-5-3-现在我懂了" class="headerlink" title="5.2 实质问题 &amp;&amp; 5.3 现在我懂了"></a>5.2 实质问题 &amp;&amp; 5.3 现在我懂了</h3><p>因为这两小节理解透了其实发现书里也没讲什么,这里就进行合并,并补充拓展我自己的理解和总结.<br><strong>什么是闭包?(广义版)</strong><br><strong>书中解释:</strong> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。<br><strong>MDN的解释:</strong> 闭包是函数和声明该函数的词法环境的组合。<br><strong>我的解释(详细版):</strong> 必须包含两点:</p><ul><li>1,有函数.由于函数自身的特性,它能访问所在的词法作用域.并能保存外部词法作用域的变量和函数到自己的函数作用域.</li><li>2,有该函数所在的词法环境.其实在JavaScript中任何函数都会处在一个词法环境中.不管是全局作用域还是函数作用域.</li></ul><p>综上<strong>简单版</strong>就是:MDN的解释<strong>闭包是函数和声明该函数的词法环境的组合。</strong><br>还可以继续延伸成<strong>极简版</strong>:<strong>JavaScript中的函数就会形成闭包</strong>。<br><strong>Tips:</strong> 注意到上面对<code>词法作用域</code>和<code>词法环境</code>两词的分开使用了吗?<code>1,</code>里此时函数还没被执行,所以使用的是词法作用域即静态作用域.<code>2,</code>里,此时函数被执行,此时词法作用域就会变成词法环境(包含静态作用域与动态作用域).所以其实MDN的解释其实更准确一点,</p><p><strong>我们日常使用时所说的闭包(狭义版,严格意义上的):</strong><br>为了便于对闭包作用域的观察和使用.我们实际使用时会将闭包的函数作用域暴露给当前词法作用域之外.也就是本书一直强调的<strong>闭包函数需要在它本身的词法作用域以外执行</strong>.作者认为符合这个条件才称得上是真正的闭包(也就是我们日常使用常说的’使用闭包’,并且<strong>使用任何回调函数其实也是闭包</strong>).<br>所以狭义版就是:闭包是函数和声明该函数的词法环境的组合,并且将闭包的函数作用域暴露给当前词法作用域之外.    </p><p><strong>闭包暴露函数作用域的三种方式:</strong><br>下面部分是书中没有的,是自己实际使用时的总结,并且<strong>符合这三种形式之一的就是我们日常使用时所说的闭包(狭义版)</strong></p><ul><li><p>1,通过外部函数的参数进行暴露.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    baz(a) <span class="comment">//通过外部函数的参数进行暴露</span></span><br><span class="line">   &#125;</span><br><span class="line">   bar(); </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">val</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( val ); <span class="comment">// 2 </span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></li><li><p>2,通过外部作用域的变量进行暴露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    val=a <span class="comment">//通过外部作用域的变量进行暴露</span></span><br><span class="line">   &#125;</span><br><span class="line">   bar(); </span><br><span class="line">&#125;;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(val)  <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p>3,通过return直接将整个函数进行暴露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bar <span class="comment">//通过return直接将整个函数进行暴露</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> val=foo();</span><br><span class="line">val()  <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>关于闭包的内存泄露问题:</strong><br>首先必须声明一点:<strong>使用闭包并不一定会造成内存泄露,只有使用闭包不当才可能会造成内存泄露.</strong>(吐槽:面试很多新人时,张口就说闭包会造成内存泄露)<br>为什么闭包可能会造成内存泄露呢?原因就是上面提到的,因为它一般会暴露自身的作用域给外部使用.如果使用不当,就可能导致该内存一直被占用,无法被JS的垃圾回收机制回收.就造成了内存泄露.<br><strong>注意:</strong> <strong>即使闭包里面什么都没有,闭包仍然会隐式地引用它所在作用域里的所用变量.</strong>   正因为这个隐藏的特点,闭包经常会发生不易发现的内存泄漏问题.<br><strong>常见哪些情况使用闭包会造成内存泄露:</strong>    </p><ul><li>1,使用定时器未及时清除.因为计时器只有先停止才会被回收.所以决办法很简单,将定时器及时清除,并将造成内存的变量赋值为null(变成空指针)</li><li>2,相互循环引用.这是经常容易犯的错误,并且也不容易发现.举个栗子:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a = &#123;&#125;; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(a); </span><br><span class="line">  &#125;; </span><br><span class="line">  a.fn = bar; </span><br><span class="line">  <span class="keyword">return</span> bar; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>这里创建了一个a 的对象，该对象被内部函数bar引用。然后，a创建了一个属性fn指向了bar，最后返回了innerFn()。这样就形成了bar和a的相互循环引用.可能有人说bar里不使用<code>console.log(a)</code>不就没有引用了吗就不会造成内存泄露了.NONONO,bar作为一个闭包,即使它内部什么都没有,foo中的所有变量都还是隐使地被 bar所引用。这个知识点是我前面忘记提到的,也是书中没有提到的.算了我现在加到前面去吧.所以即使bar内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将<code>a.fn = bar</code>.</p><ul><li>3,将闭包引用到全局变量上.因为全局变量是只有当页面被关闭的时候才会被回收.</li><li>4,在闭包中对DOM进行不当的引用.这个常见于老IE浏览器,现代浏览器已经长大了,已经学会了自己处理这种情况了.这里就不赘述了.想知道的可以自行问谷娘和度娘.</li></ul><p>总而言之,<strong>解决办法就是使闭包的能正常引用,能被正常回收.如果实在不行,就是在使用完后,手动将变量赋值null,强行进行垃圾回收.</strong></p><h3 id="5-4-循环和闭包"><a href="#5-4-循环和闭包" class="headerlink" title="5.4 循环和闭包"></a>5.4 循环和闭包</h3><p>看如下例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( i );</span><br><span class="line">  &#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们期望的结果是分别输出数字 1~5，每秒一次，每次一个。<br>但实际结果是,这段代码在运行时会以每秒一次的频率输出五次 6。<br>(关于书里的解释,我觉得有点说复杂了,没说到点子上,下面是我的解释.)<br><strong>为什么会是这样的结果?</strong><br>timer毫无疑问是一个闭包,它是可以访问到外部的变量i.在进行for循环时,timer()会被重复执行5次,也就是它会 console.log( i )5次.(关键部分来了!)这5次<code>i</code>其实是同一个<code>i</code>.它是来自于外部作用域,即for里面声明的i.在<strong>词法作用域中</strong>变量i只可能对应一个唯一的值,即<strong>变量和它的值是一一对应的.不会变化的</strong>.那这个值到底是多少呢?<strong>这个值就是最终值!</strong> i的最终值就是6即for循环完后<code>i</code>的值.当引擎执行<code>console.log( i )</code>时,它会询问i所对应的作用域,问它i的值是多少.这个时候作用域进行RHS查询得到的结果就是最终值6.        </p><p><strong>为什么我们会以为分别输出1~5?</strong><br>因为在for循环中,我们错以为每一次循环时,函数所输出的i是根据循环动态变化的.即是1~5累加变化的.但实际上它所访问的i是同一个固定不变的值,即最终值6.可能你会有这样的疑惑,那我循环还有意义吗?i其实一开始就确定是6了.没有变化过!错!<code>i</code>变化过,它的确是从1逐步增加到6的.只是外部作用域的i值只可能是循环完后的最终值,并且函数timer()并没有保存每次i变化的值.它只是访问了外部作用域的i值即最终的值6. OK我们知道了出错的地方,就是我们没有把每次i的值保存在一个独立的作用域中.<br>接下来,看下这个改进的例子结果是多少.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( i );</span><br><span class="line">    &#125;, i*<span class="number">1000</span> );</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它的最终值仍然是5个6.为什么?我们来分析下,上例中,它用了一个匿名函数包裹了定时器,并立即执行.在进行for循环时,会创造5个独立的函数作用域(由匿名函数创建的,因为它是闭包函数).但是这5个独立的函数作用域里的i也全都是对外部作用域的引用.即它们访问的都是i的最终值6.这并不是我们想要的,我们要的是5个独立的作用域,并且每个作用域都保存一个”当时”<code>i</code>的值.</p><p><strong>解决办法:</strong><br>那我们这样改写.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j =i;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( j );</span><br><span class="line">    &#125;, j*<span class="number">1000</span> );</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这次终于结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p><p>这样改写后,匿名函数每次都通过j保存了每次i值,这样<code>i</code>值就通过j保存在了独立的作用域中.注意此时保存的i值是’当时’的值,并不是循环完后的最终值.这样循环完后,实际上就创建了5个独立的作用域,每个作用域都保存了一个’当时’i的值(通过j).当引擎执行<code>console.log( j )</code>询问其对应的独立作用域时,得到的值就是’当时’保存的值,再也不是6了.<br>我们还可以进一步简写为这样:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( j );</span><br><span class="line">    &#125;, j*<span class="number">1000</span> );</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p><p><strong>利用块作用域进行解决:</strong><br>在es6中,我们不仅可以使用函数来创建一个独立的作用域,我们还可以使用let声明来创建一个独立的块作用域(在<code>{}</code>内).所以我们还可以这样改写:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( i );</span><br><span class="line">  &#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p><p>这样改写,在每次循环时,let都会对i进行声明.并通过循环自带的<code>{}</code>创建一个独立的块作用域.并且let声明的i,保存了’当时’<code>i</code>的值在当前块作用域里.因此当引擎执行<code>console.log( i )</code>时,它会询问对应的块作用域上i的值,得到的结果就是’当时’保存的值.</p><p><strong>延伸:</strong><br>实际上块作用域可以称得上一个’伪’闭包(之所以是伪,是因为闭包规定了只能是函数).因为它几乎拥有闭包的所有特性.它也可以创建一个独立的作用域,同样外部作用域不能访问块作用域的变量.但块作用域可以访问外部作用域.举个栗子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  &#123;  <span class="comment">//通过&#123;&#125; 显示表示块作用域</span></span><br><span class="line">    <span class="keyword">let</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'块作用域内'</span>,b) <span class="comment">//2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'块作用域外'</span>,b) <span class="comment">//b is not defined</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><p>说了相同点,说说不同点:1,保存变量到块作用域,必须通过let声明.2,块作用域不能和函数一样有名称(函数名)<br>很多不方便使用闭包或者比较麻烦的时候,是可以考虑通过块作用域进行解决.</p><p><strong>总结一下一般什么时候考虑使用闭包:</strong><br>这部分也是自己工作使用的总结,如果有补充或者不对的地方,欢迎留言指正.</p><ul><li>1,需要创建一个独立的作用域并隐藏一些变量或函数,不被外部使用;或者想保存一些外部作用域的变量或函数到这个独立作用域.</li><li>2,只想暴露<strong>一部分</strong>自身作用域的变量或函数给外部使用.</li></ul><h3 id="5-5-模块"><a href="#5-5-模块" class="headerlink" title="5.5 模块"></a>5.5 模块</h3><p>首先看下面的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> something = <span class="string">"cool"</span>;</span><br><span class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( something );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( another.join( <span class="string">" ! "</span> ) );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      doSomething: doSomething,</span><br><span class="line">  doAnother: doAnother</span><br><span class="line">  &#125;; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = CoolModule(); </span><br><span class="line"></span><br><span class="line">foo.doSomething(); <span class="comment">// cool</span></span><br><span class="line">foo.doAnother(); <span class="comment">// 1 ! 2 ! 3</span></span><br></pre></td></tr></table></figure></p><p>首先我们对上面这段代码进成分行分析:<br>私有数据变量:something, another<br>内部函数:doSomething, doAnother<br>直接说结论,上面这个例子就是模块模式.<strong>它return返回的这个对象也就是模块也被称为公共API(至少书中是这样称呼的).CoolModule()就是模块构造器或者叫模块函数.</strong><br><strong>注意</strong>:</p><ul><li><strong>这里的模块和我们所说的模块化开发不是完全一样的!</strong></li><li>模块不一定非要是标准对象,也可以是一个函数,函数本质上也是对象,函数也可以有自己的属性.</li><li>书中有这样一句话<code>CoolModule() 只是一个函数，必须要通过调用它来创建一个模块实例。如果不执行外部函数，内部作用域和闭包都无法被创建。</code>我觉得这句话有必要延伸说一下.函数调用一次就会创建一个该函数的作用域(不调用就不会创建),包括创建它里面的变量和函数.</li></ul><p><strong>模块模式:</strong><br>模块模式需要具备以下2个条件:(这里结合上面的例子,对书中的定义进行说明方便理解)</p><ul><li>1, 必须有外部的封闭函数(即CoolModule)，该函数必须至少被调用一次(每次调用都会创建一个新的模块实例–&gt;模块实例指的就是函数return返回的对象)。</li><li>2, 封闭函数(即CoolModule)必须返回至少一个内部函数(即doSomething, doAnother)，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态(即something, another)。</li></ul><p><strong>模块:</strong><br>表面上看由模块函数(例子中的CoolModule)所返回的对象就是模块.但<strong>模块还必须还包含模块函数的内部函数(即闭包函数)</strong>.只有包含了才能真正称得上是模块.才强调一次这里的模块与模块化里的模块是有区别的,也不是nodejs里的模块.</p><p><strong>模块函数:</strong><br>模块函数也就是模块构造器,例子中的CoolModule().一般它有两个常见用法.</p><ul><li>通过接受参数,对输出的模块进行修改.</li><li>通过添加模块里添加相关的内部函数,实现对输出模块数据的增删改查.(书中用<code>命名将要作为公共API返回的对象</code>.我觉得<code>命名</code>应该是用错了,应该是<code>修改</code>即增删改查更好)</li></ul><h4 id="5-5-1-现代的模块机制"><a href="#5-5-1-现代的模块机制" class="headerlink" title="5.5.1 现代的模块机制"></a><strong>5.5.1 现代的模块机制</strong></h4><p>大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。<br>下面就介绍一个简单的模块管理器实现例子(对书中的例子进行逐行解读):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先实例化我们的模块管理器,取名myModules</span></span><br><span class="line"><span class="keyword">var</span> MyModules=(<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//作为我们的模块池,保存所有定义的模块</span></span><br><span class="line">    <span class="keyword">var</span> modules=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *使用类似AMD的方式定义新模块，接收3个参数</span></span><br><span class="line"><span class="comment">     *name:模块名</span></span><br><span class="line"><span class="comment">     *deps:数组形式表示所依赖的其他模块</span></span><br><span class="line"><span class="comment">     *impl:模块功能的实现</span></span><br><span class="line"><span class="comment">    **/</span> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name,deps,impl</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历依赖模块数组的每一项，从程序池中取出对应的模块,并赋值.</span></span><br><span class="line"><span class="comment">//循环完后,deps由保存模块名的数组变成了保存对应模块的数组.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;deps.length;i++) &#123;</span><br><span class="line">            deps[i]=modules[deps[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新模块存储进模块池，并通过apply注入它所依赖的模块(即遍历后的deps,实际上就是用deps作为impl的入参)</span></span><br><span class="line">        modules[name]=impl.apply(impl,deps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从模块池中取出对应模块</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modules[name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//暴露定义模块和获取模块的两个api</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        define: define,</span><br><span class="line">        get: get</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p><strong>说明:</strong>  后面书中说了这么一句<code>为了模块的定义引入了包装函数(可以传入任何依赖)</code>,这里包装函数指的是Manger(),同样也是我们上节提到的模块函数.首先说明下什么是包装函数.例如函数A当中还有一个函数B.当我们想要调用函数B的时候,则需要先调用函数A.那么函数A就叫做函数B的包装函数.也就是说我们想调用某个模块时,需要先调用它的包装函数即这里的Manger().接着是后面那句<code>并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。</code>注意这里的返回值是指impl的返回值.</p><p>接着看通过管理器来定义和使用模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">MyModules.define(<span class="string">'bar'</span>,[],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span> (<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Let me introduce: "</span> + who;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回公共API 即提供一个hello的接口</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hello:hello</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">MyModules.define(<span class="string">'foo'</span>,[<span class="string">'bar'</span>],<span class="function"><span class="keyword">function</span> (<span class="params">bar</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hungry = <span class="string">"hippo"</span>;</span><br><span class="line"></span><br><span class="line">    functin awesome () &#123;</span><br><span class="line"><span class="comment">//这里的bar为返回模块bar返回的公共API</span></span><br><span class="line">        <span class="built_in">console</span>.log( bar.hello( hungry ).toUpperCase() );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回公共API 即提供一个awesome的接口</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        awesome:awesome</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar=MyModules.get(<span class="string">'bar'</span>);<span class="comment">//通过管理器获取模块'bar'</span></span><br><span class="line"><span class="keyword">var</span> foo=MyModules.get(<span class="string">'foo'</span>);<span class="comment">//通过管理器获取模块'foo'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line"><span class="comment">//调用模块bar的hello接口</span></span><br><span class="line">         bar.hello( <span class="string">"hippo"</span> ) </span><br><span class="line">); <span class="comment">// Let me introduce: hippo </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用模块foo的awesome接口</span></span><br><span class="line">foo.awesome(); <span class="comment">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure><p>这节的主要内容还是了解现在是如何对模块进行一个规范处理.主要是两部分内容,一个是通过名称和依赖合理定义模块并储存.另一个则是通过名称对存储的模块的调用.其实还可以再增加一个删除模块的方法.</p><h4 id="5-5-2-未来的模块机制"><a href="#5-5-2-未来的模块机制" class="headerlink" title="5.5.2 未来的模块机制"></a><strong>5.5.2 未来的模块机制</strong></h4><p>ok,这节说的模块,就是我们常说的模块化开发.并且主要提到的就是ES6里常用的import.没什么好说的.</p><h3 id="5-6-小结"><a href="#5-6-小结" class="headerlink" title="5.6 小结"></a>5.6 小结</h3><p><strong>吐槽:</strong> 同一个函数概念在5.5这一个小节里,居然换着花样蹦出了三个名字!一会叫模块构造器!一会叫模块函数!以及最后的包装函数!每变化一次,都得想一遍它指的是啥!真的是无力吐槽了!!!!</p><p>闭包:当函数可以记住并访问所在的词法作用域，并且函数是在当前词法作用域之外执行，这时 就产生了闭包。</p><p>模块有两个主要特征:</p><ul><li>(1)为创建内部作用域而调用了一个包装函数(模块构造器的实例化,不想对频繁换名字吐槽了);</li><li>(2)包装函数的返回值(也就是模块)必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li></ul><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><h2 id="第一章-关于this"><a href="#第一章-关于this" class="headerlink" title="第一章 关于this"></a>第一章 关于this</h2><h3 id="1-1-为什么要用this"><a href="#1-1-为什么要用this" class="headerlink" title="1.1 为什么要用this"></a>1.1 为什么要用this</h3><p>因为this 提供了一种更优雅的方式来隐式“传递”一个对象(即上下文对象)引用，因此可以将 API 设计得更加简洁并且易于复用。</p><h3 id="1-2-误解"><a href="#1-2-误解" class="headerlink" title="1.2 误解"></a>1.2 误解</h3><p>下面两种常见的对于 this 的解释都是错误的(看看就好,就不过多解读了,以免增加了对错误的印象)。</p><h4 id="1-2-1-指向自身"><a href="#1-2-1-指向自身" class="headerlink" title="1.2.1 指向自身"></a>1.2.1 指向自身</h4><p>人们很容易把 this 理解成指向函数自身.    </p><p>具名函数，可以在它内部可以使用函数名来引用自身进行递归,添加属性等。(这个知识点其实在第三章提过,既然这里又提了一遍,我也再说一遍.)例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo.count = <span class="number">4</span>; <span class="comment">// foo 指向它自身</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匿名函数如果想要调用自身则,需要使用<code>arguments.callee</code>不过这个属性在ES5严格模式下已经禁止了,也不建议使用.详情可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee" target="_blank" rel="noopener">MDN的说明.</a></p><h4 id="1-2-2-它的作用域"><a href="#1-2-2-它的作用域" class="headerlink" title="1.2.2 它的作用域"></a>1.2.2 它的作用域</h4><p><strong>切记:</strong> <strong>this 在任何情况下都不指向函数的词法作用域。你不能使用 this 来引用一个词法作用域内部的东西。</strong> 这部分只需记住这一段话就行.</p><p><strong>终极疑问:</strong> JavaScript里的作用域到底是对象吗?<br>这小节最令我在意的是里面这句话”在 JavaScript 内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过 JavaScript代码访问，它存在于JavaScript 引擎内部。”它让我想起了最开始学JS的一个疑问,JavaScript里的作用域到底是对象吗.虽然”在JS里万物皆对象”.但是作用域给人的感觉却不像是一个对象.更像是一个范围,由函数的<code>{}</code>围城的范围,限制了其中变量的访问.但直觉告诉我它和对象还是应该有点联系的.直到读到书中的这段话,更加印证了我的感觉.<br>在JavaScript里,作用域其实是一个比较特殊的对象,作用域里所有可见的标识符都是它的属性.只是作用域对象并不能通过JavaScript代码被我们访问,它只存在于JavaScript引擎内部.所以作用域作为一个”对象”是经常被我们忽略.</p><h3 id="1-3-this到底是什么"><a href="#1-3-this到底是什么" class="headerlink" title="1.3 this到底是什么"></a>1.3 this到底是什么</h3><p>this 是在运行时(runtime)进行绑定的，<strong>并不是在编写时绑定</strong>，它的上下文(对象)取决于函数调用时的各种条件。this 的绑定和函数声明的位置没有任何关系，<strong>只取决于函数的调用方式</strong>。</p><p>当一个函数被调用时，会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。<strong>this 就是记录的其中一个属性</strong>，会在函数执行的过程中用到。(PS:所以this并不等价于执行上下文)</p><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><ul><li>学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域</li><li>this 实际上是在函数被调用时发生的绑定，<strong>它指向什么完全取决于函数在哪里被调用(关于this你必须记住的话)</strong>。</li></ul><h2 id="第二章-this全面解析"><a href="#第二章-this全面解析" class="headerlink" title="第二章 this全面解析"></a>第二章 this全面解析</h2><h3 id="2-1-调用位置"><a href="#2-1-调用位置" class="headerlink" title="2.1 调用位置"></a>2.1 调用位置</h3><p>通过上节我们知道,this的绑定与函数的调用位置有关.那调用位置是什么.调用位置就是函数在代码中被调用的位置(<strong>而不是声明的位置</strong>)。</p><p>要寻找调用位置,最重要的是要分析调用栈(就是为了到达当前执行位置所调用的所有函数)。我们关心的调用位置就在当前正在执行的函数的前一个调用中。PS:调用栈其实是一个解释起来有点复杂的概念.这里我就不过多解释,这里推荐一篇<a href="https://juejin.im/post/5a05b4576fb9a04519690d42" target="_blank" rel="noopener">文章</a>,解释得不错.</p><p>这节书里的例子解释得不错,这里就不复制代码了.其实分析调用栈只是为了在运行时找到我们关心的函数到底<strong>在哪里和被谁调用了.</strong> 但是实际别写代码时,其实并不会分析得这么清楚的,我们还是只需记住<code>this的指向就是我们调用该函数的上下文对象.意思就是我们在哪里调用该函数,this就指向哪里</code>.并且查看调用栈还可以通过浏览器的开发者工具,只需在疑惑的代码上一行加上debugger即可.浏览器在调试模式时,我们就可以在调用列表里查看调用栈.我们一般也仅在查找bug时,会使用该方法.</p><h3 id="2-2-绑定规则"><a href="#2-2-绑定规则" class="headerlink" title="2.2 绑定规则"></a>2.2 绑定规则</h3><p>在找到调用位置后,则需要判定代码属于下面四种绑定规则中的哪一种.然后才能对this进行绑定.<br><strong>注意:</strong> this绑定的是上下文<strong>对象</strong>,<strong>并不是函数自身也不是函数的词法作用域</strong></p><h4 id="2-2-1-默认绑定"><a href="#2-2-1-默认绑定" class="headerlink" title="2.2.1 默认绑定"></a>2.2.1 <strong>默认绑定</strong></h4><p><strong>什么是独立函数调用</strong>:对函数直接使用而不带任何修饰的函数引用进行调用.简单点一个函数直接是<code>func()</code>这样调用,<strong>前面什么都没有</strong>.不同于通过对象属性调用例如<code>obj.func()</code>,也没有通过new关键字<code>new Function()</code>;也没有通过apply,bind,call强制改变this指向.<br><strong>默认绑定:</strong> 当被用作独立函数调用时（不论这个函数在哪被调用,不管全局还是其他函数内），this默认指向到window；<br><strong>注意:</strong> 如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定，因此 this 会绑定到 undefined.</p><h4 id="2-2-2-隐式绑定"><a href="#2-2-2-隐式绑定" class="headerlink" title="2.2.2 隐式绑定"></a>2.2.2 <strong>隐式绑定</strong></h4><p><strong>隐式绑定:</strong> 函数被某个对象拥有或者包含.也就是函数被作为对象的属性所引用.例如<code>obj.func()</code>.此时this会绑定到该对象上.<br><strong>隐式丢失:</strong> 不管是通过函数别名或是将函数作为入参造成的隐式丢失.只需找到它真正的调用位置,并且函数前没有任何修饰也没有显式绑定(下节会讲到)(非严格模式下).那么this则会进行默认绑定,指向window.<br><strong>注意:</strong> 实际工作中,大部分this使用错误都是由对隐式丢失的不理解造成的.<strong>记住函数调用前没有任何修饰和显式绑定(其实就是call、apply、bind),this就指向window</strong></p><h4 id="2-2-3-显式绑定"><a href="#2-2-3-显式绑定" class="headerlink" title="2.2.3 显式绑定"></a>2.2.3 <strong>显式绑定</strong></h4><p>在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 间接(隐式)绑定到这个对象上。如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，此时则需要显式绑定.<br><strong>显式绑定:</strong>  可以直接指定 this 的绑定对象，被称之为显式绑定。基本上就是我们常使用的call、apply、bind方法都是显式绑定.(如果这三个方法不能熟练使用的,建议找度娘或者谷娘学习后,再看这节.)<br><strong>注意:</strong><br>如果你传入了一个原始值(字符串类型、布尔类型或者数字类型)来当作 this 的绑定对 象，这个原始值会被转换成它的对象形式(也就是new String(..)、new Boolean(..)或者 new Number(..))。这通常被称为“装箱”。</p><p><strong>硬绑定:</strong> 使用call、apply、bind方法强制显式地将this进行绑定,称之为硬绑定。<br>硬绑定的典型应用场景就是创建一个包裹函数(其实就是常说的封装函数)，传入所有的参数并返回接收到的所有值.<br>在封装函数中,我们常使用apply.一方面是因为它可以手动绑定this,更重要的是因为可以用apply的第二个参数,方便地注入所有传入的参数.例如之前提到的<code>modules[name]=impl.apply(impl,deps)</code>.因为我们不知道传入的参数有多少个,但我们可以方便地使用一个<code>deps</code>将其全部注入.另一个常用的是<code>foo.apply( null,argue)</code>当我们将apply的第一个参数设置为null时,此时this就会默认绑定到window.切记使用这种用法时<strong>确保函数foo内没有使用this.</strong> 否则很可能会造成全局污染.如果是第三方库的函数就建议不要使用了,因为你不知道别人的函数是否使用了this(关于这部分内容,下节会继续提到).还有一种常用就是<code>foo.call( this)</code>.这样foo里的this都会指向当前调用的上下文环境.</p><p><strong>API调用的“上下文”:</strong> 第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”(context)，其作用和 bind(..) 一样，确保你的回调函数使用指定的 this。</p><h4 id="2-2-4-new绑定"><a href="#2-2-4-new绑定" class="headerlink" title="2.2.4 new绑定"></a><strong>2.2.4 new绑定</strong></h4><p>JavaScript 中 new 的机制实际上和面向类的语言完全不同。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，<strong>它们只是被 new 操作符调用的普通函数而已。实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”。</strong></p><p>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p><ul><li>1,创建(或者说构造)一个全新的对象。</li><li>2,这个新对象会被执行[[原型]]连接。</li><li>3,这个新对象会绑定到函数调用的this。</li><li>4,如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li></ul><p>示例:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log( bar.a ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。<br><strong>说明:对于上面这句话进行解释下,如果在一个函数前面带上 new 关键字来调用， 那么背地里将会创建一个连接到该函数的 prototype 的新对象，this就指向这个新对象；</strong></p><h3 id="2-3-优先级"><a href="#2-3-优先级" class="headerlink" title="2.3 优先级"></a>2.3 优先级</h3><p>直接上结论:<br>new绑定=显示绑定&gt;隐式绑定&gt;默认绑定<br><strong>说明:</strong> new绑定与显示绑定是不能直接进行测试比较,但通过分析发现new绑定内部其实是使用了硬绑定(显示绑定的一种),所以new绑定和显示绑定优先级应该差不多.但话说回来,一般实际使用时,不会这种复杂的交错绑定.所以只需记住下面的判定即可.</p><p><strong>判断this:</strong><br>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断:</p><ul><li>1,函数是否在new中调用(new绑定)?如果是的话this绑定的是新创建的对象。  var bar = new foo()</li><li>2,函数是否通过call、apply(显式绑定)或者硬绑定调用?如果是的话，this绑定的是 指定的对象。var bar = foo.call(obj2)</li><li>3,函数是否在某个上下文对象中调用(隐式绑定)?如果是的话，this 绑定的是那个上 下文对象。var bar = obj1.foo()</li><li>4,如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到 全局对象。var bar = foo()<br>就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白 this 的绑定原理了。</li></ul><h3 id="2-4-绑定例外"><a href="#2-4-绑定例外" class="headerlink" title="2.4 绑定例外"></a>2.4 绑定例外</h3><h4 id="2-4-1-被忽略的this"><a href="#2-4-1-被忽略的this" class="headerlink" title="2.4.1 被忽略的this"></a><strong>2.4.1 被忽略的this</strong></h4><p>如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则,this会绑定到window上.<br><strong>使用情景:</strong><br>一种非常常见的做法是使用 apply(..) 来“展开”一个数组(也可以用来方便地参数注入)，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数).通过自带bind方法实现柯里化是很方便的,比自己写要简化好多.</p><p><strong>注意:</strong> </p><ul><li>在 ES6 中，可以用 … 操作符代替 apply(..) 来“展 开”数组，foo(…[1,2]) 和 foo(1,2)是一样的，这样可以避免不必要的 this 绑定。可惜，在 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。<ul><li>当使用null或者undefined进行绑定时,要<strong>确保该函数内没有使用this</strong>,否则此时很容易对全局变量造成破坏!尤其是使用第三方库的方法!</li></ul></li></ul><p><strong>更安全的this</strong><br>如果函数内使用了this,直接使用null则可能会对全局造成破坏.因此我们可以通过创建一个“DMZ”(demilitarized zone，非军事区)对象——它就是一个空的非委托的对象(委托在第 5 章和第 6 章介绍)。让this绑定到这个”DMZ上.这样就不会对全局造成破坏.<br>怎么创建DMZ呢.就是通过<strong>Object.create(null)</strong> 创建一个空对象.这种方法和 {} 很像，但是并不会创建 Object.prototype 这个委托，所以它比 {}“更空”更加安全.</p><p>PS:实际使用一般不会遇到这种情况(也可能是我太菜,没遇到),如果函数内有this,那肯定是有需要调用的变量或函数,直接把它绑定到一个空对象上.那什么都取不到,还有什么意义?所以函数没有this就传入null.如果有this就把它绑定到真正需要它的对象上,而不是一个空对象上.这些是我自己的见解,如果有不妥的,欢迎留言指正.</p><h4 id="2-4-2-间接引用"><a href="#2-4-2-间接引用" class="headerlink" title="2.4.2 间接引用"></a><strong>2.4.2 间接引用</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">foo</span>: foo &#125;; </span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line">o.foo(); <span class="comment">// 3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">// 2  其实就是foo()  此时this默认绑定到window</span></span><br></pre></td></tr></table></figure><p>例子中的间接引用其实是对函数的理解不深造成的.其实(p.foo = o.foo)()就是(foo)(),这样就是全局调用foo()所以this默认就绑定到了window上.<br><strong>注意:</strong><br>对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是 函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则 this 会被绑定到全局对象。(对于这段话其实在2.2.1节就应该说了!)</p><h4 id="2-4-3-软绑定"><a href="#2-4-3-软绑定" class="headerlink" title="2.4.3 软绑定"></a><strong>2.4.3 软绑定</strong></h4><p>硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。这时候则需要使用软绑定.<br><strong>Tips:</strong> 这里给的软绑定方法还是挺好的.但是建议还是在自己的代码里使用,并注释清除.以免别人使用,对this错误的判断.</p><h3 id="2-5-this词法"><a href="#2-5-this词法" class="headerlink" title="2.5 this词法"></a>2.5 this词法</h3><p> ES6 中介绍了一种无法使用上面四条规则的特殊函数类型:箭头函数。<br> <strong>箭头函数不使用 this 的四种标准规则，而是根据外层(函数或者全局)作用域来决定 this。</strong>(而传统的this与函数作用域没有任何关系,它只与调用位置的上下文对象有关.这点在本章开头就已经反复强调了.)        </p><p> <strong>重要:</strong></p><ul><li>箭头函数最常用于回调函数中，例如事件处理器或者定时器.</li><li>箭头函数可以像 bind(..) 一样确保函数的 this 被绑定到指定对象</li><li>箭头函数用更常见的词法作用域取代了传统的 this 机制。</li></ul><p><strong>注意:</strong> 这种情况:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  x: <span class="number">99</span>,</span><br><span class="line">  bar:<span class="built_in">module</span>.bind(<span class="keyword">this</span>) <span class="comment">//此时bind绑定的this为window.</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x=<span class="string">"window"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar())<span class="comment">//window</span></span><br></pre></td></tr></table></figure></p><p>在 ES6 之前我们就已经在使用一种几乎和箭头函数完全一样的模式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// lexical capture of this </span></span><br><span class="line">  setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log( self.a );</span><br><span class="line">         &#125;, <span class="number">100</span> );</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call( obj ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>虽然 self = this 和箭头函数看起来都可以取代 bind(..)，但是从本质上来说，它们想替代的是 this 机制。(的确是这样,我一般会用me替代self.因为少两个单词=.=)</p><p><strong>关于this的编码规范建议:</strong></p><ul><li><ol><li>只使用词法作用域并完全抛弃错误this风格的代码;</li></ol><ul><li><ol start="2"><li>完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。</li></ol></li></ul></li></ul><p>在自己实际工作中,其实是两种混用的,绝大部分情况下都会使用词法作用域风格.因为有时候你真的很难做到完全统一.我现在的习惯是,在写任何函数时,开头第一个就是<code>var me =this;</code>这样在看到函数第一眼,就知道:哦,这个函数是用词法作用域风格的.尤其函数内涉及到回调.这样就避免了写着写着发现this绑定到其他地方去了,一个函数里面this不统一的情况.</p><h3 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h3><p>(这里总结得很好,我就全部copy了)<br>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p><ul><li><ol><li>由new调用?绑定到新创建的对象。</li></ol></li><li><ol start="2"><li>由call或者apply(或者bind)调用?绑定到指定的对象。</li></ol></li><li><ol start="3"><li>由上下文对象调用?绑定到那个上下文对象。</li></ol></li><li><ol start="4"><li>默认:在严格模式下绑定到undefined，否则绑定到全局对象。</li></ol></li></ul><p>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。    </p><p>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这其实和 ES6 之前代码中的 self = this 机制一样。     </p><p><strong>特别注意:</strong> 其中最需要注意的就是<strong>当你使用jquery或vue时</strong>,此时this是被动态绑定了的.大多数 jQuery 方法将 this 设置为已选择的 dom 元素。使用 Vue.js时，则方法和计算函数通常将 this 设置为 Vue 组件实例。vue文档中<code>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</code> 也包括使用第三方ajax时,例如axios.解决方法也很简单,要么使用传统的function或者使用<code>let _this=this</code>进行接管.其实当你使用vue时,你默认的思想就是this指的就是vue实例.所以除了钩子函数和axios里会有点影响外,其余还好.</p><p><strong>PS</strong> 这里再补充说明<br><strong>上下文(对象)与函数作用域的区别于联系:</strong></p><ul><li><strong>上下文：</strong> 可以理解为一个对象，所有的变量都储存在里面.上下文环境是在函数被调用并被引擎执行时创建的.如果你没调用,那么就没有上下文.</li><li><strong>作用域：</strong> 除了全局作用域，只有函数和ES6新增的let,const才能创建作用域.创建一个函数就创建了一个作用域，无论你调用不调用，函数只要创建了，它就有独立的作用域.作用域控制着被调用函数中的变量访问.</li><li><strong>两者:</strong> 作用域是基于函数的，而上下文是基于对象的。作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的。上下文始终是this关键字有关， 它控制着this的引用。一个作用域下可能包含多个上下文。有可能从来没有过上下文（函数没有被调用）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了(垃圾回收)；有可能同时存在一个或多个（闭包）。</li></ul><h2 id="第三章-对象"><a href="#第三章-对象" class="headerlink" title="第三章 对象"></a>第三章 对象</h2><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><p>对象可以通过两种形式定义:声明(文字)形式(就是常说的对象字面量)和构造形式。</p><ul><li>声明形式(对象字面量):<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> myObj = &#123; </span><br><span class="line">   key: value</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><ul><li>构造形式:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">myObj.key = value;</span><br></pre></td></tr></table></figure></li></ul><p>构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个 键 / 值对，但是在构造形式中你必须逐个添加属性。<br>PS:其实我们绝大部分情况下都是使用对象字面量形式创建对象.</p><h3 id="3-2-类型"><a href="#3-2-类型" class="headerlink" title="3.2 类型"></a>3.2 类型</h3><p>在JavaScript中一共有6中主要类型(术语是”语言类型”)</p><ul><li>string</li><li>number</li><li>boolean  </li><li>null </li><li>undefined  </li><li>object</li></ul><p><strong>简单数据类型:</strong><br>其中string、boolean、number、null 和 undefined属于简单基本类型,并不属于对象.<br>null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 “object”。实际上，null 本身是基本类型。<br><strong>PS:</strong> 原因是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。</p><p><strong>对象:</strong><br>对象除了我们自己手动创建的,JavaScript其实内置了很多对象,也可以说是对象的一个子类型.<br><strong>内置对象:</strong>    </p><ul><li>String </li><li>Number </li><li>Boolean  </li><li>Object </li><li>Function  </li><li>Array </li><li>Date </li><li>RegExp  </li><li>Error</li></ul><p>在 JavaScript 中，这些内置对象实际上只是一些内置函数。这些内置函数可以当作构造函数(由 new 产生的函数调用——参见第 2 章)来使用.<br><strong>几点说明:</strong></p><ul><li>函数就是对象的一个子类型(从技术角度来说就是“可调用的对象”)。JavaScript 中的函数是“一等公民”，因为它们本质上和普通的对象一样(只是可以调用)，所以可以像操作其他对象一样操作函数(比如当作另一个函数的参数)。</li><li>通过字面量形式创建字符串,数字,布尔时,引擎会自动把字面量转换成 String 对象,Number对象,Boolean对象，所以它们是可以访对应对象内置的问属性和方法。</li><li>null 和 undefined 没有对应的构造形式，它们只有文字形式。相反，Date 只有构造，没有文字形式。</li><li>对于 Object、Array、Function 和 RegExp(正则表达式)来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量(这是肯定的,因为不管哪种形式一创建出来就是对象类型,不可能是其他类型,实际上是不存在字面量这一说的)。但是使用构造形式可以提供一些额外选项(内置)。</li><li>Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建。也可以使用 new Error(..) 这种构造形式来创建，不过一般来说用不着。</li></ul><h3 id="3-3-内容"><a href="#3-3-内容" class="headerlink" title="3.3 内容"></a>3.3 内容</h3><p>对象属性:由一些存储在特定命名位置的(任意类型的)值.<br>属性名:存储在对象容器内部的属性的名称.属性值并不会存在对象内.而是通过属性名(就像指针,从技术角度来说就是引用)来指向这些值真正的存储位置(就像房门号一样).<br><strong>属性名的两种形式:</strong></p><ul><li><ol><li>使用<code>.</code>操作符.也是我们最常用的形式.它通常被称为”属性访问”. <code>.</code> 操作符会要求属性名满足标识符的命名规范.</li></ol></li><li><ol start="2"><li>使用<code>[&quot;..&quot;]</code>语法进行访问.这个通常被称为”键访问”.<code>[&quot;..&quot;]</code>语法可以接受任意UTF-8/Unicode 字符串作为属性名。并且<code>[&quot;..&quot;]</code>语法使用字符串来访问属性,如果你的属性名是一个变量,则可以使用书中的例子<code>myObject[idx]</code>形式进行访问.这也是最常使用”键访问”的情况.但<strong>如果idx是属性名则还是需写成<code>myObject[&quot;idx&quot;]</code>字符串形式.</strong></li></ol></li></ul><p><strong>注意:</strong> <strong>在对象中，属性名永远都是字符串</strong>。如果你使用 string(字面量)以外的其他值作为属性 名，那它首先会被转换为一个字符串。即使是数字也不例外，虽然在数组下标中使用的的 确是数字，但是在对象属性名中数字会被转换成字符串 .</p><p><strong>补充:</strong> 这里我在书中的例子基础上进行了修改,得到这个例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123; </span><br><span class="line">  a:<span class="number">2</span>,</span><br><span class="line">  idx:<span class="number">111</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> idx=<span class="string">"a"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( myObject[idx] ); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log( myObject[<span class="string">"idx"</span>] ); <span class="comment">//111</span></span><br><span class="line"><span class="built_in">console</span>.log( myObject[<span class="keyword">this</span>.idx] );  <span class="comment">// 2 此时this是指向window.[]里的this同样符合上一章所讲的规则</span></span><br><span class="line"><span class="comment">//结果是否和你所想得一样呢?</span></span><br></pre></td></tr></table></figure></p><h4 id="3-3-1-可计算属性名"><a href="#3-3-1-可计算属性名" class="headerlink" title="3.3.1 可计算属性名"></a>3.3.1 <strong>可计算属性名</strong></h4><p>ES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prefix = <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">   [prefix + <span class="string">"bar"</span>]:<span class="string">"hello"</span>, </span><br><span class="line">   [prefix + <span class="string">"baz"</span>]: <span class="string">"world"</span></span><br><span class="line">&#125;;</span><br><span class="line">myObject[<span class="string">"foobar"</span>]; <span class="comment">// hello</span></span><br><span class="line">myObject[<span class="string">"foobaz"</span>]; <span class="comment">// world</span></span><br></pre></td></tr></table></figure></p><h4 id="3-3-2-属性与方法"><a href="#3-3-2-属性与方法" class="headerlink" title="3.3.2 属性与方法"></a>3.3.2 <strong>属性与方法</strong></h4><ul><li>我们经常把对象内部引用的函数称为“方法”(的确如此).</li><li>实际上函数并不属于该对象,它不过是对函数的引用罢了.对象属性访问返回的函数和其他函数没有任何区别(除了可能发生的隐式绑定this到该对象)。</li><li>即使你在对象的文字形式中声明一个函数表达式，这个函数也不会“属于”这个对象—— 它们只是对于相同函数对象的多个引用。</li></ul><h4 id="3-3-3-数组"><a href="#3-3-3-数组" class="headerlink" title="3.3.3 数组"></a>3.3.3 <strong>数组</strong></h4><ul><li>数组支持<code>[]</code>形式访问储存的值,其中<code>[]</code>内的值默认形式为数值下标(为从0开始的整数,也就是常说的索引).例如<code>myArray[0]</code></li><li>数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性.例如<code>myArray.baz = &quot;baz&quot;</code>.注意:添加新属性后,虽然可以访问,但数组的 length 值不会改变.</li><li>数组可以通过<code>myArray[1]=11;myArray[&quot;2&quot;]=22;</code>这种形式对数组内容进行修改,添加.</li><li>虽然数组也可以和对象一样通过<code>键/值 对</code> 形式来使用.但JS已经对数组的行为和用途进行了优化.所以还是建议使用默认的<code>下标/值 对</code> 形式来使用.</li></ul><h4 id="3-3-4-复制对象"><a href="#3-3-4-复制对象" class="headerlink" title="3.3.4 复制对象"></a>3.3.4 <strong>复制对象</strong></h4><ul><li>复制分为浅拷贝和深拷贝.浅拷贝会对对象中的基本数据类型进行复制(在内存中开辟新的区域),对于对象则是继续引用.而不是重新创建一个”一样的”对象.深拷贝则是对其中的所有内(容包括对象)进行深层次的复制.</li><li>一般情况下我们可以通过JSON来复制对象.<code>var newObj = JSON.parse( JSON.stringify( someObj ) );</code>.但需要指出的是这种方法<strong>对于包含function函数或者Date类型的对象则不管用!</strong></li><li>ES6 定义了 Object.assign(..) 方法来实现浅复制。具体用法在这就不赘述了.</li></ul><h4 id="3-3-5-属性描述符"><a href="#3-3-5-属性描述符" class="headerlink" title="3.3.5 属性描述符"></a>3.3.5 <strong>属性描述符</strong></h4><p>从 ES5 开始，所有的属性都具备了属性描述符。</p><ul><li><strong>查看属性描述符:</strong> 可以使用Object.getOwnPropertyDescriptor( myObject, “a” );方法查看myObject对象里属性a的属性描述符.</li><li><strong>配置属性描述符:</strong> 可以使用Object.defineProperty(..)方法对属性的属性描述符就像配置.举个例子:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty( myObject, <span class="string">"a"</span>, &#123;</span><br><span class="line">         value: <span class="number">2</span>,</span><br><span class="line">         writable: <span class="literal">true</span>, </span><br><span class="line">  configurable: <span class="literal">true</span>, </span><br><span class="line">  enumerable: <span class="literal">true</span></span><br><span class="line">     &#125; );</span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//该方法可以配置四个属性描述符</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意:</strong> 书中关于<code>属性描述符也被称为“数据描述符”</code>其实是不够准确的.<br>对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter和setter函数对描述的属性。<strong>描述符必须是这两种形式之一；不能同时是两者</strong>。(getter和setter是后面马上要讲到的两个描述符)它们的关系如下:(详情可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN的解释</a>)</p><table><thead><tr><th></th><th>configurable</th><th>enumerable</th><th>value</th><th>writable</th><th>get</th><th>set</th></tr></thead><tbody><tr><td>数据描述符</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>存取描述符</td><td>Yes</td><td>Yes</td><td>No</td><td>No</td><td>Yes</td><td>Yes</td></tr></tbody></table><p><strong>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</strong></p><p>value就是该属性对应的值。默认为 undefined。下面分别介绍剩下的三个属性描述符键值:</p><ul><li><strong>1. Writable</strong>   决定是否可以修改属性的值。当被设置为false后,再对属性值进行修改,则会静默失败(silently failed,修改不成功,也不报错)了。如果在严格模式下，则会报出TypeError错误.</li><li><strong>2. Configurable</strong> 决定属性描述符是否可配置.如果为true,就可以使用 defineProperty(..) 方法来修改属性描述符.注意:不管是不是处于严格模式，修改一个不可配置的属性描述符都会出错。并且<strong>把 configurable 修改成 false 是单向操作，无法撤销!</strong> 但是有个例外即便属性是 configurable:false，我们还是可以 把 writable 的状态由 true 改为 false，但是无法由 false 改为 true。除了无法修改，<strong>configurable:false 还会禁止删除这个属性</strong>.</li><li><strong>3. Enumerable</strong>  决定该属性是否会出现在对象的属性枚举中.比如说 for..in 循环。如果把 enumerable 设置成 false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。</li></ul><h4 id="3-3-6-不变性"><a href="#3-3-6-不变性" class="headerlink" title="3.3.6 不变性"></a>3.3.6 <strong>不变性</strong></h4><p>除了上面提到的Object.defineProperty(..),ES5还可以通过很多种方法来实现属性或者对象的不可变.<br><strong>注意:</strong> <strong>这些所有方法都是只能浅不变</strong>,如果目标对象引用了其他对象(数组、对象、函数，等)，其他对象的内容不受影响，仍然是可变的.类似于浅拷贝.</p><p><strong>说明:</strong>  <strong>在 JavaScript 程序中很少需要深不可变性。</strong> 有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</p><p><strong>方法:</strong></p><ul><li><strong>1. 对象常量(不可改)</strong> 结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性(不可修改、重定义或者删除)</li><li><strong>2. 禁止扩展(不可增)</strong> 使用 Object.prevent Extensions(myObject),可以禁止一个对象添加新属性并且保留已有属性.在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。</li><li><strong>3. 密封(不可配置,但可修改)</strong> 使用Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 <strong>configurable:false</strong>。密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性(虽然可以修改属性的值)。</li><li><strong>4. 冻结(不可配置,也不可修改)</strong> Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用 Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值。这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改(不过就像我们之前说过的，这个对象引用的其他对象是不受影响的)。</li></ul><p><strong>注意:</strong> 你可以“深度冻结”一个对象(连引用的对象也冻结)，具体方法为，首先在这个对象上调用 Object.freeze(..)， 然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..)。但是一定要谨慎!因为你引用的对象可能会在其他地发也被引用.</p><p><strong>说明:</strong> 在 JavaScript 程序中很少需要深不可变性。有些特殊情况可能需要这样做， 但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</p><h4 id="3-3-7-Get"><a href="#3-3-7-Get" class="headerlink" title="3.3.7 [[Get]]"></a>3.3.7 <strong>[[Get]]</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123; </span><br><span class="line">   a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>myObject.a是怎么取到值2的?</strong><br>myObject.a 通过对象默认内置的[[Get]] 操作(有点像函数调用:<a href="">[Get]</a>).首先它会在对象中查找是否有名称相同的属性， 如果找到就会返回这个属性的值。如果没有找到名称相同的属性，按照 [[Get]] 算法的定义会执行另外一种非常重要的行为。其实就是遍历可能存在的 [[Prototype]] 链，也就是在原型链上寻找该属性。如果仍然都没有找到名称相同的属性，那 [[Get]] 操作会返回值 undefined.</p><p><strong>注意:</strong> 如果你引用了一个当前词法作用域中不存在的变量，并不会像对象属性一样返回 undefined，而是会抛出一个 ReferenceError 异常.</p><h4 id="3-3-8-Put"><a href="#3-3-8-Put" class="headerlink" title="3.3.8 [[Put]]"></a>3.3.8 <strong>[[Put]]</strong></h4><p>既然有可以获取属性值的 [[Get]] 操作，就一定有对应的 [[Put]] 来设置或者创建属性.        </p><p> [[Put]] 被触发时的操作分为两个情况:1. 对象中已经存在这个属性 2. 对象中不存在这个属性.</p><p>如果对象中已经存在这个属性,[[Put]] 算法大致会检查下面这些内容:</p><ul><li><ol><li>属性是否是访问描述符(参见下一节)?如果是并且存在setter就调用setter。</li></ol></li><li><ol start="2"><li>属性的数据描述符中writable是否是false?如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。</li></ol></li><li><ol start="3"><li>如果都不是，将该值设置为属性的值。</li></ol></li></ul><p>如果对象中不存在这个属性，[[Put]] 操作会更加复杂。会在第 5 章讨论 [[Prototype]] 时详细进行介绍。</p><h4 id="3-3-9-Getter和Setter"><a href="#3-3-9-Getter和Setter" class="headerlink" title="3.3.9 Getter和Setter"></a>3.3.9 <strong>Getter和Setter</strong></h4><p>对象默认的 [[Put]] 和 [[Get]] 操作分别可以控制属性值的设置和获取。<br>目前我们还无法操作[[Get]] 和 [[Put]]来改写整个对象 ,但是在ES5中可以使用 getter 和 setter 改写<strong>部分</strong>默认操作,<strong>只能应用在单个属性上，无法应用在整个对象上</strong>。    </p><p><strong>注意:</strong> 书中后面说的<code>访问描述符</code>就是<code>存取描述符</code>.关于属性描述符,存取描述符及数据描述符可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN的解释</a>)</p><p><strong>getter:</strong><br>getter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Get]]操作.<strong>当你设置getter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.</strong></p><p><strong>语法:</strong> <code>{get prop() { ... } }</code>或<code>{get [expression]() { ... } }</code>.其中<code>prop</code>:要设置的属性名. <code>expression</code>:从 ECMAScript 2015 开始可以使用计算属性名.<br><strong>使用方式:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a: <span class="number">1111</span>, <span class="comment">//在后面会发现myObject.a为2,这是因为设置了getter所以忽略了value特性.</span></span><br><span class="line">  <span class="comment">//方式一:在新对象初始化时定义一个getter</span></span><br><span class="line">  get a() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty( </span><br><span class="line">  myObject, <span class="comment">// 目标对象 </span></span><br><span class="line">  <span class="string">"b"</span>, <span class="comment">// 属性名</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 方式二:使用defineProperty在现有对象上定义 getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="number">2</span> &#125;,</span><br><span class="line">    <span class="comment">// 确保 b 会出现在对象的属性列表中</span></span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">myObject.a = <span class="number">3</span>;  <span class="comment">//因为设置了getter所以忽略了writable特性.所以这里赋值没成功</span></span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.b; <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> myObject.a;<span class="comment">//可以使用delete操作符删除</span></span><br></pre></td></tr></table></figure></p><p><strong>setter:</strong><br>setter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Put]]操作(也就是赋值操作).<strong>当你设置setter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.</strong>        </p><p><strong>语法:</strong> <code>{set prop(val) { . . . }}</code>或<code>{set [expression](val) { . . . }}</code>.其中<code>prop</code>:要设置的属性名. <code>val</code>:用于保存尝试分配给prop的值的变量的一个别名。<code>expression</code>:从 ECMAScript 2015 开始可以使用计算属性名.<br><strong>使用方式:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="comment">//注意:通常来说 getter 和 setter 是成对出现的(只定义一个的话 通常会产生意料之外的行为):</span></span><br><span class="line">  <span class="comment">//方式一:在新对象初始化时定义一个setter</span></span><br><span class="line">  set a(val) &#123;</span><br><span class="line">    <span class="keyword">this</span>._a_ = val * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  get a() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._a_ </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty( </span><br><span class="line">  myObject, <span class="comment">// 目标对象 </span></span><br><span class="line">  <span class="string">"b"</span>, <span class="comment">// 属性名</span></span><br><span class="line">  &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123; <span class="keyword">this</span>._b_ = val * <span class="number">3</span> &#125;,</span><br><span class="line">    <span class="comment">// 方式二:使用defineProperty在现有对象上定义 setter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._b_ &#125;,</span><br><span class="line">    <span class="comment">// 确保 b 会出现在对象的属性列表中</span></span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">myObject.a = <span class="number">2</span>;  </span><br><span class="line">myObject.b = <span class="number">3</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(myObject.a); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(myObject.b);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject._a_);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(myObject._b_);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> myObject.a;<span class="comment">//可以使用delete操作符删除</span></span><br></pre></td></tr></table></figure></p><h4 id="3-3-10-存在性"><a href="#3-3-10-存在性" class="headerlink" title="3.3.10 存在性"></a>3.3.10 <strong>存在性</strong></h4><p><strong>属性存在性:</strong><br>如何判断一个对象是否存在某个属性(准确来说是<strong>检查这个属性名是否存在</strong>),这时就需要用到:</p><ul><li><ol><li><code>in</code>操作符<br>in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中(参见第 5 章)。</li></ol><ul><li><ol start="2"><li>hasOwnProperty(..)<br>hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。</li></ol></li></ul></li></ul><p><strong>注意:</strong></p><ul><li>1.如果有的对象可能没有连接到 Object.prototype( 通过Object. create(null) 来创建——参见第 5 章)。在这种情况下，形如myObejct.hasOwnProperty(..) 就会失败。这时可以使用一种更加强硬的方法来进行判断:Object.prototype.hasOwnProperty. call(myObject,”a”)，它借用基础的 hasOwnProperty(..) 方法并把它显式绑定(参见第2章)到 myObject 上。</li><li>2.对于数组来说,不要使用in操作符,因为它检查的是属性名,在数组中属性名就是索引,它并不是我们所关注的重点.对于数组我们更关注的是它所存的值,所以对于数组检查某个值是否存在还是采用indexOf方法.</li></ul><p><strong>属性可枚举性:</strong><br>如果一个属性存在,且它的enumerable 属性描述符为true时.则它是可枚举的.并且可以被for..in 循环.<br>一个属性不仅仅需要存在,还需要它的enumerable 为true才是可枚举的,才能被for…in遍历到.<br><strong>注意:</strong> for…in不适合对数组进行遍历,对数组的遍历还是使用传统的for循环.     </p><p>对属性的可枚举性判断,则需要用到以下几种方法:</p><ul><li><ol><li>propertyIsEnumerable(..) 会检查给定的属性名是否直接存在于对象中(而不是在原型链上)并且满足 enumerable:true。</li></ol></li><li><ol start="2"><li>Object.keys(..) 会返回一个数组，包含所有可枚举属性.</li></ol></li><li><ol start="3"><li>Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</li></ol></li></ul><h3 id="3-4-遍历"><a href="#3-4-遍历" class="headerlink" title="3.4 遍历"></a>3.4 遍历</h3><p>关于这节我觉得还是以理清for..in和for..of为主.后面延伸的@@iterator及Symbol.iterator的使用,没必要过于深究.注意书中123页第二行<code>done 是一个布尔值，表示是否还有可以遍历的值。</code>有个错误,应该改成<code>done 是一个布尔值，表示遍历是否结束。</code>否则你在看后面它的说明时会感觉到自相矛盾.这里我也是以for..in和for..of为主进行说明,也更贴近我们实际使用.</p><p><strong>for..in</strong></p><ul><li>for..in 循环可以用来遍历对象的可枚举属性列表(<strong>包括 [[Prototype]] 链</strong>)。</li><li>实际上for..in遍历的并不是属性值,而是属性名(即键名 key).所以你想获取属性值还是需要手动使用obj[key]来获取.</li><li>一般在遍历对象时,推荐使用for..in.当然数组也是可以使用for..in的.在遍历数组时,推荐还是使用for..of.</li></ul><p><strong>for..of</strong></p><ul><li>ES6 增加了一种用来遍历<strong>数组</strong>的 for..of 循环语法(如果对象本身定义了迭代器的话也可以遍历对象)</li><li>for..of与for..in最大的不同点是,<strong>它循环的是属性值,而不是属性名.不过它只循环数组里存放的值,不会涉及到对象里的key.</strong>(关于这个我后面的例子里会说具体对比明的)</li><li>for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next() 方法来遍历所有返回值。数组有内置的 @@iterator，(对象没有,所以不能使用for..of,除非我们自己定义一个)因此 for..of 可以直接应用在数组上。</li></ul><p><strong>例子比较</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'shotCat'</span>,<span class="number">111</span>,&#123;<span class="attr">a</span>:<span class="string">'1'</span>,<span class="attr">b</span>:<span class="string">'2'</span>&#125;]</span><br><span class="line">arr.say=<span class="string">"IG niu pi!"</span></span><br><span class="line"><span class="comment">//使用for..in循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[index]);<span class="comment">//shotCat  111  &#123;a:'1',b:'2'&#125;  IG niu pi!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用for..of循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);<span class="comment">//shotCat  111  &#123;a:'1',b:'2'&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意 for..of并没有遍历得到` IG niu pi!`.原因我前面说过`它只循环数组里存放的值,不会涉及到对象里的key.`更不用说 [[Prototype]] 链.(for..in则会)</span></span><br></pre></td></tr></table></figure></p><p><strong>如何让对象也能使用for..of ?</strong><br>你可以选择使用书中的自己通过Object.defineProperty()定义一个Symbol.iterator属性来实现.这里我就不赘述了.也是最接近原生使用感受的.不过我这里要介绍一个稍微简单点的方法来实现.就是使用上节讲到的Object.keys()搭配使用.举个例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shotCat=&#123;</span><br><span class="line">    name:<span class="string">'shotCat'</span>,</span><br><span class="line">    age:<span class="string">'forever18'</span>,</span><br><span class="line">    info:&#123;</span><br><span class="line">sex:<span class="string">'true man'</span>,</span><br><span class="line">    city:<span class="string">'wuhan'</span>,</span><br><span class="line">    girlFriend:<span class="string">'新垣结衣!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(shotCat))&#123;</span><br><span class="line">    <span class="comment">//使用Object.keys()方法获取对象key的数组</span></span><br><span class="line">    <span class="built_in">console</span>.log(key+<span class="string">": "</span>+shotCat[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-5-小结-1"><a href="#3-5-小结-1" class="headerlink" title="3.5 小结"></a>3.5 小结</h3><p>书中小结总结得挺全的,这里我就搬运下</p><ul><li>JavaScript 中的对象有<strong>字面形式</strong>(比如 var a = { .. })和<strong>构造形式</strong>(比如 var a = new Array(..))。字面形式更常用，不过有时候构造形式可以提供更多选项。</li><li>对象是 6 个(或者是 7 个，取决于你的观点)基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。</li><li>对象就是键 / 值对的集合。可以通过 .propName 或者 [“propName”] 语法来获取属性值。访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作(在设置属性值时是 [[Put]])， [[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话它还会查找 [[Prototype]] 链(参见第 5 章)。</li><li>属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用 Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象(及其属性)的不可变性级别。</li><li>属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。</li><li>可以使用 ES6 的 for..of 语法来遍历数据结构(数组、对象，等等)中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。</li></ul><h2 id="第四章-混合对象”类”"><a href="#第四章-混合对象”类”" class="headerlink" title="第四章 混合对象”类”"></a>第四章 混合对象”类”</h2><p><strong>注意:</strong> 正如书中提示的那样,整章一半以上几乎都是讲面向对象和类的概念.会读得人云里雾里,给人<code>哦,也许大概就是这样子</code>的感觉.后面我还是会对那些抽象的概念找到在JavaScript里对应的”立足点”,不至于对这些概念太”飘”.</p><h3 id="4-1-类理论"><a href="#4-1-类理论" class="headerlink" title="4.1 类理论"></a>4.1 类理论</h3><p>说明:</p><ul><li>类其是描述了一种代码的组织结构形式.</li><li>在js中类常见的就是构造函数,也可以是通过ES6提供的class关键字;继承就是函数;实例化就是对象,常见的就是通过new构造函数实现的.</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b48db6fb628b?w=1178&amp;h=695&amp;f=png&amp;s=60553" alt="类、继承和实例化"></p><p><strong>注意:</strong> Javascript语言不支持“类”，所谓的”类”也是模拟出的“类”。即使是ES6引入的”类”实质上也是 JavaScript 现有的基于原型的继承的语法糖。</p><h4 id="4-1-1-“类”设计模式"><a href="#4-1-1-“类”设计模式" class="headerlink" title="4.1.1 “类”设计模式"></a>4.1.1 <strong>“类”设计模式</strong></h4><p><strong>一句话</strong>:类其实也是一种设计模式!</p><ul><li>类并不是必须的编程基础,而是一种可选的代码抽象.</li><li>有些语言(比如 Java)并不会给你选择的机会，类并不是可选的——万物皆是类。</li><li>其他语言(比如 C/C++ 或者 PHP)会提供过程化和面向类这两种语法，开发者可以选择其中一种风格或者混用两种风格。</li></ul><h4 id="4-1-2-JavaScript中的“类”"><a href="#4-1-2-JavaScript中的“类”" class="headerlink" title="4.1.2 JavaScript中的“类”"></a>4.1.2 <strong>JavaScript中的“类”</strong></h4><p>JavaScript 只有一些近似类的语法元素 (比如 new 和 instanceof)，不过在后来的 ES6 中新增了一些元素，比如 class 关键字,其实质上也是 JavaScript 现有的基于原型的继承的语法糖。也不是真正的类.</p><h3 id="4-2-类的机制"><a href="#4-2-类的机制" class="headerlink" title="4.2 类的机制"></a>4.2 <strong>类的机制</strong></h3><p>这部分书中的描述,我理解起来也比较费劲,主要是它提到的栈,堆与我理解中内存里的栈,堆相冲突了.这里简单说下我的理解,如有误,感激指正.</p><p>stack类其实是一种数据结构.它可以储存数据,并提供一些公用的方法(这和上面提到的类很相似).但是stack类其实只是一个抽象的表示,你想对它进行操作,就需要先对它进行实例化.</p><h4 id="4-2-1-建造"><a href="#4-2-1-建造" class="headerlink" title="4.2.1 建造"></a>4.2.1 <strong>建造</strong></h4><p>这节主要就是说明”类”和”实例”的关系.<br>在JavaScript里”类”主要是构造函数,”实例”就是对象.    </p><p>一个类就像一张蓝图。为了获得真正可以交互的对象，我们必须按照类来实例化一个东西，这个东西(对象)通常被称为实例，有需要的话，我们可以直接在实例上调用方法并访问其所有公有数据属性。</p><p>总而言之:类通过实例化得到实例对象.</p><h4 id="4-2-2-构造函数"><a href="#4-2-2-构造函数" class="headerlink" title="4.2.2 构造函数"></a>4.2.2 <strong>构造函数</strong></h4><ul><li>类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。</li><li>实例就是由构造函数实例化的: new 构造函数.</li><li>构造函数大多需要用 new 来调，这样语言引擎才知道你想要构造一个新的类实例。</li><li>构造函数会返回一个对象,这个对象就是实例.这个对象可以调用类的方法.</li></ul><h3 id="4-3-类的继承"><a href="#4-3-类的继承" class="headerlink" title="4.3 类的继承"></a>4.3 类的继承</h3><p>在面向类的语言中，你可以先定义一个类，然后定义一个继承前者的类。后者通常被称为“子类”，前者通常被称为“父类”。子类可以继承父类的行为,并且可以根据自己的需求,修改继承的行为(一般并不会修改父类的行为).注意:我们讨论的父类和子类并不是实例,在JavaScript里类一般都是构造函数。</p><h4 id="4-3-1-多态"><a href="#4-3-1-多态" class="headerlink" title="4.3.1 多态"></a>4.3.1 <strong>多态</strong></h4><p>大概你看了它的”解释”,对多态还是懵懵懂懂.这里我再解释下:<br><strong>什么是多态?</strong><br>同一个操作，作用于不同的对象，会产生不同的结果。发出一个相同的指令后，不同的对象会对这个指令有不同的反应，故称为多态。<br><strong>说明:</strong> 书中例子中的inherited其实就是相当于super.并且注意书中的这些例子都是<strong>伪代码!</strong> 并不是真的在JavaScript里就是这样实现的.补充:这里是关于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="noopener">super的mdn链接.</a></p><ul><li><strong>多态:</strong><ul><li><strong>相对性:</strong> 其实相对性就是子类相对于父类的引用(例如使用super实现引用),并且子类对父类的引用并不会对父类的行为造成任何影响(并不会对父类<strong>自身</strong>的行为进行重新定义),例如书中例子子类对drive()的引用.</li><li><strong>可重复定义:</strong> 子类继承父类的某个方法,并可以对这个方法进行再次定义,例如书中子类对drive()中的output进行修改.<code>当调用方法时会自动选择合适的定义</code>,这句话怎么理解,当子类实例化后,执行drive()方法时,它并不会直接去执行父类的drive().而是子类上的drive().简单来说就是实例来源于那个类,它就使用那个类的方法.</li></ul></li></ul><p><strong>说明:</strong> </p><ul><li>在 JavaScript 中“类”是属于构造函数的(类似 Foo.prototype… 这样的类型引用)。由于 JavaScript中<strong>父类和子类的关系只存在于两者构造函数对应的 .prototype 对象中</strong>，因此它们的构造函数之间并不存在直接联系，从而无法简单地实现两者的相对引用(在 ES6 的类中可以通过 super来“解决”这个问题，参见附录 A)。</li><li><strong>多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是复制。</strong></li><li>其实这里讨论的这些概念其实在我们实际工作中,已经使用了无数次,只是现在你需要理解”原来你是叫这个名字啊!”</li></ul><h4 id="4-3-2-多重继承"><a href="#4-3-2-多重继承" class="headerlink" title="4.3.2 多重继承"></a>4.3.2 <strong>多重继承</strong></h4><p><strong>多重继承:</strong> 一个子类可以继承来自多个父类的方法.<br><strong>多重继承引发的问题:</strong> 多重继承可能会出现,多个父类中方法名冲突的问题,这样<code>子类</code>到底引用哪个方法?<br><strong>多重继承与JavaScript:</strong> JavaScript本身并没有提供多重继承功能.但它可以通过其他方法来达到多重继承的效果.</p><h3 id="4-4-混入"><a href="#4-4-混入" class="headerlink" title="4.4 混入"></a>4.4 <strong>混入</strong></h3><p>JavaScript 中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来(参见第 5 章)(其实就是引用,所以它的多态是”相对”的)。<br>由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入(<strong>就是通过混入来模拟实现类的多重继承</strong>)。</p><h4 id="4-4-1-显式混入"><a href="#4-4-1-显式混入" class="headerlink" title="4.4.1 显式混入"></a>4.4.1 <strong>显式混入</strong></h4><p><strong>郑重提醒:</strong>     书中这里的类都是对象形式的.例子里的sourceObj, targetObj,这就可能造成一个”误导”,在JavaScript里是<strong>没有真正的类</strong>,所谓的类也不过是我们模拟出来的”类”,不过是一种语法糖(包括ES6里的class).在JavaScript里”所谓的类”经常是一个构造函数,你并不能这样进行遍历,只能对它的实例对象进行这种操作.不要被书中例子带进去了,不要混淆,毕竟我们最终使用的是JavaScript(而不是其他面向对象的语言.),它里面的类常常并不是一个对象!</p><p><strong>显式混入:</strong>  书中没有给出明确的显式混入的定义,但是读完整章.基本就知道什么是显式混入了.显式混入就是通过类似mixin()方法,显式地将父对象属性逐一复制,或者有选择地复制(即例子中的存在性检查)到子对象上.          </p><p><strong>显式混入常用方法:</strong> 就是书中的例子, 首先有子对象,并对其进行特殊化(定义自己的属性或方法).然后再通过mixin()方法将父对象有选择地复制(即存在性检查,过滤子对象已有的属性,避免冲突)到子对象上.</p><p><strong>显式混入注意点:</strong><br>显式混入时,切记一点你要<strong>避免父对象的属性与子对象特殊化的属性冲突</strong>.这就是为什么例子中要进行存在性检查,以及后面要说的混合复制,可能存在的重写风险.</p><p><strong>1. 再说多态</strong>(其实说的就是js里的多态)<br><strong>显式多态:</strong> 将父对象里的方法通过显式绑定到子对象上.就是显式多态.例如书中的例子:Vehicle.drive.call( this )。<strong>显式多态也是为了JS来模拟实现多重继承的!</strong><br><strong>说明:</strong> 在ES6之前是没有相对多态的机制。所以就使用call这种进行显式绑定实现显式动态.注意JavaScript里实现多态的方法也被称为”伪多态”.所以不要对后面突然冒出的伪多态概念而一脸懵逼(其实整本书经常做这样的事)     </p><p><strong>显式多态(伪多态)的缺陷:</strong> 因为在JavaScript 中存在屏蔽(实际是函数引用的上下文不同),所以在引用的时候就需要使用显式伪多态的方法创建一个函数关联.   这些都会增加代码的复杂度和维护难度(过多的this绑定,真的会让代码很难读)。</p><p><strong>2. 混合复制</strong>(显式混入另一种不常用方法)<br>前面的显式混入的方法是先有子对象并进行特殊化,然后再有选择地复制父对象属性.这个不常用的方法则是反过来的,结合书中例子,它先用一个空对象<strong>完全复制</strong>父对象的属性,然后该对象复制特殊化对象的属性,最后得到子对象.这种方法明显是比第一种麻烦的,并且在复制特殊化对象时,可能会对之前重名的属性(即复制得到的父对象属性)进行重写覆盖.所以这种方法是存在风险,且效率低下的.</p><p><strong>显式混入的缺陷:</strong></p><ul><li><ol><li><strong>无法做到真正的复制:</strong> 如果复制的对象中存在对函数的引用,那么子对象得到的是和父对象一样的,对同一个函数的引用.如果某个子对象对函数进行了修改,那么父对象及其他子对象都会受到影响.很明显这是不安全的.原因是JavaScript 中的函数无法进行真正地复制，你只能复制对共享函数对象的引用.</li></ol></li><li><ol start="2"><li><strong>函数名和属性名同名:</strong> 如果混入多个对象,则可能会出现这种情况.目前现在仍没有比较好的方式来处理函数和属性的同名问题(提问:这种情况下谁的优先级更高?滑稽脸)。</li></ol></li></ul><p><strong>3. 寄生继承</strong><br>显式混入模式的一种变体被称为“寄生继承”，它既是显式的又是隐式的.<br>首先会复制一份父类(对象)的定义，然后混入子类(对象)的定义(如果需要的话保留到父类的特殊引用)，然后用这个复合对象构建实例。<br><strong>说明:</strong> 寄生继承与混合复制是很相似的,最大的区别是寄生继承是通过实例化构造函数(JS中的”类”)来实现复制的.</p><h4 id="4-4-2-隐式混入"><a href="#4-4-2-隐式混入" class="headerlink" title="4.4.2 隐式混入"></a>4.4.2 <strong>隐式混入</strong></h4><p><strong>隐式混入:</strong> 它与显示混入最大的区别,就是它没有明显的对父类(对象)属性进行复制的过程.它是通过在构造函数调用或者方法调用中使用显式绑定例如: Something.cool.call( this)来实现混入(多重继承).其本质就是通过改变this指向来实现混入.</p><h3 id="4-5-小结"><a href="#4-5-小结" class="headerlink" title="4.5 小结"></a>4.5 <strong>小结</strong></h3><p>整章的重点其实就是让你理解什么叫类.除了最后一小节的混入和JavaScript有那么一点点关系.其余的小结和JavaScript都没什么关系.重要的是理解类这种思想和设计模式.<br><strong>重点:</strong></p><ul><li>1.<strong>类意味着复制!</strong></li><li><ol start="2"><li>传统的类被实例化时，它的行为会被复制到实例中。类被继承时，行为也会被复制到子类中。</li></ol></li><li><ol start="3"><li>多态(在继承链的不同层次名称相同但是功能不同的函数)看起来似乎是从子类引用父类，但是本质上引用的其实是复制的结果。</li></ol></li><li><ol start="4"><li>JavaScript 并不会(像类那样)自动创建对象的副本。(你只能自己手动复制,而且复制的还不彻底!)</li></ol></li><li><ol start="5"><li><strong>混入模式(无论显式还是隐式)可以用来模拟类的复制行为</strong>，但是通常会产生丑陋并且脆弱的语法，比如显式伪多态(OtherObj.methodName.call(this, …))，这会让代码更加难 懂并且难以维护。</li></ol></li><li><ol start="6"><li>显式混入实际上无法完全模拟类的复制行为，因为对象(和函数!别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。忽视这一点会导致许多问题。</li></ol></li><li><ol start="7"><li>在 JavaScript 中模拟类是得不偿失的，虽然能解决当前的问题，但是可能会埋下更多的隐患。(但实际,我们用得却很多)</li></ol></li></ul><h2 id="第五章-原型"><a href="#第五章-原型" class="headerlink" title="第五章 原型"></a>第五章 原型</h2><p>注意:本章的前提是你已经比较熟悉原型及原型链.不太熟或者不知道的可以,通过<a href="https://juejin.im/post/5835853f570c35005e413b19" target="_blank" rel="noopener">这篇文章</a>熟悉下.  </p><h3 id="5-1-Prototype"><a href="#5-1-Prototype" class="headerlink" title="5.1 [[Prototype]]"></a>5.1 <code>[[Prototype]]</code></h3><p>JavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引用(一般就是其构造函数prototype属性的引用)。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。<br><strong>吐槽:</strong> 书中有这样一句话 “注意:很快我们就可以看到，对象的 [[Prototype]] 链接可以为空，虽然很少见。”我前前后后看了三遍都没找到它所说的<code>对象的 [[Prototype]] 链接可以为空.</code>的情况!应该是作者写忘记了.ok,这里我来说下<code>对象的 [[Prototype]] 链接可以为空</code>的情况.就是通过Object.create(null)得到的对象.它的 [[Prototype]] 是为空的.应该说它的所有都是空的.为什么?因为null是原型链的顶端.它是没有[[Prototype]]的.对应的可以对比下<code>console.log(Object.create({}))</code>和<code>console.log(Object.create(null))</code></p><p><strong>[[Prototype]]有什么用?</strong><br>我原以为作者会说可以作为存放实例对象的公共属性,然后像类一样讲得更深刻点.不过这次只是说了它表明的作用.     </p><p><strong>作用:</strong> 就是存放哪些不在对象自身的属性. 当我们访问一个对象的属性时,此时对象的内部默认操作[[Get]],首先会检查对象本身是否有这个属性，如果有的话就使用它。如果没有的话,[[Get]] 就会继续访问对象的 [[Prototype]] 链.([[Prototype]]其实就是其构造函数的prototype属性.也是一个对象.)如果找到,就返回该属性值.如果没有就继续寻找下一个[[Prototype]]链.直到找完整条[[Prototype]]链.还是没有的话,[[Get]] 就会返回undefined.</p><p><strong>补充:</strong></p><ul><li><strong>使用 for..in 遍历对象时</strong> 任何可以通过原型链访问到 (并且是 enumerable:true)的属性都会被枚举。(其实这个在第三章里我说过)</li><li><strong>使用 in 操作符</strong> 同样会查找对象的整条原型链(<strong>无论属性是否可枚举</strong>)</li></ul><h4 id="5-1-1-Object-prototype"><a href="#5-1-1-Object-prototype" class="headerlink" title="5.1.1 Object.prototype"></a>5.1.1 <strong>Object.prototype</strong></h4><p>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。(Object.prototype的[[Prototype]] 最终会指向null.null就是最后的终点).<br>这个 Object.prototype 对象，包含了 JavaScript 中许多通用的功能,例如:toString() , valueOf(), hasOwnProperty(..)和 isPrototypeOf(..)。</p><h4 id="5-1-2-属性设置和屏蔽"><a href="#5-1-2-属性设置和屏蔽" class="headerlink" title="5.1.2 属性设置和屏蔽"></a>5.1.2 <strong>属性设置和屏蔽</strong></h4><p><strong>说明:</strong> 看完本节时,切记不要对<code>myObject.foo = &quot;bar&quot;</code>这种简单的对象属性赋值产生顾虑和疑惑.这种赋值绝对不会对原型链产生任何影响!基本也不会出现赋值不成功的情况.<strong>如果有人敢在团队项目里修改对象的属性描述符,早就被拖出去打死了!!!</strong> 这部分可以看做补充知识,知道有这些奇葩设定就行.其实<strong>这节更应该关注的是<code>myObject.foo</code>的返回值.</strong><br><strong>注意:</strong> 书中提到的动词<code>屏蔽</code>其实指的就是在对象上创建同名属性(原型链上已有该属性).注意不要被绕晕了.还有++就相当于myObject.a=myObject.a+1,注意分解就行,不存在什么特别需要当心的.</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b5220c3a82ce?w=1375&amp;h=962&amp;f=png&amp;s=207062" alt=""></p><h3 id="5-2-“类”"><a href="#5-2-“类”" class="headerlink" title="5.2 “类”"></a>5.2 “类”</h3><ul><li>JavaScript里只有对象,没有类!</li><li>JavaScript不需要通过类来抽象对象.而是自己直接创建对象,并定义对象的行为.</li></ul><h4 id="5-2-1-“类”函数"><a href="#5-2-1-“类”函数" class="headerlink" title="5.2.1 “类”函数"></a>5.2.1 <strong>“类”函数</strong></h4><p>吐槽:模仿类竟然被说成奇怪的无耻滥用!?不这样做,js那些高级用法怎么实现?怎么会有现在前端的百花齐放(轮子满地跑)?这也是冒得办法的办法啊!毕竟当时js只是小众,不指望它有多大能耐.毕竟只是一个人用7天”借鉴”出来的东西.</p><p><strong>“类”函数:</strong> JavaScript用来模仿类的函数就被称为类函数,其实就是我们常说的构造函数.        </p><p><strong>“类”函数模拟类的关键:</strong> 所有的函数默认都会拥有一个名为 prototype 的公有并且不可枚举(参见第 3 章)的属性，它会指向另一个对象.当我们通过new 函数(构造函数)来得到实例对象时,此时new会给实例对象一个内部的 [[Prototype]]属性，实例对象内部的[[Prototype]]属性与构造函数的prototype属性都指向同一个对象.那JS的这个特性怎么模拟类呢?首先<strong>类的本质就是复制!</strong>.明白这点后,我们就需要实现伪复制.我们可以将类里的属性,放在函数的prototype属性里.这样该函数的实例对象就可以通过<a href="原型链">[Prototype]</a>访问这些属性.我们也经常把这种行为称为原型继承(作者后面会疯狂吐槽这个称呼,我后面再解释为什么吐槽).这样就实现了伪”复制”. 可以达到和类相似的效果.</p><p><strong>注意:</strong> 虽然说所有的函数默认都会拥有一个名为 prototype属性.但也有特殊的时候.就不是默认的情况.就是通过bind()硬绑定时.所返回的<strong>绑定函数,它是没有prototype属性的!</strong></p><p><strong>图解真正的类与JS的模拟类:</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b57bbca1ee25?w=523&amp;h=523&amp;f=png&amp;s=68402" alt=""></p><p><strong>关于原型继承这个名字的疯狂吐槽:</strong>      作者的吐槽主要集中在”继承”两个字,原因是在面向类的语言中,”继承”意味着复制,但在JavaScript里原型继承却根本不是这个意思,它并没有复制,而是用原型链来实现.所以疯狂吐槽其误导.</p><p><strong>什么是差异继承?</strong> 我根本没听过这个术语,初次看作者所谓的解释,这是啥?他想说啥?后来读了好多遍,终于大概理解了.如果你也看不懂作者想在表达什么,就pass这部分.没必要理解.反而会把你看得更迷惑.<br>好了,我来解释下什么叫差异继承.差异继承就是原型继承的一个不常用的别名.我们知道对象可以通过原型链继承一部分属性,但我们仍可以给对象设置其他有差异不同的属性.这也就可以称为差异继承.</p><h4 id="5-2-2-“构造函数”"><a href="#5-2-2-“构造函数”" class="headerlink" title="5.2.2 “构造函数”"></a>5.2.2 <strong>“构造函数”</strong></h4><p>构造函数之所以是构造函数,是因为它<strong>被new调用</strong>,如果没被new调用,它就是一个普通函数.实际上,new会劫持所有普通函数并用构造对象的形式来调用它,并且无论如何都会构造返回一个对象.</p><h4 id="5-2-3-技术"><a href="#5-2-3-技术" class="headerlink" title="5.2.3 技术"></a>5.2.3 <strong>技术</strong></h4><p>关于两种“面向类”的技巧,我这就不说明了,理解了这部分第一第二章关于this的使用,就很简单了.</p><p><strong>prototype.constructor:</strong><br>为了正确理解constructor.我特意在标题上加上prototype.是想强调:一个对象访问constructor时,会默认访问其原型对象上的constructor属性.</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b5a12dfc7024?w=573&amp;h=463&amp;f=png&amp;s=87705" alt=""></p><p><strong>注意:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* .. */</span> &#125;</span><br><span class="line">Foo.prototype = &#123; <span class="comment">/* .. */</span> &#125;; <span class="comment">// 有时候我们会需要创建一个新原型对象,因此也不会有默认的constructor属性指向构造函数</span></span><br><span class="line"><span class="comment">// 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性</span></span><br><span class="line"><span class="comment">// 关于 defineProperty(..)，参见第 3 章 </span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty( Foo.prototype, <span class="string">"constructor"</span> , &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,<span class="comment">//不可枚举</span></span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  value: Foo <span class="comment">// 让 .constructor 指向 Foo</span></span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">//上面这种方法是比较严谨,也比较麻烦的.并且使用Object.defineProperty()风险是很大的.</span></span><br><span class="line"><span class="comment">//所以我们实际是这样修改的</span></span><br><span class="line">Foo.prototype.constructor=Foo; <span class="comment">//直接将其赋值Foo 唯一要注意的是此时constructor是可枚举的.会被实例对象的for..in..遍历到.</span></span><br></pre></td></tr></table></figure></p><h3 id="5-3-原型-继承"><a href="#5-3-原型-继承" class="headerlink" title="5.3 (原型)继承"></a>5.3 (原型)继承</h3><p><strong>原型对象到原型对象的继承:</strong><br>例如:Bar.prototype 到 Foo.prototype 的委托关系，<br>正确的JavaScript中“原型风格”:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.myName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">name,label</span>) </span>&#123; </span><br><span class="line">  Foo.call( <span class="keyword">this</span>, name ); </span><br><span class="line">  <span class="keyword">this</span>.label = label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们创建了一个新的 Bar.prototype 对象,并且它的[[Prototype]] 关联Foo.prototype </span></span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create( Foo.prototype );</span><br><span class="line"><span class="comment">// 注意!Object.create()是返回一个新的对象,所以现在没有 Bar.prototype.constructor 了 </span></span><br><span class="line"><span class="comment">// 如果你需要这个属性的话可能需要手动修复一下它</span></span><br><span class="line">Bar.prototype.myLabel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.label;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Bar( <span class="string">"a"</span>, <span class="string">"obj a"</span> );</span><br><span class="line"></span><br><span class="line">a.myName(); <span class="comment">// "a"</span></span><br><span class="line">a.myLabel(); <span class="comment">// "obj a"</span></span><br></pre></td></tr></table></figure></p><p>错误用法:</p><ul><li>1, <code>Bar.prototype = Foo.prototype;</code> 此时并不会创建一个关联到 Bar.prototype 的新对象，它只是让 Bar.prototype 直接引用 Foo.prototype 对象。 因此当你执行类似 Bar.prototype. myLabel = … 的赋值语句时会直接修改 Foo.prototype 对象本身。</li><li>2, <code>Bar.prototype = new Foo();</code> 它使用 了 Foo(..) 的“构造函数调用”，如果函数 Foo 有一些其他操作的话,尤其是与this有关的的话，就会影响到 Bar() 的“后代”，后果不堪设想。</li></ul><p><strong>结论:</strong> 要创建一个合适的关联对象，我们<strong>需使用 Object.create(..)</strong> 而不是使用具有副作用的 Foo(..)。这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉(主要是需要手动设置constructor)，不能直接修改已有的默认对象。</p><p><strong>检查”类”关系</strong>        </p><ul><li><strong>instanceof 操作符</strong>: 验证左边的普通对象的整条[[prototype]]链是否有指向右边函数的prototype,例如:<code>a instanceof Foo</code>。</li><li><strong>isPrototypeOf(..)  方法</strong>: 验证在对象 a 的整条 [[Prototype]] 链中是否出现过 原型对象b.例如:<code>b.isPrototypeOf( a );</code></li></ul><p><strong>注意:</strong> 如果使用内置的 .bind(..) 函数来生成一个<strong>硬绑定函数</strong>(参见第 2 章)的话， 该函数<strong>是没有 .prototype 属性的</strong>。如果硬绑定函数instanceof 的话,则其bind的 目标函数的prototype会成为硬绑定函数的prototype.</p><p><strong>关于<strong>proto</strong></strong>:<br>我们知道函数可以直接通过prototype属性直接访问原型对象.那对象怎么访问呢?我们知道是通过[[prototype]]链.怎么访问呢?<br>在ES5之中的标准方法:通过Object.getPrototypeOf(  )方法来获取对象原型.<code>Object.getPrototypeOf( a ) === Foo.prototype; // true</code>,<br>另一种方法:在 ES6 之前并不是标准,但却被绝大多数浏览器支持的一种方法,可以访问内部[[prototype]]对象.那就是<code>__proto__</code>.例如:<code>a.__proto__ === Foo.prototype; // true</code>.你甚至可以通过<code>.__proto__.__ptoto__...</code>来访问整个原型链.  <code>.__proto__</code>实际上并不存在于你正在使用的对象中.并且它看起来很像一个属性，但是实际上它更像一个 getter/setter(见第三章).</p><h3 id="5-4-对象关联"><a href="#5-4-对象关联" class="headerlink" title="5.4 对象关联"></a>5.4 对象关联</h3><p>[[Prototype]] 机制就是存在于对象中的一个内部链接，<strong>它会引用其他对象。</strong></p><p>这个链接的作用是:如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找。同理，如果在后者中也没有找到需要的 引用就会继续查找它的 [[Prototype]]，以此类推。这一系列对象的链接被称为<strong>原型链</strong>。</p><h4 id="5-4-1-创建关联"><a href="#5-4-1-创建关联" class="headerlink" title="5.4.1 创建关联"></a>5.4.1 <strong>创建关联</strong></h4><p><strong>问:</strong>“我们已经明白了为什么 JavaScript 的 [[Prototype]] 机制和类不一样，也明白了它如何建立对象间的关联。”<br><strong>答:</strong> 类的机制是复制,JavaScript里原型链的机制是引用.    </p><p><strong>问:</strong>“那 [[Prototype]] 机制的意义是什么呢?为什么 JavaScript 开发者费这么大的力气(模拟类)在代码中创建这些关联呢?”<br><strong>答:</strong> 意义就是模拟类,JavaScript不需要复制(我觉得这不是个优点)而通过原型链实现”实例”对”类”的”继承(其实就是引用)”.这样就达到了实例对象对某些属性(即原型对象里的属性)的复用.</p><p><strong><code>Object.create(..)</code></strong><br>这个方法其实我们在前面已经使用过很多次.”Object.create(..) 会创建一个新对象(bar)并把它关联到我们指定的对象(foo)，这样我们就可以充分发挥 [[Prototype]] 机制的威力(委托)并且避免不必要的麻烦(比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。”实际上这个方法就是创建返回一个新对象,这个新对象的原型([[Prototype]])会绑定为我们输入的参数对象foo.并且由于不是通过构造函数的形式,所以不需要为函数单独设置prototype.虽然Object.create(..)很好,但实际我们使用的更多的还是构造函数形式.<br><strong>注意:</strong>  Object.create(..) 的第二个参数指定了需要添加到新对象中的属性名以及这些属性的属性描述符(参见第 3 章)。</p><p><strong><code>Object.create(null)</code></strong><br>这个方法其实我们在前面也讲解过几次.”Object.create(null) 会创建一个拥有空(或者说null)[[Prototype]] 链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符(之前解释过)无法进行判断，因此总是会返回 false。 <strong>这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。</strong>“</p><p>“Object.create()的polyfill代码.”这部分我就不做解读了,因为现在都8102年,es6早就普及了,你几乎不可能再用到es5之前的语法了.所以这部分大家了解下即可.</p><h4 id="5-4-2-关联关系是备用"><a href="#5-4-2-关联关系是备用" class="headerlink" title="5.4.2 关联关系是备用"></a>5.4.2 <strong>关联关系是备用</strong></h4><p><strong>[[Prototype]] 的本质作用:</strong>      书中提到了一个观点”处理“缺失”属性或者方法时的一种备用选项。”(即备用设计模式).但随后进行了否定”但是这在 JavaScript 中并不是很常见。所以如果你使用的是这种模式，那或许应当退后一步并重新思考一下这种模式是否合适。” 作者给出的观点是:”进行委托设计模式,即例子中的内部委托(就是在对象里套了个壳再引用了一遍,为的是将委托进行隐藏).这样可以使我们的API设计得更加清晰.”文中的清晰是指,当我们需要引用原型对象的属性方法时,我们在对象内部设置对应专门的属性(例子中的doCool),进行内部委托(其实就是套个壳进行隐藏).这样我们<strong>对象的属性就是”完整”的.</strong></p><p>在实际工作中,我们常常就是把原型对象作为存放对象的公共属性方法的地方.对于一般比较重要的操作才会在对象里进行内部委托(隐藏委托)!</p><h3 id="5-5-小结"><a href="#5-5-小结" class="headerlink" title="5.5 小结"></a>5.5 小结</h3><p>总结得很好很全面,这里我还是直接摘抄了,不是偷懒哦!</p><ul><li>如果要访问对象中并不存在的一个属性，<strong>[[Get]] 操作(参见第 3 章)就会查找对象内部[[Prototype]] 关联的对象。</strong> 这个关联关系实际上定义了一条“原型链”(有点像嵌套的作用域链)，在查找属性时会对它进行遍历。</li><li><strong>所有普通对象都有内置的 Object.prototype，</strong> 指向原型链的顶端(比如说全局作用域)，如 果在原型链中找不到指定的属性就会停止。toString()、valueOf() 和其他一些通用的功能 都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。</li><li>关联两个对象最常用的方法是使用 new 关键词进行函数调用，在调用的 4 个步骤(第 2 章)中会创建一个关联其他对象的新对象。</li><li>使用 new 调用函数时会把新对象的 .prototype 属性关联到“其他对象”(就是构造函数prototype所指的对象)。带 new 的函数调用 通常被称为“构造函数调用”，尽管它们实际上和传统面向类语言中的类构造函数不一样。</li><li>JavaScript 中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的。</li><li>“委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。(意思就是原先继承应该改为原先委托?)</li></ul><h2 id="第六章-行为委托"><a href="#第六章-行为委托" class="headerlink" title="第六章 行为委托"></a>第六章 行为委托</h2><p>第 5 章的结论:[[Prototype]] 机制就是指对象中的一个内部链接引用另一个对象。换句话说，JavaScript 中这个机制的本质就是对象之间的关联关系。在第六章又被称为委托.<br>PS:前面在讲原型的时候我就习惯用父对象指代原型对象(类似”父类”),用子对象指代其实例对象(类似”子类”).本章也将采用这种称呼,故下面不再说明.(其实我觉得用父对象和子对象称呼更形象)</p><h3 id="6-1-面向委托的设计"><a href="#6-1-面向委托的设计" class="headerlink" title="6.1 面向委托的设计"></a>6.1 面向委托的设计</h3><p>一句话:[[Prototype]]机制是面向委托的设计,是不同于面向类的设计. 下面将分别介绍类理论和委托理论.</p><h4 id="6-1-1-类理论"><a href="#6-1-1-类理论" class="headerlink" title="6.1.1 类理论"></a>6.1.1 <strong>类理论</strong></h4><p><strong>类理论设计方法:</strong> 首先定义一个通用父(基)类，在 父类类中定义所有任务都有(通用)的行为。接着定义子类 ，它们都继承自 父类并且会添加一些特殊的行为来处理对应的任务,并且在继承时子类可以使用方法重写(和多态)父类的行为.        </p><p>类理论中许多行为可以<strong>先“抽象”到父类然后再用子类进行特殊化(重写)。</strong><br>ps:这部分了解即可,着重理解下面JavaScript用到的委托.</p><h4 id="6-1-2-委托理论"><a href="#6-1-2-委托理论" class="headerlink" title="6.1.2 委托理论"></a>6.1.2 <strong>委托理论</strong></h4><p><strong>类理论设计方法:</strong> 首先你会定义一个”父”对象(相当于上节中的父类)，它会包含所有任务都可以使用(委托)的具体行为。接着，对于<strong>每个任务</strong>你都可以定义一个对象(“子”对象)来存储对应的数据和行为。你可以把特定的任务对象都关联到父对象上，让它们在需要的时候可以进行委托。    (其实我们一般都是用父对象来定义通用的方法,子对象进行委托.然后子对象自身个性的属性方法就写在子对象本身,并避免与父对象的属性名冲突)        </p><p><strong>ps:</strong> 这节书中这段话<code>但是我们并不需要把这些行为放在一起，**通过类的复制**，我们可以把它们分别放在各自独立 的对象中，需要时可以允许 XYZ 对象委托给 Task。</code>有个错误.”通过类的复制”应该改为”通过”[[Prototype]]机制”.这里应该是作者的手误.<br>在 JavaScript 中，[[Prototype]] 机制会把对象关联到其他对象。无论你多么努力地说服自 己，JavaScript 中就是没有类似“类”的抽象机制。(其实主要原因还是是JavaScript没有完整的复制机制)</p><p><strong>委托理论的使用建议:</strong><br>PS:书中这里写了3条,其实只有2条,第三条不过是对第一条的说明,这里我进行了合并.</p><ul><li><ol><li>通常来说，在 [[Prototype]] 委托中最好<strong>把状态保存在委托者(子对象)而不是委托目标(父对象)上</strong>。那怎么实现呢,就是通过”this 的隐式绑定”.<strong>在委托目标(父对象)上的函数里通过this定义保存状态</strong>.当委托者(子对象)引用该函数方法时,此时的this就自动绑定到委托者上了.</li></ol></li><li><ol start="2"><li>在委托中我们会尽量避免在 [[Prototype]] 链的不同级别中使用相同的命名，否则就需要使用笨拙并且脆弱的语法来消除引用歧义(参见第 4 章)。</li></ol></li><li><strong>补充</strong>: 3. 在 API 接口的设计中，<strong>委托最好在内部实现，不要直接暴露出去。</strong> 这么做更多的是出于安全和接口稳定的考虑.建议<strong>子对象将所有引用父对象的方法都套个函数隐藏起来,并取一个语义化的属性名.</strong></li></ul><p><strong>委托理论的使用注意:</strong></p><ul><li><ol><li><strong>禁止两个对象互相委托</strong>:当你将第二个对象反向委托给前一个对象时,就会报错.</li></ol></li><li><ol start="2"><li><strong>调试</strong>: 这个了解下就行.知道不同浏览器和工具对委托的解析结果并不一定相同.(吐槽:看了半天到后面出现<code>实际上，在编写本书时，这个行为被认定是 Chrome 的一个 bug， 当你读到此书时，它可能已经被修复了。</code>我只想说WTF! 好吧,我知道chrome以前可能出现过这个”bug”了=.=)</li></ol></li></ul><h4 id="6-1-3-比较思维模型"><a href="#6-1-3-比较思维模型" class="headerlink" title="6.1.3 比较思维模型"></a>6.1.3 <strong>比较思维模型</strong></h4><p>这节主要是比较了”通过构造函数(模拟类)实现原型继承”与”通过对象关联(委托形式,Object.create( … ))实现原型继承”两种方式的区别.</p><p><strong>结论:</strong> 通过对象关联,委托形式,更加简洁,更加清晰易懂.</p><p>PS:这里我原本自己对例子画出原型示意图.但是发现是真的复杂,并且和书中简洁后的示意图是差不多的,所以这里就不展示了,免得让读者看得更头大.这里建议,读者自己在草稿纸上画出原型示意图.</p><h3 id="6-2-类与对象"><a href="#6-2-类与对象" class="headerlink" title="6.2 类与对象"></a>6.2 类与对象</h3><p>其实这节讲得还是”通过构造函数(模拟类)实现原型继承”与”通过对象关联(委托形式,Object.create( … ))实现原型继承”两种方式的区别.不过这次主要是以前端实际使用场景进行讲解.</p><h4 id="6-2-1-控件“类”"><a href="#6-2-1-控件“类”" class="headerlink" title="6.2.1 控件“类”"></a>6.2.1 <strong>控件“类”</strong></h4><p>这里我就不以书中的例子进行讲解了,而是直接站在更高的角度对这种”类”风格的代码进行讲解.<br><strong>最大特点:</strong> 1是通过构造函数进行模拟类,2是通过显式伪多态(硬绑定函数)关联两个函数.<br><strong>注意:</strong> </p><ul><li><strong>不管是类还是对象.这两种形式一般都需要定义两种数据.第一种就是实例对象要用到的”初始保存的数据”;第二种就是通用行为的定义,包括对实例对象数据的增删改查.</strong></li><li>下面提到的显式伪多态(详见第四章),其实指的就是使用call()方法这种硬绑定.</li><li>注意ES6 class模拟类的写法我就没具体列出了.实际上class 仍然是通过 [[Prototype]] 机制实现的,不过是个表面简洁的语法糖.</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b5e847b943c0?w=1002&amp;h=717&amp;f=png&amp;s=117669" alt=""></p><p>虽然书中对显式伪多态称为”丑陋的”,还用了一个语气动词”呸!”.虽然这样不好,但有时用call真的很方便,所以用得也很多.</p><h4 id="6-2-2-委托控件对象"><a href="#6-2-2-委托控件对象" class="headerlink" title="6.2.2 委托控件对象"></a>6.2.2 <strong>委托控件对象</strong></h4><p><strong>最大特点:</strong> 通过对象载体来模拟父子,并<strong>通过Object,create(…)来对两个对象进行关联</strong>.并<strong>通过委托的形式进行引用</strong>.与上节中提到的类形式还有一个区别:对象foo构建后,需要手动调用setUp方法进行初始化.故对象的构建与初始化是分开的.而构造函数形式则是在new 构造函数时, 同时进行了对象构建与初始化.(关于这点我下面还会再说明的)</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/25/1674b604328156c9?w=789&amp;h=822&amp;f=png&amp;s=132960" alt=""></p><p>关于书中这句<code>使用类构造函数的话，你需要(并不是硬性要求，但是强烈建议)在同一个步骤中实现构造和初始化。然而，在许多情况下把这两步分开(就像对象关联代码一样)更灵活。</code>的理解:使用类构造函数形式,当我们使用<code>new 构造函数</code>时,其实是在<strong>一步实现</strong>对象的构建和对象数据的初始化(通过构造函数里的call) ;使用这种委托形式,我们是分别通过<code>Object.create( ... );</code>构建对象和<code>foo.setUp( ...);</code>来初始化的.即我们是分两步实现的.这样分开的话其实是更加灵活,也更符合编程中的关注分离原则.</p><h3 id="6-3-更简洁的设计"><a href="#6-3-更简洁的设计" class="headerlink" title="6.3 更简洁的设计"></a>6.3 更简洁的设计</h3><p>这节也是一样通过两者的对比来突显委托设计模式的各种优点.这里我就不再对书中的例子进行解读.如果你真正理解了类和委托的话,其实是很简单的.如果觉得复杂的话,可以在纸上理一下函数和对象之间的关系,下面我就只总结下这里提到委托设计模式的优点,当然核心是更简洁.</p><p><strong>简洁体现在:</strong></p><ul><li>1, 委托重点在于只需要两个实体(两个对象相互关联)，而之前的”类”模式需要三个(父”类”,子”类”,实例对象)其实可以这么理解:委托模式将”子类”和”实例对象”合为一个对象了。</li><li>2, 不需要基类(父类)来”共享”两个实体之间的行为.不需要实例化类,也不需要合成.其实这第二条就是对第一条这种结果的说明.</li><li>额外补充强调:在使用构造函数模拟类时,子类通常会对父类的行为进行重写(属性名相同);但委托模式则不会,它会重新取个属性名,再引用父对象上的行为.</li></ul><h3 id="6-4-更好的语法"><a href="#6-4-更好的语法" class="headerlink" title="6.4 更好的语法"></a>6.4 更好的语法</h3><p>这节主要是介绍ES6提供的2个简洁写法与其中的隐患.</p><p><strong>语法:</strong></p><ul><li><p>在 ES6 中我们可以在任意对象的字面形式中使用简洁方法声明，例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> Foo = &#123;</span><br><span class="line">  bar() &#123; <span class="comment">/*..*/</span> &#125;,<span class="comment">//字面形式声明</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在 ES6 中我们可以用 Object. setPrototypeOf(..) 来修改对象的 [[Prototype]],具体用法可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noopener">查看MDN</a>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用更好的对象字面形式语法和简洁方法 </span></span><br><span class="line"><span class="keyword">var</span> AuthController = &#123;</span><br><span class="line">         errors: [],</span><br><span class="line">         checkAuth() &#123;</span><br><span class="line">           <span class="comment">// ... </span></span><br><span class="line">         &#125;,</span><br><span class="line">         server(url,data) &#123;</span><br><span class="line">             <span class="comment">// ...</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// ... </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 现在把 AuthController 关联到 LoginController </span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf( AuthController, LoginController );</span><br></pre></td></tr></table></figure></li></ul><p><strong>弊端:</strong></p><ul><li><strong>对象字面形式语法</strong>:实际上就是一个匿名函数表达式.匿名函数会导致3个缺点:1. 调试栈更难追踪;2. 自我引用(递归、事件(解除)绑定，等等)更难; 3. 代码(稍微)更难理解。(其实我觉得这3个缺点还好,影响不是那么大).但是这种简洁语法很特殊，会给对应的函数对象设置一个内部的 name 属性，这样理论上可以用在追 踪栈中。所以实际上唯一的弊端就只剩第2条了.终极建议就是:如果你需要自我引用的话，那最好使用传统的具名函数表达式来定义对应的函数，不要使用简洁方法。</li><li><strong>Object. setPrototypeOf(..)</strong>  这个是书中没有提的,我觉得有必要进行补充下.首先,Object. setPrototypeOf(..)可能会带来性能问题,如果关心性能,则应该使用Object.create()替代.<strong>Object. setPrototypeOf(..)与Object.create()的主要区别</strong>: Object. setPrototypeOf(..)会直接修改现有对象的[[prototype]],Object.create()则是返回一个新对象.所以你需要手动设置一下丢失的的constructor属性(如果你需要的话).而使用setPrototypeOf(..)则不需要.</li></ul><h3 id="6-5-内省"><a href="#6-5-内省" class="headerlink" title="6.5 内省"></a>6.5 内省</h3><p><strong>吐槽:</strong> 纵观整本书,作者关于JavaScript中模拟类和继承”的批评,说它们具有很大误导性!更是嗤之以鼻!就差爆粗口了,JavaScript就像一个异教徒,应该绑在十字架上被烧死!但是他这样的观点,都是站在其他语言的角度来看待时,产生的.我想更多的读者可能是只接触过JavaScript.那么他其实是没有这些疑惑的!!!你反而给他们讲这一大堆其他语言的”正确”含义,有时候会时得其反!让读者更加困惑,如果是理解不透彻的,反而会怀疑自己本来写的是对的代码!所以读者应该做一个可以理解作者意图,并且拥有自我见解和观点立场!</p><p><strong>什么是内省(自省)?</strong><br>首先,本节需要弄懂一个问题,什么是内省,或者是自省。书中的解释是<code>自省就是检查实例的类型。类实例的自省主要目的是通过创建方式来判断对象的结构和功能。</code>我这里再更通俗地解释下:当我们构建得到一个实例对象时,有时候我们是不太清除它的属性和方法的.尤其是第三方库.有时候贸然使用会导致很多错误(例如调用的方法不存在,或者报错等).这个时候我们就需要通过自省.其实就是通过一系列操作,来确认实例是不是我们想要的那个,实例的方法是不是我们想要的(存在且可用).</p><p><strong>内省的方法:</strong></p><ul><li><strong>1.通过 instanceof 语法:</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.something = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="comment">// 假设我们不知道上面的过程,只知道得到实例对象a1</span></span><br><span class="line"><span class="comment">//我们想知道a1是不是我所希望的函数Foo所构建的</span></span><br><span class="line"><span class="keyword">if</span> (a1 <span class="keyword">instanceof</span> Foo) &#123; </span><br><span class="line">  a1.something();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>例子中我们有一个实例对象a1,但是我们不知道a1是不是我们所希望的函数Foo所构造的,此时就可以通过<code>instanceof</code>进行判断.        <code>instanceof</code>比较适合判断实例对象和构造函数之间的关系.<br><strong>缺陷:</strong> 但是如果我们想判断函数A是不是函数B的”子类”时,则会稍微麻烦点,我们需要像这样<code>A.prototype instanceof B</code>进行判断.并且也不能直接判断两个对象是否关联.</p><ul><li><strong>2.通过 “鸭子类型”:</strong> 为什么会叫这个名字?看了作者的解释,还是不太能接受.不太理解外国人的脑回路.你在国内和别人说”鸭子类型”,估计也是一脸懵逼.其实很简单,所谓的”鸭子类型”其实也是我们实际工作中常用的:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果a1的something存在的话,则我们可以进行调用</span></span><br><span class="line"><span class="keyword">if</span> ( a1.something) &#123; </span><br><span class="line">  a1.something();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>其实这种方法是非常常用的,排除了在不知道存在性情况下,贸然调用的风险.<br><strong>缺陷:</strong> 关于书中提到的缺点,四个字概括就是”以偏概全” .书中关于Promise的例子,就是以偏概全的例子.所以我们在使用时,在if判断a1.something存在时,才会在后面使用something方法.不要直接使用anotherthing,这种没确认过的方法.</p><ul><li><strong>3.如果使用对象关联时:</strong> 则可以比较简单的使用<code>Object.getPrototypeOf(..)</code>进行判断.例如<code>Object.getPrototypeOf(a)===A</code>其中a,A都是对象.如果为true,则说明a的原型链上含有对象A.</li></ul><h3 id="6-6-小结"><a href="#6-6-小结" class="headerlink" title="6.6 小结"></a>6.6 小结</h3><ul><li>除了类和继承设计模式,行为委托其实是更强大,更值得推广的模式(本观点仅代表作者的观点!)</li><li>行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。(我觉得还是父子对象关系.我的解说里也都是父子相称)</li><li>当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。</li><li>对象关联(对象之前互相关联)是一种编码风格，它倡导的是直接创建和关联对象，不把它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现   </li></ul><h1 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h1><p>后面关于&lt;你不知道的JavaScript&gt;中和下.还在写作当中,手头上还有一篇webpack完全指北的文章,目前写了一半2w字,也都是面向新手,真正的全面地由浅入深.最近,空降一个新项目组,开发到测试只有一个月,还要带新人,更新会很慢.不过我会争取年前全部放出.如果大家喜欢的话,可以关注我一下,文章首发还是在掘金的.  </p><p>最后求一个内推,目前笔者在一家软件国企(半养老型).年底或者明年初就会考虑离职.希望进入一家比较好的互联网企业.如果有小伙伴有好的机会可以发我邮箱:<a href="mailto:bupabuku@foxmail.com" target="_blank" rel="noopener">bupabuku@foxmail.com</a>.谢谢!<br>目前暂时优先考虑武汉(房子,盆友,东西都在这边,去外地太不方便了-.-)</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端基础1</title>
      <link href="/2018/12/01/%E9%9D%A2%E8%AF%95/FrontPrevew/"/>
      <url>/2018/12/01/%E9%9D%A2%E8%AF%95/FrontPrevew/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML/CSS"></a>HTML/CSS</h3><ul><li>浏览器内核？<ul><li>IE/Trident</li><li>FireFox / gecko</li><li>Chrome / webKit-&gt;Blink</li><li>Safari / WebKit</li><li>Opera / 之前是presto -&gt; Blink</li></ul></li><li>Doctype? <ul><li>在<html>标签之前 告知浏览器使用那种文档</html></li></ul></li><li><p>Quirks 模式是什么？Standards模式区别</p><ul><li>如果有条件采用CSS之后更好的模式，如果没有写，兼容之前的布局方式</li><li>区别 ：<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">盒模型 / 标准下内容宽高；Quirks下IE的包括padding <span class="keyword">border</span></span><br><span class="line"><span class="keyword">设置行内元素宽高 </span>/ 标准下设置不会生效；quriks 下会设置宽高</span><br><span class="line">设置百分比的高度 / 标准下高度是内容决定的，如果父元素没有设置百分比高度，字元素设置百分比是无效的；quirks下设置生效</span><br><span class="line"><span class="keyword">margin：0 </span>auto / 标准下可以元素居中，quirks下不能居中</span><br></pre></td></tr></table></figure></li></ul></li><li><p>div+css 布局和table布局有什么区别</p><ul><li>改版方便</li><li>页面加载快 结构化清晰，页面显示简洁</li><li>表现与数据结构分离</li><li>易于优化，搜索引擎更友好。</li></ul></li><li>img alt 和title的区别 strong和em的区别<ul><li>alt 用在显示不出来图片的时候占位文字</li><li>title 是鼠标悬浮img时的说明文字 IE下当没有设置title会把alt作为title提示 </li><li>strong 强调 加粗，重要性</li><li>en 斜体 强调</li></ul></li><li>渐进增强/优雅降级<ul><li>Progressive Enhancement针对低版本保证最基本功能，再适配低版本 进行效果交互能用户体验</li><li>Graceful Degradation 一开始完整功能，再针对低版本浏览器进行兼容</li><li>区别： 优雅降级往回看，向低版本兼容。渐进增强向前看，兼容最新的的功能。</li></ul></li><li>为什么利用多个域名来存储网站资源会更有效<ul><li>CDN 缓存更方便</li><li>突破浏览器并发限制</li><li>节约cookie带宽</li><li>节约主域名的连接数，优化页面相应速度</li><li>防止不必要的安全问题</li></ul></li><li>网页标准和标准制定机构重要性的理解</li><li>Cookie SessionStorage LocalStorage 区别<ul><li>SessionStorage session中的数据 这些数据 只有在同一个会话中的页面才能访问，并当会话结束随之销毁，会话级别的存储。</li><li>LocalStorage 持久化的本地存储 除非主动删除数据，否则永远不会过期 </li><li>Cookie 大小受限制，并且每次请求新页面Cookie都会被发送过去，这样无形中浪费带宽，还需要制定作用域，不可以跨域。</li><li>WebStorage 是作为本地存储用的，有API setItem getItem removeItem clear 等。</li><li>Cookie 作用是与服务器进行交互，作为HTTP规范的一部分存在。</li></ul></li><li>src 和 href 的区别<ul><li><code>src source &lt;script&gt;</code> 中指向的资源替换当前元素，会加载编译资源之后再向下进行</li><li>href 网络资源位置，和<link> 配合使用，指向的一个地址，会并行加载，编译当前文档之后再编辑指向的资源位置</li></ul></li><li>网页制作的图片格式 <ul><li>PNG-8/PNG-24/JPEG/GIF/SVG</li><li>Webp 谷歌的图片格式，是JPEG的60%，节省空间和网络资源 </li></ul></li><li>微格式？<ul><li>是一种让机器可读的语义话词汇的集合，是结构化数据的开放标准，是特殊应用而制定的特殊格式。</li><li>优点：将只能数据添加到网页上，让网站内容再搜索引擎结果界面可以显示额外的提示， </li></ul></li></ul><hr>   <ul><li>从用户刷新网页开始，一次JS请求一般情况那些缓存？<ul><li>DNS缓存 CDN缓存 浏览器缓存 服务器缓存</li></ul></li><li>大型电商网站大量的图片，加载很慢，有哪些方法优化？<ul><li>能用font字体替代一些icon图片</li><li>使用精灵图 取代小而多的一类图片</li><li>图片懒加载，先加载显露出来的，上拉加载的时候再加载</li><li>如果有幻灯片，只加载第一张和后一张，点击之后再加载后面的</li><li>CSS图片，使用CSSsprite SVGsprite Iconfont Base64等技术</li><li>如果图片过大，使用特殊编码压缩图片</li><li>有限加载缩略图，再加载高清图片</li><li>所需小图，优先服务器压缩后的小图。</li></ul></li><li>HTML结构的语义化<ul><li>丢掉CSS样式后也能显示页面结构 有默认的CSS</li><li>搜索引擎注重语义标记 </li><li>W3C 有标准，减少差异化东西，方便开发和维护，提高开发效率，实现模块开发</li></ul></li><li>做好SEO考虑？<ul><li>合理标签的使用</li><li>Meta标签优化，title Description Keywords Author Category Language</li></ul></li><li><p>DOM 设置它的CSS样式</p><ul><li>内部样式/内联样式/外部样式  | 标签内部/<code>&lt;style&gt;</code>标签内 / 引入的外部样式<link> </li></ul></li><li><p>CSS哪些选择器</p><ul><li>派生选择器(标签选择器) 权重1</li><li>id选择器      ID权重100</li><li>类属性选择器   class权重10</li><li>属性选择器  ::hover</li><li>后代选择器 div .text .span 空格隔开 权重相加(1+10+10) </li><li>群组选择器 p,div,#a{} 或的关系，是多个目标一起设置</li></ul></li><li>使一个元素不显示？ CSS里可以用哪些属性定义<ul><li>display:none</li><li>visibility:hidden</li><li>这只宽高为0 ; z-index:-100 ; 透明度设置为0 </li></ul></li><li>超链接访问过后hover样式就不出现了，问题？ 如何让解决？<ul><li>LVHA(link;visted;hover;active)</li></ul></li><li>什么是CSS Hack 针对不同的浏览器写不能的CSS  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_background-color:white; <span class="comment">/*ie6*/</span></span><br><span class="line">+background-color:white; <span class="comment">/*ie7*/</span></span><br><span class="line">background-color:white\<span class="number">9</span>;<span class="comment">/*ie9*/</span></span><br><span class="line">background-color:white; <span class="comment">/*剩下的就是IE8 */</span></span><br></pre></td></tr></table></figure></li></ul><hr>     <ul><li>rgba() 和opacity 的透明效果有什么不同？ | 元素内的所有的内容的透明度</li><li>CSS让文字在垂直和水平方向上的重叠的两个属性是什么？<ul><li>垂直方向line-height</li><li>水平方向letter-spacing </li><li>letter-spacting 可以消除 inline-block的换行符空格间隙问题 </li></ul></li><li><p>垂直居中一个浮动元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/* 垂直居中一个浮动元素 方法一:已知元素的高宽 */</span></span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* 垂直居中一个浮动元素 方法二:未知元素的高宽  */</span></span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>; </span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* 垂直居中一个&lt;img&gt;? */</span></span><br><span class="line"><span class="selector-class">.imageContainer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>px 和 em的区别</p><ul><li>px 是固定值，em值不是固定的，并且会继承父级元素的大小</li><li>浏览器的默认字体是16px = 1em . 12px = 0.75em </li></ul></li><li>描述一个reset的CSS文件如何使用？ normalize.css? 不同之处？<ul><li>重置样式，恢复默认样式 不同的浏览器有不同的默认样式，先进行初始化统一样式</li><li>normalize.css 没有充值所有的样式，仅提供了一套合理的默认样式。</li></ul></li><li>Sass Less 是什么？ 为什么使用？<ul><li>是CSS预处理 是CSS的一种抽象 是一种特殊的语法语言编译成CSS</li><li>less是一种动态样式 变量继承运算函数等。</li><li>结构清晰，便于扩展; 可以封装对浏览器差异的重复处理; 轻松实现多继承; 完全兼容CSS代码向下兼容 </li></ul></li><li>dispaly:none 和 visibility:hidden的区别是什么？<ul><li>display 隐藏空间不占位置</li><li>visibility 隐藏，保留空间位置 </li></ul></li><li>CSS的<link> 和@import 的区别<ul><li>link 是html标签;import 是CSS提供</li><li>页面加载时候，link 会异步同时加载，@import 引入的CSS会在页面加载完成才引入CSS</li><li>@import只有在IE5之上才会被识别，link不存在浏览器兼容性问题</li><li>Link 优先级权重大于@import</li></ul></li><li>盒子模型 content /padding/border/margin</li><li>为什么初始化样式？<ul><li>由于浏览器兼容问题，不同的浏览器对标签默认样式不同，会造成不同浏览器之间的差异化显示</li><li>但是初始化CSS会对搜索引擎优化造成小影响 </li></ul></li><li>BFC是什么？(块级格式化上下文)<ul><li>一个创建了新的BFC盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素，在同一个BFC的两个相邻的盒子在垂直方向发生margin 重叠的问题</li><li>BFC是值浏览器中创建了一个独立的渲染区域，该区域所有的元素布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用 </li></ul></li></ul><hr>   <ul><li>IE的双边距bug，解决：加入dispaly:inline</li><li>html常见的兼容性问题 <ul><li>双边距问题 使用dispaly</li><li>3像素问题 display:inline -3px</li><li>超链接hover点击失效 LVHA </li><li>IE z-index 问题 父级 display:relative</li><li>PNG透明 使用JS修改</li><li>Min-height最小高度 !important</li><li>select 在ie6下遮盖 使用iframe</li><li>为什么没有办法定义1px的宽度问题 (IE6默认行高造成的， over:hidden;zoom:0.08;line-height:1px)</li><li>IE5-8 不支持opacity <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.opacity</span>&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity = 60); <span class="comment">/*IE5-7*/</span></span><br><span class="line"><span class="attribute">-ms-filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)"</span>; <span class="comment">/*IE8*/</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>IE6 不支持PNG透明背景 IE6 下使用Gif 图片 <ul><li>浏览器的内核分别是什么，经常遇到的浏览器兼容性哪些？原因，解决方法？常用hack技巧</li></ul></li><li>PNG 24图片显示出现背景，做成PNG8</li><li>个浏览器不同的margin padding 加全局的*{padding,magging:0}</li><li>IE6双边距的问题<ul><li>display的值和各自的作用，position的值；relative absolute 定位原点是什么</li></ul></li><li>block/inline-block/grid/table/table-cell</li><li>absolute/relative/fixed/static/inherit</li><li>inherit 规定从父元素继承position属性的值<ul><li>absolute的containing block 计算方式跟正常流有什么区别</li><li>若此元素为inline元素 则containing block 为能都包含这个元素生成的第一个和最后一个inline box 的padding bxo</li><li>position 和 display/ margin collapse /overflow / float 这些特性相互叠加会怎样？</li></ul></li></ul><hr>   <h3 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h3><ul><li>typeof 返回值是？<ul><li>Object/number/function/boolen/undefine/string </li></ul></li><li><p>举例3种强制转换 2种隐式转换</p><ul><li>强制转换 perseInt Number() parseFloat </li><li>隐式转换 == ; <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">'1'</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == undefine <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>splite() 和 join() 的区别 | 字符串分割为数组 数组合并为字符串</p></li><li>pop() push() unshift() shift() | 尾部添加 微不删除 头部添加 头部删除</li><li>事件绑定和普通事件的区别？<ul><li>事件绑定 是把事件注册到具体的元素上；普通事件指的是可以用来注册的事件 </li><li><code>div1.onclick</code>如果给同一个元素绑定了两次或者多次相同的类型的事件,之前绑定的事件会被覆盖;不支持DOM事件流</li><li>IE9之后 <code>addEventListener</code> 绑定了多次，所有的都会触发 ；支持DOM事件流 ；绑定的函数名参数不带on</li><li>IE9 之前是 <code>attachEvent/detachEvent</code> 这种方式只支持事件冒泡不支持事件捕获</li></ul></li><li>IE和DOM 事件流的区别<ul><li>执行顺序不一样/参数不一样/事件加不加on/this指向问题</li><li>IE9之前 attachEvent(‘onclick’,function(){})</li><li>IE9之后 addEventListener(‘click’,function(){})</li></ul></li><li>IE和标准下有哪些兼容性写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event</span><br><span class="line"><span class="built_in">document</span>.documentElement.clienWidth || <span class="built_in">document</span>.body.clientWidth</span><br><span class="line"><span class="keyword">var</span> target = ev.srcElement || ev.target</span><br></pre></td></tr></table></figure></li></ul><hr> <ul><li>call 和 apply 的区别<ul><li>都是用了一个本不属于一个对象的方法，让这个对象去执行</li><li>toString.call([],1,2,3)</li><li>toString.apply([],[1,2,3])</li><li>Object.call(this,obj1,obj2,obj3)</li><li>Object.apply(this,arguments)  </li><li>call 参数传分散可以多个，apply 传一个参数的集合</li></ul></li><li>B继承A的方法<ul><li>构造函数继承;原型链继承;以上两种方式的组合</li></ul></li></ul><ul><li>事件委托是什么？<ul><li>复合W3C标准的事件绑定，利用事件冒泡的原理，让自己所触发的事件，让他的父元素代替执行，delegate </li></ul></li><li>闭包是什么，有什么特性，对页面有什么影响<ul><li>闭包就是能够读取其他函数内部变量的函数，(匿名函数就是闭包?)</li><li>缺点：滥用闭包会引起内存泄漏，因为闭包引入的外部的变量都永远不会被释放，所有应该再必要的时候，释放这个闭包函数</li></ul></li><li>如何阻止事件冒泡和默认事件<ul><li>eve.stopPropagation || event.cancelBubble = true(IE9之前)</li><li>阻止默认事件：在点击事件内return false || eve.preventDefault</li></ul></li><li>添加 删除 替换 插入某个节点的方法<ul><li>eleme.appendChild(). //追加</li><li>eleme.removeChild()。// 删除</li><li>eleme.replaceChild() // 替换</li><li>eleme.insertBefore() // 在之前插入 原声JS不提供insertAfter()</li></ul></li><li>javascript的本地对象，内置对象 宿主对象<ul><li>本地对象 Array Obj regep 等可以使用 new 实例化</li><li>内置对象为gload Math等不可以实例化的</li><li>宿主为浏览器自带的document window 等 </li></ul></li><li>document load 和 document ready 的区别<ul><li>document.onload 是结构样式加载完成之后才执行</li><li>window.onload 是结构样式加载之后，还要执行完所有的样式 图片等资源文件全部加载完之后才会调用 window.onload </li></ul></li><li>‘==’ 和 ‘===’ 的区别<ul><li><code>==</code> 会隐式转换 </li><li><code>===</code> 会先判断左右两边的数据类型 如果数据类型不一致直接return false ，之后才进行值的比较 </li></ul></li><li>javascript的同源策略<ul><li>同一源:主机名 协议 端口号的组合。 </li><li>麻烦：Ajax 不在0:http协议的默认端口；同域名下请求无法实现</li><li>可以通过jsonp 来解决</li></ul></li><li>编写一个数组去重的方法<ul><li>for循环判断</li><li>利用set去重特性 </li></ul></li></ul><hr> <ul><li>JS是一门什么样的语言，有哪些特点？<ul><li>面向对象/动态语言/ 运行环境在浏览器中运行 </li></ul></li><li>JS的数据类型？<ul><li>基本数据类型:String|Boolen|Number|undefine|Null|Object</li><li>引用数据类型:Array|Date|Function|RegExp</li><li>如何判断数据类型<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>判断是否有数组的性质。splice() ；不能确定保证</span><br><span class="line"><span class="number">2</span>instanceof 在某些低版本中不适用</span><br><span class="line"><span class="number">3</span><span class="built_in">isArray</span>() 保证兼容性是最好的方法</span><br><span class="line"><span class="built_in">toString</span>.<span class="built_in">call</span>(<span class="number">18</span>) <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">toString</span>.<span class="built_in">call</span>(<span class="string">''</span>) <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">toString</span>.<span class="built_in">call</span>(/[<span class="number">0</span>-<span class="number">9</span>][<span class="number">10</span>]/) <span class="comment">// [object RegExp]</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">typeof</span> Array.<span class="built_in">isArray</span> === <span class="string">'undefine'</span>)&#123;</span><br><span class="line">Array.<span class="built_in">isArray</span> = function(agr) &#123;</span><br><span class="line">  return Object.prototype.<span class="built_in">toString</span>.<span class="built_in">call</span>(arg) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>希望获取页面所有的checkbox怎么做</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domlist = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span><br><span class="line"><span class="keyword">var</span> checkArr = []</span><br><span class="line"><span class="keyword">var</span> len = domlist.length</span><br><span class="line"><span class="keyword">while</span>效率会比<span class="keyword">for</span>循环更高？</span><br><span class="line"><span class="keyword">while</span>(len--)&#123;</span><br><span class="line"><span class="keyword">if</span>(domlict[len].type === <span class="string">'checkbox'</span>)&#123;</span><br><span class="line">checkArr.push(domlict[len])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置一个ID为‘ttt’ 的div 内容为’xxxxxx’,背景色为‘#234’</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> divDom = document.getElementById(<span class="string">'ttt'</span>)</span><br><span class="line">divDom<span class="selector-class">.innerHtml</span> = <span class="string">'xxxxxxx'</span></span><br><span class="line">divDom<span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">'#234'</span></span><br></pre></td></tr></table></figure><ul><li>点击一个DOM的时候，希望执行一个函数，如何做？<ul><li>1.直接在DOM里绑定事件 <code>&lt;div onclik=&#39;test()&#39; &gt;&lt;/div&gt;</code> <ul><li>2.在JS里面绑定 <code>divDom.onclick = test</code></li><li>3.通过事件添加绑定<code>addEventListener(&#39;click&#39;,test)</code></li></ul></li></ul></li><li>JS的事件流模型<ul><li>事件冒泡 内而外</li><li>目标阶段<ul><li>事件捕捉 外向里</li></ul></li></ul></li><li><code>undefined</code> 会在以下三种情况下产生<ul><li>变量定义了还没有被复制</li><li>想要获取一个对象不存在属性和方法<ul><li>一个数组中没有被赋值的元素  </li><li>typeof null 返回的是Object</li></ul></li></ul></li><li>类型转换的判断相等</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">undefined</span> <span class="string">==</span> <span class="literal">null</span> <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="number">1</span> <span class="string">==</span> <span class="literal">true</span>         <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="number">0</span> <span class="string">==</span> <span class="literal">false</span>        <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="number">0</span> <span class="string">==</span> <span class="string">''</span>           <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">NaN</span> <span class="string">==</span> <span class="string">Nan</span>        <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="string">[]</span> <span class="string">==</span>  <span class="literal">false</span>      <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">[]</span> <span class="string">!=</span> <span class="string">![]</span>         <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="string">对于0</span> <span class="string">空字符串判断</span> <span class="string">建议用</span> <span class="string">===</span> </span><br><span class="line"></span><br><span class="line"><span class="string">var</span> <span class="string">foo</span> <span class="string">=</span> <span class="string">'11'</span> <span class="string">+</span> <span class="number">2</span> <span class="bullet">-</span> <span class="string">'1'</span></span><br><span class="line"><span class="string">console.log(foo)</span></span><br><span class="line"><span class="string">console.log(typeof</span> <span class="string">foo)</span></span><br><span class="line"></span><br><span class="line"><span class="number">112</span> <span class="bullet">-1</span> <span class="string">=</span> <span class="number">111</span>   <span class="string">类型是Number</span></span><br></pre></td></tr></table></figure><ul><li>引用类型指针拷贝 一个值修改，其他引用的值都做改变</li><li>已知有字符串 foo=”get-element-by-id”,写一个 function 将其转化成驼峰表示法” getElementById”。 | splice(‘-‘) ;charAt(0).toUpperCase()</li><li>输出今天的日期 以YYYY-MM-DD的方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 获取年，getFullYear()返回 4 位的数字</span></span><br><span class="line"><span class="keyword">var</span> year = d.getFullYear();</span><br><span class="line"><span class="comment">// 获取月，月份比较特殊，0 是 1 月，11 是 12 月</span></span><br><span class="line"><span class="keyword">var</span> month = d.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 变成两位</span></span><br><span class="line">month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line"><span class="comment">// 获取日</span></span><br><span class="line"><span class="keyword">var</span> day = d.getDate();</span><br><span class="line">day = day &lt; <span class="number">10</span> ? <span class="string">'0'</span> + day : day;</span><br><span class="line">alert(year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day);</span><br></pre></td></tr></table></figure><ul><li>将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换 成 10，{$name}替换成 Tony (使用正则表达式)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&lt;tr&gt;&lt;td&gt;&#123;$id&#125;&lt;/td&gt;&lt;td&gt;&#123;$id&#125;_&#123;$name&#125;&lt;/td&gt;&lt;/tr&gt;"</span>.replace(<span class="regexp">/&#123;\$id&#125;/g</span>, <span class="string">'10'</span>).replace(<span class="regexp">/&#123;\$name&#125;/g</span>, <span class="string">'Tony'</span>);</span><br></pre></td></tr></table></figure><hr> <ul><li><p><code>foo = foo || bar</code> 是什么意思？ 短路表达式 swift 给默认值</p></li><li><p>变量声明提升 &gt; 函数声明与变量声明会被 JavaScript 引擎隐式地提升到当前作用域的顶部，但是只提升名 称不会提升赋值部分。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 undefine 和 2 代码相当于:</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> foo;</span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">//undefined foo = 2;</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">// 2;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JS 实现随机选取10-100 的数据，存到一个数组，并排序</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 用 js 实现随机选取 10–<span class="number">100</span> 之间的 <span class="number">10</span> 个数字，存入一个数组，并排序</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">random</span>(<span class="keyword">start</span>,<span class="keyword">end</span>) &#123;</span><br><span class="line">    var ichose = <span class="keyword">end</span> - <span class="keyword">start</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Math.<span class="built_in">floor</span>(Math.<span class="built_in">random</span>() * ichose + <span class="keyword">start</span>)</span><br><span class="line">&#125;</span><br><span class="line">var iArry = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i  &lt; 10; i++) &#123;</span><br><span class="line">     var tem1 = random(10,<span class="number">100</span>)</span><br><span class="line">     iArry.push(tem1)</span><br><span class="line">&#125;</span><br><span class="line">iArry.sort()</span><br></pre></td></tr></table></figure><ul><li>把两个数组合并，并删除第二个元素。</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把两个数组合并，并删除第二个元素。</span></span><br><span class="line">var arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">var arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">var arr3 = arr1.concat(arr2) <span class="comment">// 合并之后返回一个新值</span></span><br><span class="line">arr3.splice(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// 在原值的基础上做操作</span></span><br></pre></td></tr></table></figure><ul><li>怎样添加、移除、移动、复制、创建和查找节点(原生JS)<ul><li>创建新节点 creatDocumentFragement | creatElement | creatTextNode</li><li>添加移除替换插入 appendChild() removeChild() replaceChild() inserBefor()</li><li>查找 getElementsByTagName() | getElementByName | getElementById()</li></ul></li><li>从网址‘<a href="http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e’取出参数返回一个json结构" target="_blank" rel="noopener">http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e’取出参数返回一个json结构</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urls = <span class="string">'http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e'</span></span><br><span class="line"> <span class="keyword">var</span> urlStr = urls.splice(<span class="string">'?'</span>)[<span class="number">0</span>]</span><br><span class="line"> <span class="keyword">var</span> mapS = urls.splice(<span class="string">'?'</span>)[<span class="number">1</span>].splice(<span class="string">'&amp;'</span>) <span class="comment">// 'a=1','b=2','c=','d=xxx','e='</span></span><br><span class="line"> <span class="keyword">var</span> result = []</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mapS.length; i++) &#123;</span><br><span class="line">     <span class="keyword">const</span> aelement = array[i];</span><br><span class="line">     <span class="keyword">var</span> akey = aelement.splice(<span class="string">'='</span>)[<span class="number">0</span>]</span><br><span class="line">     <span class="keyword">var</span> avalue =  aelement.splice(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">     <span class="keyword">var</span> tempEle = &#123;</span><br><span class="line">         akey:avalue</span><br><span class="line">     &#125;</span><br><span class="line">     result.push(tempEle)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><ul><li><p>正则表达式构造函数 <code>var reg = new RegExp(&#39;xxx&#39;)</code> 与字面量<code>var reg = //</code> 有什么不同。匹配邮箱的正则表达式？</p><ul><li>当适用RegExp() 构造函数的时候，不仅需要转义引号(‘\’表示) 而且是需要双反斜杠‘\’使用正则表达式字面亮效率更高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regMail = <span class="regexp">/^[a-zA-Z0-9_-]+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/</span></span><br></pre></td></tr></table></figure></li></ul><hr> <ul><li>js事件处理器在线程空闲之前不会运行？如何让让下面代码输出1，2，3</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i)</span><br><span class="line"> &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入异步队列是遍历的时候，执行异步队列的时候，是for循环结束之后再执行setTimeout `输出 3 3 3` </span></span><br><span class="line"><span class="comment">// 如果要输出 1 2 3 需要修改成立即执行函数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//  setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//      console.log(i)</span></span><br><span class="line">    <span class="comment">//  &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line">     setTimeout((<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(a)</span><br><span class="line">     &#125;)(i),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写一个函数，清除字符串前后的空格 <code>trim()</code> </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trimString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.trim) &#123;</span><br><span class="line">        <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>,<span class="string">''</span>).replace(<span class="regexp">/\s+$/</span>,<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//\s 匹配空白字符:回车、换行、制表符 tab 空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> testfunc = <span class="string">'\t  djhfg djkf d '</span></span><br><span class="line"><span class="built_in">console</span>.log(testfunc.trim())</span><br></pre></td></tr></table></figure><ul><li><p>js中的callee 和caller的区别 斐波那契数列 生兔子</p><ul><li>caller 返回了一个函数的调用，该函数调用了当前函数</li><li>calle 是返回正在被执行的function 函数，也就是指定的function 对象的正文 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// caller calee 的区别</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//典型的斐波那契数列</span></span><br><span class="line">     <span class="keyword">var</span> result=[];</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(n==<span class="number">1</span>)&#123; </span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">if</span>(result[n])&#123;</span><br><span class="line">                 <span class="keyword">return</span> result[n];</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//argument.callee()表示 fn() </span></span><br><span class="line">                 result[n]=<span class="built_in">arguments</span>.callee(n<span class="number">-1</span>)+<span class="built_in">arguments</span>.callee(n<span class="number">-2</span>)</span><br><span class="line">                 <span class="keyword">return</span> result[n];</span><br><span class="line">             &#125; </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>JS的一个 <code>++a</code>和<code>a++</code></p></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>, b=<span class="number">20</span> , c=<span class="number">30</span>;</span><br><span class="line">    ++a;  <span class="comment">// a:11</span></span><br><span class="line">    a++;  <span class="comment">// a:12</span></span><br><span class="line">    e=++a+(++b)+(c++)+a++;</span><br><span class="line">    <span class="comment">// a:13 + 21 + 30 + 13 = 77</span></span><br><span class="line">    <span class="comment">// 结束之后 a:14</span></span><br><span class="line">    alert(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写一个函数，返回今天的日期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d, s=<span class="string">"今天日期是:"</span>;</span><br><span class="line">    d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    s += d.getMonth() + <span class="string">"/"</span>; <span class="comment">//(month:0-11 +1?)</span></span><br><span class="line">    s += d.getDate() + <span class="string">"/"</span>; </span><br><span class="line">    s += d.getFullYear(); </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组<code>reverse()</code>运用 reverse 方法颠倒数组中元素的位置，并返回该数组的引用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test6</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>] <span class="comment">// 0,1,2</span></span><br><span class="line">    arr1[<span class="number">4</span>]= <span class="string">'z'</span>        <span class="comment">// arr1: [1,3,5,undefine,'z']</span></span><br><span class="line">    <span class="keyword">var</span> arr2 = arr1.reverse() <span class="comment">// arr2:['z',undefine,5,3,1]  arr1:['z',undefine,5,3,1] </span></span><br><span class="line">    <span class="keyword">var</span> arr3 = arr1.concat(arr2) </span><br><span class="line">    <span class="built_in">console</span>.log(arr3)  <span class="comment">// arr3 ['z',,5,3,1,'z',,5,3,1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"关闭窗口"</span> <span class="attr">onclick</span>=<span class="string">"closeWin()"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">closeWin</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(confirm(<span class="string">"确认要退出吗"</span>))&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.close()</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr> <ul><li>写出简单描述 html 标签(不带属性的开始标签和结束标签)的正则表达式 / 并将以下字符串中的 html 标签去除掉</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = “&lt;div&gt;这里是 div&lt;p&gt;里面的段落&lt;<span class="regexp">/p&gt;&lt;/</span>div&gt;”;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;\/?\w+\/?&gt;/gi</span></span><br><span class="line">str.replace(reg,<span class="string">''</span>);</span><br></pre></td></tr></table></figure><ul><li>根据下拉列表的选项变化，更新图片的显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"pic"</span> <span class="attr">src</span>=<span class="string">"img.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">'sel'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"img1"</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"img2"</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"img3"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"img4"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showImg</span><span class="params">(oSel)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> str = oSle.value</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"pic"</span>).src = str + <span class="string">'.jpg'</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>BOM 常用的4个对象 并列举window对象的常用方法至少5个？<ul><li>window document location screen history navigator </li><li>Alert() confirm() prompt() open() close()</li></ul></li><li>JS 如何实现继承<ul><li>原型链继承 借用构造函数继承 组合继承 寄生式继承 寄生组合继承 </li></ul></li><li><p>JS对象创建的几种方式</p><ul><li>工厂模式 构造函数模式 原型模式 混合构造函数原型模式 动态原型方式 </li></ul></li><li><p><code>iframe</code>的优缺点</p><ul><li>优点：解决加载缓慢的第三方内容图标和广告等的加载问题 Security sandBox 并行加载脚本</li><li>缺点：iframe会阻塞主页面的unload事件 | 即时内容为空，加载也需要时间 | 没有语义</li></ul></li><li></li><li><p>Cookie 的弊端 </p><ul><li>长度限制 每个doming 最多20条cookie ；每个cookie 长度不能超过4K</li><li>安全性 有可能被拦截，原样转发cookie 就可以达到目的</li><li>有些状态不可能保留在客户端，需要计算的属性存储在服务器端</li></ul></li><li>JS延迟加载的方式有哪些<ul><li>defer/async 区别？</li><li>动态加载DOM方式(创建script，插入到DOM中，加载完毕后callBack)</li><li>按需异步加载JS </li></ul></li><li>哪些操作会造成内存泄漏<ul><li>内存泄漏是对象释放后，内存地址还是占用着</li><li>垃圾回收机制，引用计数为0的时候， </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端面试基本分析1</title>
      <link href="/2018/12/01/%E9%9D%A2%E8%AF%95/preview/"/>
      <url>/2018/12/01/%E9%9D%A2%E8%AF%95/preview/</url>
      
        <content type="html"><![CDATA[<blockquote><p>流程</p></blockquote><ul><li>模拟一面<ul><li>面试技巧 页面布局类</li><li>CSS盒模型 DOM事件类</li><li>HTTP协议类 原型链类</li><li>面向对象类 通信类</li><li>前端安全类 前端算法类 </li></ul></li><li>模拟二面<ul><li>面试技巧</li><li>渲染机制类</li><li>JS运行机制类</li><li>页面性能</li><li>错误监控</li></ul></li><li>模拟三面<ul><li>面试技巧</li><li>业务能力</li><li>团队协作能力</li><li>带人能力</li></ul></li><li>模拟终面<ul><li>面试技巧</li><li>职业竞争力</li><li>职业规划</li></ul></li></ul><blockquote><p>公司招聘 职位描述分析</p></blockquote><ul><li><p>京东</p><ul><li>负责PC端和移动端相关的前端开发工作</li><li>负责APP H5 开发，完成界面和后端交互开发</li><li>与后端工程师协作 调试数据接口</li><li>负责前端组件库的建立 </li><li>负责对现有系统的优化与重构</li><li>精通HTML5 特性，了解最新的HTML5最新规范，能用HTML5特性构建移动WebAPP</li><li>熟悉当前流行的JavaScript 类库，熟悉 JavaScript面向对象编程方法</li><li>熟悉Web标准  对表现与数据分离 HTML 至少熟悉一种前端MVC框架 并有实战经验</li><li>具有前端架构分析与设计能力，习惯于OOP开发方式</li><li>熟悉Web前沿技术和新技术调研</li><li>了解CSS预编译语言 sass less等</li><li>熟悉web构建工具 Grunt Glub 能够自己搭建前端构建环境</li><li>有服务端开发者经验者优先</li></ul></li><li><p>查看公司网站 所包含技术点</p><ul><li><code>&lt;meta&gt;</code> 标签</li><li><code>&lt;link&gt;</code> dns-prefetch 图片/静态资源预解析</li><li><code>&lt;script&gt;</code> async src 异步加载Js文件</li></ul></li><li>Font 字体文件</li></ul><blockquote><p>前端技术栈</p></blockquote><ul><li>jQuery</li><li>Vue </li><li>React</li><li>Node.js</li><li>Anguarl</li><li>Sass</li><li>less</li><li>Grunt</li><li>Gulp</li><li>npm</li><li>webpack</li><li>browserify</li></ul><blockquote><p>简历阶段 </p></blockquote><ul><li>概况  <ul><li>描述 简洁明了</li></ul></li><li>技能 <ul><li>专业技能，技能点全面 5-10条</li></ul></li><li>经历<ul><li>公司 - 项目 - 技能点 - 所做贡献 - 成长收获</li></ul></li></ul><blockquote><p>一面</p></blockquote><ul><li>页面布局  请写出三栏布局 两边宽度100px 中间自适应 <ul><li>5种解决方案： (浮动/绝对定位/table/flex/grid) 各自优缺点</li><li>三栏 上中下如何布局 两栏 上下，左右如何布局（固定一个部分）</li><li>Html标签语义化，页面布局，CSS基础，思维灵活多找哪个解决方案，代码规范</li></ul></li><li>CSS盒模型</li><li>DOM事件</li><li>HTTP协议</li><li>面向对象</li><li>原型链</li><li>通信</li><li>安全</li><li>算法</li></ul><blockquote><p>三栏布局技术实现</p></blockquote><ul><li>1.浮动 左右浮动固定宽度，中间自适应 缺点：高度不固定会溢出边界<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-27%20%E4%B8%8A%E5%8D%886.55.59.png?200x" alt="屏幕快照 2018-11-27 上午6.55.59"></li></ul><ul><li>2.绝对定位 左中右三个模块都绝对定位，中间这只距左右的距离 。自适应<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-27%20%E4%B8%8A%E5%8D%886.56.43.png?200x" alt="屏幕快照 2018-11-27 上午6.56.43"></li></ul><ul><li><p>3.flexBox布局 设置父试图 <code>display:flex</code> .左右设置固定宽度  中间设置<code>flex:1</code><br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-27%20%E4%B8%8A%E5%8D%886.57.44.png?200x" alt="屏幕快照 2018-11-27 上午6.57.44"></p></li><li><p>4.表格布局 父控件100% display:table .左中右子空间设置dispaly:table-cell ；之后左右设置固定宽度。中间自适应拉伸<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-27%20%E4%B8%8A%E5%8D%886.59.10.png?200x" alt="屏幕快照 2018-11-27 上午6.59.10"></p></li><li><p>5.grid布局 父识图设置100%； display:grid; grid-template-rows:100px;grid-template-columns:300px auto 300px<br> <img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-27%20%E4%B8%8A%E5%8D%886.59.57.png?200x" alt="屏幕快照 2018-11-27 上午6.59.57"></p></li></ul><blockquote><p>CSS盒模型</p></blockquote><ul><li><p>基本概念 标准模型| IE模型 ；区别：宽度计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IE模型 width = contentW + paddding + boder</span><br></pre></td></tr></table></figure></li><li><p>CSS如何设置两种模型 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-sizing:content-box | border-box;</span><br></pre></td></tr></table></figure></li><li><p>JS如何获取盒模型对应的宽和高 </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dom.style.width/height     <span class="comment">//只取行间样式设置 可以set设置</span></span><br><span class="line">dom.currentStyle.width/height  <span class="comment">//ALl可取 IE下 未设置取默认值</span></span><br><span class="line">dom.getComputedStyle(dom).width/height <span class="comment">// All可取</span></span><br><span class="line">dom.getBoundingClientRect().widht/height</span><br><span class="line"></span><br><span class="line">dom.getComputedStyle是一个可以获取当前元素所有最终使用的CSS属性值。<span class="string">`var style = window.getComputedStyle("元素", "伪类");`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`getBoundingClientRect`</span>用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置 可以用来判断是否在屏幕上显示</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>根据盒模型解释边距重叠</p><ul><li>垂直边距 </li><li>正正/负负值 取绝对值大的(20,10) =&gt; 20</li><li>一正一负取两个值的绝对值相加(20,-10) =&gt; 30</li></ul></li><li><p>BFC解决方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置父试图的overflow:</span><br><span class="line">overflow:hidden | auto</span><br><span class="line">BFC 内子元素即使是float 也会参与高度计算</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>DOM 事件类</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>DOM事件模型</span><br><span class="line"><span class="bullet">- </span>DOM事件流</span><br><span class="line"><span class="bullet">- </span>描述DOM事件捕获的具体流程</span><br><span class="line"><span class="bullet">- </span>Event对象的常见应用</span><br><span class="line"><span class="bullet">- </span>自定义事件</span><br></pre></td></tr></table></figure><ul><li>DOM 事件模型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOM0 element.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">DOM2 element.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">DOM3 element.addeventListener(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>DOM事件流  分三个阶段：捕获阶段，目标阶段，事件冒泡阶段</p><ul><li>事件冒泡：点击了一个button 向所有的父级一层一层上去传递，为事件冒泡</li><li>事件捕获：发生和冒泡顺序相反，window -&gt; doucument -&gt; body -&gt; sectionOne -&gt; button</li><li><p>window点击事件更改为使用事件捕获模式。(<code>addEventListener</code>最后一个参数，为true则代表使用事件捕获模式，false则表示使用事件冒泡模式。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4. You click window'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件冒泡阶段是可以被阻止的：<code>stopPropagation</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// event为事件对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1. You click Button'</span>);</span><br><span class="line">  event.stopPropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Stop Propagation!'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Event对象常见的应用</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault() <span class="comment">// 阻止事件的默认动作</span></span><br><span class="line">event.stopPropagation() <span class="comment">// 阻止冒泡 阻止后续的监听</span></span><br><span class="line">event.stopImmediatePropagation() <span class="comment">// 阻止冒泡 包括本身</span></span><br><span class="line">event.currentTarget <span class="comment">// 监听事件者</span></span><br><span class="line">event.target <span class="comment">// 事件的真正发出者</span></span><br></pre></td></tr></table></figure><ul><li>自定义事件 <ul><li>new Event(‘eventName’) </li><li>abutton.addEventListener(‘’,function(){})</li><li>abuton.dispatchEvent(aevent)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">'aeventName'</span>)</span><br><span class="line">adiv.addEventListener(<span class="string">'aeventName'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test cuntomerEvent'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">adiv.dispatchEvent(eve)</span><br></pre></td></tr></table></figure><blockquote><p>HTTP协议类 特点：简单快速|灵活|无连接|无状态</p></blockquote><ul><li>报文的组成部分 (请求行 请求头 空行 请求体) | (状态行 相应头 空行 响应体)</li><li>HTTP方法 ： GET获取资源/POST传输资源/PUT更新资源/DELETE删除资源/HEAD获得报文首部 </li><li>GET/POST的区别<ul><li><code>回退</code> get返回不刷新界面 / post会重新请求</li><li><code>URL收藏</code> get可以被收藏 / post不可以</li><li><code>主动缓存</code> get可以被缓存 / post要主动手动设置缓存</li><li><code>编码</code> get 只支持URL编码 / post支持多种</li><li><code>浏览记录参数</code> get完整保留 / post参数不会被保留</li><li><code>长度限制</code> get参数长度是限制的 / post没有限制</li><li><code>参数数据类型</code> get只接受ASCII字符 /  post无限制</li><li><code>安全性</code>  get不安全参数暴露 不能传递敏感信息</li><li><code>参数位置</code> get参数在URL / post在body里</li></ul></li><li><p>HTTP状态码</p><ul><li>1XX：指示信息 - 表示请求已接收，继续处理</li><li>2XX：成功 - 表示请求已被成功接收</li><li>3XX：重定向 - 要完成请求必须进行更近一步的操作</li><li>4XX：客户端错误 - 请求右语法错误或请求无法实现</li><li>5XX：服务器错误 - 服务器未能实现合法的请求</li></ul></li><li><p>持久链接 Keep-Alive。</p><ul><li>HTTP协议采用请求-应答模式，普通模式每个应答 客户端和服务器都要新建一个链接，完成之后立即断开链接</li><li>实用Keep-Alive模式时 客户端-服务端的连接持续有效，当有对服务器其他请求，避免新建或重新建立连接</li></ul></li><li>管线化<ul><li>管线化机制是通过持久化连接完成，仅Http 1.1 支持</li><li>只有GET/HEAD请求可以进行管线化，POST有所限制</li><li>初次建立连接不启动管线机制，因为服务器不一定支持http1.1的协议</li><li>管线化不影响应到来的顺序，请求1，请求2，请求3，响应1，响应2，响应3</li><li>Http1.1 要求服务器支持管线化，不是要求服务器端对相应进行管线化的处理，只是要求 管线化的请求 不处理失败。就是支持处理管线化的请求，不要求对相应消息管线化</li><li>开启管线化可能并不会带来大幅度的性能提升，而且很多服务器和代理程序对管线化支持并不好，因此Chrome/Firefox 默认不开启管线化支持</li></ul></li></ul><blockquote><p>原型链</p></blockquote><ul><li>原型 构造函数 实例 原型链 的关系</li></ul><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-02%20%E4%B8%8B%E5%8D%8810.36.52.png" alt="屏幕快照 2018-12-02 下午10.36.52"></p><ul><li><p>instanceof 的原理<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-02%20%E4%B8%8B%E5%8D%8810.40.31.png" alt="屏幕快照 2018-12-02 下午10.40.31"></p></li><li><p>new运算符原理<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-02%20%E4%B8%8B%E5%8D%8810.41.29.png" alt="屏幕快照 2018-12-02 下午10.41.29"></p></li><li><p>代码类似如下<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-28%20%E4%B8%8A%E5%8D%886.42.28.png" alt="屏幕快照 2018-11-28 上午6.42.28"></p></li></ul><blockquote><p> 类的声明-实例 | 类的继承(如何实现，继承的几种方式)</p></blockquote><ul><li><p>借助构造函数实现继承</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function <span class="type">Parent1</span>()&#123;</span><br><span class="line">  this.name = 'parent1'</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Parent1</span>.prototype.say = function () &#123;</span><br><span class="line">  console.log('test say')</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="type">Child1</span>()&#123;</span><br><span class="line">  <span class="type">Parent1</span>.call(this);  <span class="comment">// apply</span></span><br><span class="line">  this.type = 'child1'</span><br><span class="line">&#125;</span><br><span class="line">问题：</span><br><span class="line">只继承了父类的属性，没有继承父类的原型属性和方法</span><br></pre></td></tr></table></figure></li><li><p>2:借助原型链实现继承</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent2'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child2'</span></span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = Parent2.prototype</span><br><span class="line">缺点：继承了原型，但是实例属性没有继承</span><br></pre></td></tr></table></figure></li><li><p>3:(1/2)组合方式</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent3'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Parent3.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child3'</span></span><br><span class="line">&#125; </span><br><span class="line">Child3.prototype = Parent3.prototype</span><br><span class="line">构造器是父类的构造器</span><br></pre></td></tr></table></figure></li><li><p>4组合方式优化：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent4'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Parent3.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child4'</span></span><br><span class="line">&#125; </span><br><span class="line">Child4.prototype = <span class="built_in">Object</span>.create(Parent4.prototype)</span><br><span class="line">Child4.prototype.constructor = Child4</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>同源策略及限制</p></blockquote><ul><li>前后端如何通信<ul><li>同源策略限制从一个源加载的文档或脚本如何与另一个源的资源进行交互；是用于隔离潜在恶意文件中国呢的关键的安全机制</li><li>Cookie LocalStorage IndexDB无法读取；DOM无法获得；AJAX请求不能发送 </li><li>通过：Ajax;WebScoket;CORS; </li></ul></li><li>如何创建Ajax<ul><li>XMLHttpRequest 对象的工作流程</li><li>兼容性处理</li><li>事件的触发条件</li><li>事件的触发顺序 </li></ul></li><li><p>跨域通信的几种方式 </p><ul><li><p>jsonp<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%886.56.42.png" alt="屏幕快照 2018-11-29 上午6.56.42"></p></li><li><p>hash<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%886.58.12.png" alt="屏幕快照 2018-11-29 上午6.58.12"></p></li><li>postmessage<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%886.58.25.png" alt="屏幕快照 2018-11-29 上午6.58.25"></li><li>webScoket<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%886.59.16.png" alt="屏幕快照 2018-11-29 上午6.59.16"></li><li>CORS<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%887.00.19.png" alt="屏幕快照 2018-11-29 上午7.00.19"></li></ul></li><li><p>安全类</p><ul><li>CSRF 跨站请求伪造 cross-site-request-forgery 引诱点击</li><li>XSS 跨域脚本攻击 cross-site-scripting (攻击原理 防御措施) </li><li>CSRF的防御措施 Token验证| Referer 验证 | 隐藏令牌</li></ul></li><li><p>算法类</p><ul><li>排序(快速排序/选择排序/希尔排序)</li><li>堆栈/队列/链表</li><li>递归</li><li>波兰式和逆波兰式</li></ul></li></ul><blockquote><p>渲染机制/运行机制/页面性能/错误监控 </p></blockquote><ul><li><p>渲染机制 DOCTYPE-&gt;浏览器渲染过程-&gt;重排Reflow-&gt;重绘Repaint-&gt;布局Layout<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%887.06.43.png" alt="屏幕快照 2018-11-29 上午7.06.43"></p><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%887.07.35.png" alt="屏幕快照 2018-11-29 上午7.07.35"></p><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%887.07.59.png" alt="屏幕快照 2018-11-29 上午7.07.59"></p></li><li><p>JS运行机制 单线程 / 任务队列 / EventLoop</p><ul><li><p>打印A，死循环不会输出B，单线程 编译主文档之后才会走异步队列<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8A%E5%8D%887.09.27.png" alt="屏幕快照 2018-11-29 上午7.09.27"></p></li><li><p>输入4 个 4<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8B%E5%8D%889.13.57.png" alt="屏幕快照 2018-11-29 下午9.13.57"></p></li></ul></li><li><p>JS异步任务 <code>setTimeout</code> 和 <code>setInterval</code> | DOM事件 | ES6的Promise   </p></li><li><p>理解哪些语句会放入异步任务队列</p></li><li>理解语句放入异步任务队列的时机</li></ul><blockquote><p>页面性能类</p></blockquote><ul><li>提升性能的 方法有哪些<ul><li>资源压缩合并 减少HTT请求</li><li>非核心资源异步加载|异步加载的方式 | 异步加载的区别</li><li>使用CDN</li><li>预解析DNS </li></ul></li><li>异步加载的方式： 动态脚本加载|defer| async<ul><li>defer会在HTML解析完成之后才会执行 如果多个按加载的顺序执行</li><li>async 加载完成之后立即执行 如果是多个执行顺序和加载顺序无关。加载完成时间 看async的资源多少</li></ul></li><li>缓存的分类 强缓存|协商缓存<ul><li>强缓存 (Expiree Cache-Control)</li><li>协商缓存(Last-modified if-Moldified-Since Etag if-None-Match)</li></ul></li></ul><blockquote><p>错误监控类(错误的分类|错误的捕获方式|上报错误的基本原理)</p></blockquote><ul><li>错误的分类分两种：即时运行错误代码错误 资源加载错误</li><li>运行错误的捕获方式：<code>try catch</code> | <code>window.onerror</code></li><li>资源加载错误的捕获方式<code>object.onerror</code> | <code>peformance.getEntries()</code> | <code>Error</code>时间捕获</li><li>跨域JS运行错误的捕获处理? 错误信息<code>Script error</code> 处理：1.在script标签中增加crossorigin 2设置JS资源响应头Access-Control-Allow-Origin</li><li>上报错误的基本原理：采用Ajax通信的方式上报 2采用Image 对象上报<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-29%20%E4%B8%8B%E5%8D%889.42.51.png" alt="屏幕快照 2018-11-29 下午9.42.51"></li></ul><blockquote><p>其他总结：</p></blockquote><ul><li>业务能力 团对协作能力 事务推动能力 待人能力 其他能力  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ECharts + Vue 配置使用总结</title>
      <link href="/2018/10/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/Echarts/"/>
      <url>/2018/10/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/Echarts/</url>
      
        <content type="html"><![CDATA[<h1 id="ECharts"><a href="#ECharts" class="headerlink" title="ECharts"></a>ECharts</h1><blockquote><p><a href="https://echarts.baidu.com/option.html#title" target="_blank" rel="noopener">文档</a> 高度个性化定制的数据可视化图表<br>本文主要介绍柱状图、折线图、饼图、圆环图、雷达图、中国地图等</p></blockquote><h1 id="主要共用配置的参数"><a href="#主要共用配置的参数" class="headerlink" title="主要共用配置的参数"></a>主要共用配置的参数</h1><blockquote><p>ECharts 需要给固定宽高 才能显示，固定的像素或百分比都可以<br>图从上到下配置参数：</p></blockquote><h3 id="1-title-标题组件"><a href="#1-title-标题组件" class="headerlink" title="1.title 标题组件"></a>1.title 标题组件</h3><ul><li>包含主标题和副标题  textStyle 中的rich 可以换行符文本插入图标等功能<br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%881.25.30.png?30" alt="屏幕快照 2019-01-12 下午1.25.30"></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">title:&#123;</span><br><span class="line">    text:<span class="string">'标题大号字体'</span>,</span><br><span class="line">    subtext:<span class="string">'第二行标题小号字体'</span>,</span><br><span class="line">    textStyle:&#123;</span><br><span class="line">       color:<span class="string">'red'</span>,</span><br><span class="line">       fontSize:<span class="number">14</span>,</span><br><span class="line">       fontWeight:<span class="string">'bolder'</span></span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    subtextStyle:&#123;</span><br><span class="line">        color:<span class="string">'red'</span>,</span><br><span class="line">       fontSize:<span class="number">12</span>,</span><br><span class="line">       fontWeight:<span class="string">'bolder'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 主副标题之间的间距</span></span><br><span class="line">    itemGap:<span class="number">5</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-legend-图例组件"><a href="#2-legend-图例组件" class="headerlink" title="2.legend 图例组件"></a>2.legend 图例组件</h3><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%881.25.40.png?30" alt="屏幕快照 2019-01-12 下午1.25.40"></p><ul><li>位置修改，上下左右</li><li><code>type</code>  普通图例plain；或多的时候 滚动scroll </li><li><code>textStyle</code>文字大小 颜色</li><li><code>orient</code> 横向布局 纵向布局horizontal/vertical；</li><li><code>itemGap</code> 图形间距</li><li><code>itemWidth</code> 默认时25 和高度不一样。柱状图的图例icon修改成正方形圆角 线图图例icon修改成圆形 可以修改宽高相同</li></ul><h3 id="3-grid-直角坐标系"><a href="#3-grid-直角坐标系" class="headerlink" title="3.grid 直角坐标系"></a>3.grid 直角坐标系</h3><blockquote><p>一般控制使用 上下边距留白 控制实际坐标系的范围</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid</span>: &#123;</span><br><span class="line">  <span class="comment">// left: '30.09%',</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="string">'32%'</span>,</span><br><span class="line">  <span class="attribute">right</span>: <span class="string">'1%'</span>,</span><br><span class="line">  <span class="attribute">top</span>: <span class="string">'50px'</span>,</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="string">'4%'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-xAxis-X轴"><a href="#4-xAxis-X轴" class="headerlink" title="4.xAxis X轴"></a>4.xAxis X轴</h3><blockquote><p>xAxis 的几个属性/类型</p></blockquote><ul><li>是否显示<code>show</code> ，</li><li><code>position</code> x 轴的位置 top/bottom</li><li><code>name</code> | <code>nameLocation</code> 坐标轴名称 位置 在头尾 可以使用在提示 坐标轴的意义提示</li><li><code>splitNumber</code> 强制分割数字</li><li><code>max</code> | <code>min</code> 设置最大值 最小值 防止数据显示问题</li><li><code>axisLine</code>  坐标轴轴线 是否显示 样式</li><li><code>axisTick</code> 坐标轴刻度 是否显示 </li><li><code>axisLabel</code> 刻度标签 是否显示，太拥挤间隔显示，是否显示最大值<code>showMaxLabel</code>/最小值<code>showMinLabel</code> <code>formatter</code>的转纵向显示，<code>rich</code>富文本格式显示</li><li><code>splitLine</code> 分隔线 是否显示 样式</li><li><code>data</code> 数据源 日期 number等</li></ul><h3 id="5-yAxis-Y轴"><a href="#5-yAxis-Y轴" class="headerlink" title="5.yAxis Y轴"></a>5.yAxis Y轴</h3><blockquote><p>Y轴 和X轴设置类似<br>Y轴有可能是多个Y轴，多个间隔线会重叠</p></blockquote><ul><li>多个坐标Y轴，在series 的每个数据源属于那个Y轴 <code>yAxisIndex: 0</code></li><li>如果两个的 splitLine 都显示，会比较乱，保留一个就可以</li><li>有个思路 增加三个Y轴，计算偏移量，当作纵向的参考线</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">yAxis: [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    min: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.min * <span class="number">0.8</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    max: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.max * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    min: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value.min * <span class="number">0.8</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="6-series-系列列表设置数据"><a href="#6-series-系列列表设置数据" class="headerlink" title="6.series 系列列表设置数据"></a>6.series 系列列表设置数据</h3><blockquote><p>type 为 line/bar/pie/radar/gauge</p></blockquote><h3 id="7-tooltip-鼠标悬浮提示框"><a href="#7-tooltip-鼠标悬浮提示框" class="headerlink" title="7.tooltip 鼠标悬浮提示框"></a>7.tooltip 鼠标悬浮提示框</h3><blockquote><p>formatter 传入 params  根据具体系列显示提示 换行使用 <br></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tooltip: &#123;</span><br><span class="line">      trigger: <span class="string">'axis'</span>,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> index = names.indexOf(params[<span class="number">0</span>].name)</span><br><span class="line">          <span class="keyword">var</span> valiue1 = datas2[index];</span><br><span class="line">          <span class="keyword">var</span> valiue2 = totData[index];</span><br><span class="line">          <span class="comment">//   params[0].value  -&gt; valiue1</span></span><br><span class="line">          <span class="keyword">return</span>  params[<span class="number">0</span>].name + <span class="string">'&lt;br /&gt;'</span> +</span><br><span class="line">                  params[<span class="number">0</span>].seriesName  + <span class="string">':'</span>  + valiue1 +  <span class="string">'%'</span> +  <span class="string">'&lt;br /&gt;'</span> +</span><br><span class="line">                  params[<span class="number">1</span>].seriesName  + <span class="string">':'</span>  +  valiue2 + <span class="string">'%'</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h1><h3 id="1-标准柱状图实例1"><a href="#1-标准柱状图实例1" class="headerlink" title="1.标准柱状图实例1"></a>1.标准柱状图实例1</h3><blockquote><p><a href="https://echarts.baidu.com/examples/editor.html?c=bar-gradient" target="_blank" rel="noopener">官方文档示例</a></p></blockquote><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%8812.32.54.png" alt="屏幕快照 2019-01-12 下午12.32.54"></p><ul><li>两个柱状图重叠 背景柱状图设置<code>barGap:&#39;-100%&#39;</code> </li><li>颜色渐变 使用 <code>echarts.graphic.LinearGradient</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">    &#123; <span class="comment">// For shadow</span></span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;<span class="attr">color</span>: <span class="string">'rgba(0,0,0,0.05)'</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        barGap:<span class="string">'-100%'</span>,</span><br><span class="line">        barCategoryGap:<span class="string">'40%'</span>,</span><br><span class="line">        data: dataShadow,</span><br><span class="line">        animation: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">                    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">                    [</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'#83bff6'</span>&#125;,</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="number">0.5</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;,</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                )</span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">                    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">                    [</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'#2378f7'</span>&#125;,</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="number">0.7</span>, <span class="attr">color</span>: <span class="string">'#2378f7'</span>&#125;,</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#83bff6'</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-标准柱状图实例2"><a href="#2-标准柱状图实例2" class="headerlink" title="2.标准柱状图实例2"></a>2.标准柱状图实例2</h3><blockquote><p><a href="https://echarts.baidu.com/examples/editor.html?c=bar1" target="_blank" rel="noopener">官方文档示例</a></p></blockquote><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%8812.40.40.png" alt="屏幕快照 2019-01-12 下午12.40.40"></p><ul><li><p>markPoint 两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>第一种方式 设置type 最大最小值平均值显示</span><br><span class="line"> markPoint : &#123;</span><br><span class="line">    data : [</span><br><span class="line">        &#123;<span class="attr">type</span> : <span class="string">'max'</span>, <span class="attr">name</span>: <span class="string">'最大值'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">type</span> : <span class="string">'min'</span>, <span class="attr">name</span>: <span class="string">'最小值'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span>设置 value ；  xAxis X轴的现实列数  yAxis 显示的位置值 和value近似</span><br><span class="line">markPoint : &#123;</span><br><span class="line">    data : [</span><br><span class="line">        &#123;<span class="attr">name</span> : <span class="string">'年最高'</span>, <span class="attr">value</span> : <span class="number">182.2</span>, <span class="attr">xAxis</span>: <span class="number">7</span>, <span class="attr">yAxis</span>: <span class="number">183</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span> : <span class="string">'年最低'</span>, <span class="attr">value</span> : <span class="number">6.4</span>, <span class="attr">xAxis</span>: <span class="number">10</span>, <span class="attr">yAxis</span>: <span class="number">6</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>markLine 两种方式设置</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>设置type 最大值，最小值 平均值，自使用显示位置</span><br><span class="line">markLine : &#123;</span><br><span class="line">    symbol:<span class="string">'none'</span>,</span><br><span class="line">    symbolSize:<span class="number">10</span>,</span><br><span class="line">    lineStyle:&#123;</span><br><span class="line">        color:<span class="string">'#B20116 '</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    label:&#123;</span><br><span class="line">        fontSize:<span class="number">9</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    data : [</span><br><span class="line">        &#123;<span class="attr">type</span> : <span class="string">'average'</span>, <span class="attr">name</span>: <span class="string">'平均值'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span>设置固定的位置 data 中是数组，其中一项是一条线 ，每一项又是一个数组 是个个点点组成，设置起点和终点 就是一条线</span><br><span class="line">markLine : &#123;</span><br><span class="line">    symbol:<span class="string">'none'</span>,</span><br><span class="line">    symbolSize:<span class="number">10</span>,</span><br><span class="line">    lineStyle:&#123;</span><br><span class="line">        color:<span class="string">'#B20116 '</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    label:&#123;</span><br><span class="line">        fontSize:<span class="number">9</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    data:[</span><br><span class="line">      [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'出险资产水平\n10%警戒线'</span>,</span><br><span class="line">            x: <span class="number">20</span>,</span><br><span class="line">            y: <span class="string">'67.2%'</span>, <span class="comment">// 70%</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            x: <span class="string">'88%'</span>,</span><br><span class="line">            y: <span class="string">'67.2%'</span> <span class="comment">// 46</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-综合Y轴柱状图"><a href="#3-综合Y轴柱状图" class="headerlink" title="3.综合Y轴柱状图"></a>3.综合Y轴柱状图</h3><blockquote><p>Y轴上有其他非文字数字 用fomatter关键函数处理</p></blockquote><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%881.23.36.png" alt="屏幕快照 2019-01-12 下午1.23.36"></p><ul><li>数据准备处理【颜色】【Y轴显示数据系name,number1,number2】【柱状图数据3个一个要真实值，一个是文字显示值，最后空数据显示】【根据实际值，百分比求出总值】【计算三个marketLine的值位置用Y轴】</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">var colors = [<span class="string">'#FF6B2C'</span>,<span class="string">'#BA70CC'</span>];</span><br><span class="line"><span class="comment">// 左侧Y轴</span></span><br><span class="line">var y1data = [</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'中国投资系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'中国中信系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'山西省国有资本投资运营系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'国家电网公司系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'北京国有资本经营管理中心系'</span>,<span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span>&#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'招商局系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'深圳市地铁系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'中国华能系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'上海国际系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'四川发展(控股)系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'辽宁成大系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'大连合兴投资系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'陕西湖业化工集团系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'深圳市江天企业管理咨询系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'中国坊织机械(集团)系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'北京车之家信息技术系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'江苏省国信资产管理系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'中国保利系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'北京银华水利投资管理'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;,</span><br><span class="line">            &#123; <span class="string">value:</span> <span class="string">'国家电力投资系'</span>, <span class="string">number1:</span> <span class="string">'3020'</span>, <span class="string">number:</span> <span class="string">'3000'</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 真实值</span></span><br><span class="line">var totData = [<span class="number">4920</span>,<span class="number">4810</span>,<span class="number">4790</span>,<span class="number">4680</span>,<span class="number">4570</span>,<span class="number">4460</span>,<span class="number">4350</span>,<span class="number">4240</span>,<span class="number">4130</span>,<span class="number">4020</span>,</span><br><span class="line">            <span class="number">3910</span>,<span class="number">3810</span>,<span class="number">3710</span>,<span class="number">3680</span>,<span class="number">3560</span>,<span class="number">3450</span>,<span class="number">3340</span>,<span class="number">3230</span>,<span class="number">3120</span>,<span class="number">3010</span></span><br><span class="line">] ;</span><br><span class="line"><span class="comment">// 左侧显示文字</span></span><br><span class="line">var showTextData = [</span><br><span class="line">    <span class="number">4922220</span>, <span class="number">4810</span>, <span class="number">4790</span>,<span class="number">4680</span>,<span class="number">4570</span>,<span class="number">4460</span>,<span class="number">4350</span>,<span class="number">4240</span>,<span class="number">4130</span>,<span class="number">4020</span>,<span class="number">3910</span>,<span class="number">3810</span>,<span class="number">3710</span>,<span class="number">3680</span>,</span><br><span class="line">    <span class="number">3560</span>,<span class="number">3450</span>,<span class="number">3340</span>,<span class="number">3230</span>,<span class="number">3120</span>,<span class="number">3010</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 空数据</span></span><br><span class="line">var empData = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算3条标志线位置</span></span><br><span class="line">var totNumber = <span class="number">28000</span>;</span><br><span class="line"></span><br><span class="line">var ttw = window.width * <span class="number">0.62</span></span><br><span class="line">var x1 = <span class="number">0.10</span> / <span class="number">0.22</span> * ttw</span><br><span class="line">var x2 = <span class="number">0.15</span> / <span class="number">0.22</span> * ttw</span><br><span class="line">var x3 = <span class="number">0.20</span> / <span class="number">0.22</span> * ttw</span><br></pre></td></tr></table></figure><ul><li>echats 中设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">option = &#123;</span><br><span class="line">        grid: &#123;</span><br><span class="line">            <span class="comment">// left: '33.09%',</span></span><br><span class="line">            left: <span class="string">'36.09%'</span>,</span><br><span class="line">            top: <span class="string">'30px'</span>,</span><br><span class="line">            right: <span class="string">'2%'</span>,</span><br><span class="line">            bottom: <span class="string">'20px'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            type: <span class="string">'value'</span>,</span><br><span class="line">            splitNumber: <span class="number">10</span>,</span><br><span class="line">            axisLine: &#123;</span><br><span class="line">                lineStyle: &#123;</span><br><span class="line">                    color: <span class="string">'#333'</span>,</span><br><span class="line">                    width: <span class="number">0.5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                <span class="comment">// show:false,</span></span><br><span class="line">                fontSize: <span class="number">10</span>,</span><br><span class="line">                showMaxLabel: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            axisTick: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            splitLine: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// max: function(value) &#123;</span></span><br><span class="line">            <span class="comment">//     return value.max * 1.2;</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">            max: totNumber * <span class="number">0.22</span></span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: [</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'category'</span>,</span><br><span class="line">                gridIndex: <span class="number">0</span>,</span><br><span class="line">                inverse: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                axisTick: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                splitLine: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                data: y1data,</span><br><span class="line">                axisLabel: &#123;</span><br><span class="line">                    formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// return '&#123;' + value + '| &#125;\n&#123;value|' + value + '&#125;';</span></span><br><span class="line">                        <span class="function"><span class="keyword">function</span> <span class="title">mapName</span>(<span class="params">avalue</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> avalue.value</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">let</span> aindx = y1data.map(mapName).indexOf(pramas)</span><br><span class="line">                        <span class="keyword">let</span> adic = y1data[aindx]</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> (</span><br><span class="line">                            <span class="string">'&#123;name|'</span> + pramas + <span class="string">'&#125;'</span> + <span class="string">' '</span> +</span><br><span class="line">                            <span class="string">'&#123;index|'</span> + (aindx + <span class="number">1</span>) + <span class="string">'&#125;'</span> + <span class="string">'  '</span> +</span><br><span class="line">                            <span class="string">'&#123;bar|'</span> +  adic.number1 +  <span class="string">'&#125;'</span> + <span class="string">'       '</span> +</span><br><span class="line">                            <span class="string">'&#123;numbertext|'</span> + adic.number + <span class="string">'&#125;'</span></span><br><span class="line">                        )</span><br><span class="line">                    &#125;,</span><br><span class="line">                    margin: <span class="number">2</span>,</span><br><span class="line">                    align: <span class="string">'right'</span>,</span><br><span class="line">                    rich: &#123;</span><br><span class="line">                        name: &#123;</span><br><span class="line">                            fontSize: <span class="number">10</span>,</span><br><span class="line">                            align: <span class="string">'right'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        index: &#123;</span><br><span class="line">                            align: <span class="string">'center'</span>,</span><br><span class="line">                            color: <span class="string">'#fff'</span>,</span><br><span class="line">                            fontSize: <span class="number">10</span>,</span><br><span class="line">                            backgroundColor: <span class="string">'#C8D6E7'</span>,</span><br><span class="line">                            borderRadius: <span class="number">2</span>,</span><br><span class="line">                            padding: [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                            width: <span class="number">10</span>,</span><br><span class="line">                            height: <span class="number">10</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        bar: &#123;</span><br><span class="line">                            align: <span class="string">'center'</span>,</span><br><span class="line">                            color: <span class="string">'#fff'</span>,</span><br><span class="line">                            fontSize: <span class="number">10</span>,</span><br><span class="line">                            backgroundColor: colors[<span class="number">0</span>],</span><br><span class="line">                            width: <span class="number">50</span>,</span><br><span class="line">                            height: <span class="number">14</span>,</span><br><span class="line">                            shadowColor: <span class="string">'#AECDFF'</span>,</span><br><span class="line">                            borderRadius: <span class="number">7</span>,</span><br><span class="line">                            shadowOffsetX: <span class="number">30</span>,</span><br><span class="line">                            padding: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        numbertext: &#123;</span><br><span class="line">                            align: <span class="string">'left'</span>,</span><br><span class="line">                            color: <span class="string">'#083CAF'</span>,</span><br><span class="line">                            fontSize: <span class="number">10</span>,</span><br><span class="line">                            margin: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                            width: <span class="number">40</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 10% - 15% - 20%</span></span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'value'</span>,</span><br><span class="line">                name: <span class="string">'10%'</span>,</span><br><span class="line">                zlevel: <span class="number">1</span>,</span><br><span class="line">                nameGap: <span class="number">12</span>,</span><br><span class="line">                nameTextStyle: &#123;</span><br><span class="line">                    color: <span class="string">'#fff'</span>,</span><br><span class="line">                    backgroundColor: <span class="string">'#51B9D2'</span>,</span><br><span class="line">                    borderRadius: <span class="number">8</span>,</span><br><span class="line">                    padding: [<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">                    fontSize: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                offset: -x1, <span class="comment">// -700,</span></span><br><span class="line"></span><br><span class="line">                axisTick: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                splitLine: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLabel: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLine: &#123;</span><br><span class="line">                    lineStyle: &#123;</span><br><span class="line">                        color: <span class="string">'#51B9D2'</span>,</span><br><span class="line">                        type: <span class="string">'dashed'</span>,</span><br><span class="line">                        shadowOffsetY: <span class="number">-25</span>,</span><br><span class="line">                        shadowColor: <span class="string">'#51B9D2'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'value'</span>,</span><br><span class="line">                name: <span class="string">'15%'</span>,</span><br><span class="line">                zlevel: <span class="number">1</span>,</span><br><span class="line">                nameGap: <span class="number">12</span>,</span><br><span class="line">                offset: -x2, <span class="comment">// -750,</span></span><br><span class="line">                nameTextStyle: &#123;</span><br><span class="line">                    color: <span class="string">'#fff'</span>,</span><br><span class="line">                    backgroundColor: <span class="string">'#E29519'</span>,</span><br><span class="line">                    borderRadius: <span class="number">8</span>,</span><br><span class="line">                    padding: [<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">                    fontSize: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisTick: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                splitLine: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLabel: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLine: &#123;</span><br><span class="line">                    lineStyle: &#123;</span><br><span class="line">                        color: <span class="string">'#E29519'</span>,</span><br><span class="line">                        type: <span class="string">'dashed'</span>,</span><br><span class="line">                        shadowOffsetY: <span class="number">-25</span>,</span><br><span class="line">                        shadowColor: <span class="string">'#E29519'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'value'</span>,</span><br><span class="line">                name: <span class="string">'20%'</span>,</span><br><span class="line">                nameGap: <span class="number">12</span>,</span><br><span class="line">                zlevel: <span class="number">1</span>,</span><br><span class="line">                offset: -x3, <span class="comment">// -800,</span></span><br><span class="line">                nameTextStyle: &#123;</span><br><span class="line">                    color: <span class="string">'#fff'</span>,</span><br><span class="line">                    backgroundColor: <span class="string">'#B20116'</span>,</span><br><span class="line">                    borderRadius: <span class="number">8</span>,</span><br><span class="line">                    padding: [<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">                    fontSize: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisTick: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                splitLine: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLabel: &#123;</span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLine: &#123;</span><br><span class="line">                    lineStyle: &#123;</span><br><span class="line">                        color: <span class="string">'#B20116'</span>,</span><br><span class="line">                        type: <span class="string">'dashed'</span>,</span><br><span class="line">                        shadowOffsetY: <span class="number">-25</span>,</span><br><span class="line">                        shadowColor: <span class="string">'#B20116'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        series: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'name1'</span>,</span><br><span class="line">                stack: <span class="string">'空值'</span>,</span><br><span class="line">                type: <span class="string">'bar'</span>,</span><br><span class="line">                barMinHeight: <span class="number">40</span>,</span><br><span class="line">                barWidth: <span class="string">'12px'</span>,</span><br><span class="line"></span><br><span class="line">                yAxisIndex: <span class="number">0</span>,</span><br><span class="line">                color: colors[<span class="number">1</span>],</span><br><span class="line">                label: &#123;</span><br><span class="line">                    show: <span class="literal">true</span>,</span><br><span class="line">                    fontSize: <span class="number">10</span>,</span><br><span class="line">                    position: <span class="string">'insideLeft'</span>,</span><br><span class="line">                    padding: <span class="number">5</span>,</span><br><span class="line">                    formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// let stta =  (totData[pramas.dataIndex]/totNumber * 100).toFixed(2) + '%'</span></span><br><span class="line">                        <span class="keyword">return</span> showTextData[pramas.dataIndex]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                data: totData</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'name2'</span>,</span><br><span class="line">                type: <span class="string">'bar'</span>,</span><br><span class="line"></span><br><span class="line">                stack: <span class="string">'空值'</span>,</span><br><span class="line">                yAxisIndex: <span class="number">0</span>,</span><br><span class="line">                color: <span class="string">'clear'</span>,</span><br><span class="line">                label: &#123;</span><br><span class="line">                    show: <span class="literal">true</span>,</span><br><span class="line">                    fontSize: <span class="number">10</span>,</span><br><span class="line">                    position: <span class="string">'right'</span>,</span><br><span class="line">                    color: <span class="string">'#333'</span>,</span><br><span class="line">                    formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">let</span> stta =  (totData[pramas.dataIndex]/totNumber * <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">'%'</span></span><br><span class="line">                        <span class="comment">// let anumber = (</span></span><br><span class="line">                        <span class="comment">// Number(y1data[pramas.dataIndex].percent) * 100</span></span><br><span class="line">                        <span class="comment">// ).toFixed(2)</span></span><br><span class="line">                        <span class="comment">// var stta = '   ' + anumber + '%'</span></span><br><span class="line">                        <span class="keyword">return</span> stta</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                data: empData</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-堆叠柱状图-多组合柱状图"><a href="#4-堆叠柱状图-多组合柱状图" class="headerlink" title="4.堆叠柱状图/多组合柱状图"></a>4.堆叠柱状图/多组合柱状图</h3><blockquote><p>堆叠柱状图 只有X轴 Y轴不显示，分割线不显示</p></blockquote><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%881.37.59.png" alt="屏幕快照 2019-01-12 下午1.37.59"></p><ul><li>堆叠柱状图设置option代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> char1XData = [ <span class="string">'2017-12'</span>, <span class="string">'2018-01'</span>, <span class="string">'2018-02'</span>, <span class="string">'2018-03'</span>,<span class="string">'2018-04'</span>,<span class="string">'2018-05'</span>,<span class="string">'2018-06'</span>]</span><br><span class="line"><span class="keyword">var</span> char1Bar1 = [<span class="number">22</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"><span class="keyword">var</span> char1Bar2 = [<span class="number">22</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">option = &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: <span class="string">'单位：亿元'</span>,</span><br><span class="line">          right: <span class="number">280</span>,</span><br><span class="line">          textStyle: &#123;</span><br><span class="line">            fontFamily: <span class="string">'PingFangSC-Regular'</span>,</span><br><span class="line">            fontWeight: <span class="string">'normal'</span>,</span><br><span class="line">            fontSize: <span class="number">12</span>,</span><br><span class="line">            color: <span class="string">'#333333'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          trigger: <span class="string">'axis'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: [<span class="string">'好银行入池规模'</span>, <span class="string">'坏银行入池规模'</span>],</span><br><span class="line">          right: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">          left: <span class="string">'1%'</span>,</span><br><span class="line">          right: <span class="string">'3%'</span>,</span><br><span class="line">          bottom: <span class="string">'3%'</span>,</span><br><span class="line">          containLabel: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: <span class="string">'category'</span>,</span><br><span class="line">          data: char1XData,</span><br><span class="line">          boundaryGap: [<span class="string">'5%'</span>, <span class="string">'5%'</span>],</span><br><span class="line">          axisLine: &#123;</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">              color: <span class="string">'#333'</span>,</span><br><span class="line">              width: <span class="number">0.5</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          axisLabel: &#123;</span><br><span class="line">            <span class="comment">// show:false,</span></span><br><span class="line">            fontSize: <span class="number">9</span>,</span><br><span class="line">            interval: <span class="number">0</span>,</span><br><span class="line">            <span class="comment">// rotate: 30</span></span><br><span class="line">          &#125;,</span><br><span class="line">          axisTick: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          splitLine: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">          axisLine: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          axisLabel: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          axisTick: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          splitLine: &#123;</span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'好银行入池规模'</span>,</span><br><span class="line">            type: <span class="string">'bar'</span>,</span><br><span class="line">            yAxisIndex: <span class="number">0</span>,</span><br><span class="line">            barWidth: <span class="number">20</span>,</span><br><span class="line">            barMinHeight: <span class="number">15</span>,</span><br><span class="line">            stack: <span class="string">'bar1'</span>,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: <span class="literal">true</span>,</span><br><span class="line">              fontSize: <span class="number">10</span>,</span><br><span class="line">              position: <span class="string">'inside'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              color: <span class="string">'#FF6B2C'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: char1Bar1</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'坏银行入池规模'</span>,</span><br><span class="line">            type: <span class="string">'bar'</span>,</span><br><span class="line">            yAxisIndex: <span class="number">0</span>,</span><br><span class="line">            barWidth: <span class="number">20</span>,</span><br><span class="line">            barMinHeight: <span class="number">15</span>,</span><br><span class="line">            stack: <span class="string">'bar1'</span>,</span><br><span class="line">            label: &#123;</span><br><span class="line">              show: <span class="literal">true</span>,</span><br><span class="line">              fontSize: <span class="number">10</span>,</span><br><span class="line">              position: <span class="string">'inside'</span>,</span><br><span class="line">              color: <span class="string">'#333'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              color: <span class="string">'#FFDCC0'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: char1Bar2</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>三组数据 不重叠显示option代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> char2XData = [<span class="string">'2017-09'</span>, <span class="string">'2017-10'</span>,<span class="string">'2017-11'</span>,<span class="string">'2017-12'</span>,<span class="string">'2018-01'</span>,<span class="string">'2018-02'</span>,<span class="string">'2018-03'</span>,<span class="string">'2018-04'</span>,<span class="string">'2018-05'</span>,<span class="string">'2018-06'</span>,<span class="string">'2018-07'</span>]</span><br><span class="line"><span class="keyword">var</span> char2Bar1 = [<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> char2Bar2 = [<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> char2Bar3 = [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      text: <span class="string">'单位：亿元'</span>,</span><br><span class="line">      right: <span class="number">450</span>,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        fontFamily: <span class="string">'PingFangSC-Regular'</span>,</span><br><span class="line">        fontWeight: <span class="string">'normal'</span>,</span><br><span class="line">        fontSize: <span class="number">12</span>,</span><br><span class="line">        color: <span class="string">'#333333'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: <span class="string">'axis'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      data: [<span class="string">'好银行到坏银行规模'</span>, <span class="string">'好银行出池规模'</span>, <span class="string">'坏银行出池规模'</span>],</span><br><span class="line">      right: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: <span class="string">'1%'</span>,</span><br><span class="line">      right: <span class="string">'3%'</span>,</span><br><span class="line">      bottom: <span class="string">'3%'</span>,</span><br><span class="line">      containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: <span class="string">'category'</span>,</span><br><span class="line">      data: char2XData,</span><br><span class="line">      boundaryGap: [<span class="string">'5%'</span>, <span class="string">'5%'</span>],</span><br><span class="line"></span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        <span class="comment">// show:false,</span></span><br><span class="line">        fontSize: <span class="number">9</span>,</span><br><span class="line">        color: <span class="string">'#333333'</span>,</span><br><span class="line">        interval: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// rotate: 30</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      splitLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      splitLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'好银行到坏银行规模'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">0</span>,</span><br><span class="line">        barWidth: <span class="number">15</span>,</span><br><span class="line">        barMinHeight: <span class="number">15</span>,</span><br><span class="line">        barGap: <span class="number">0.05</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span>,</span><br><span class="line">          offset: [<span class="number">-5</span>, <span class="number">0</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#6678E7'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Bar1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'好银行出池规模'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">0</span>,</span><br><span class="line">        barWidth: <span class="number">15</span>,</span><br><span class="line">        barMinHeight: <span class="number">15</span>,</span><br><span class="line">        barGap: <span class="number">0.05</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#BA70CC'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Bar2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'坏银行出池规模'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">0</span>,</span><br><span class="line">        barWidth: <span class="number">15</span>,</span><br><span class="line">        barMinHeight: <span class="number">15</span>,</span><br><span class="line">        barGap: <span class="number">0.05</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span>,</span><br><span class="line">          offset: [<span class="number">5</span>, <span class="number">0</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#AECDFF'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Bar3</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-横向堆叠柱状图"><a href="#5-横向堆叠柱状图" class="headerlink" title="5.横向堆叠柱状图"></a>5.横向堆叠柱状图</h3><blockquote><p>跟上面的横向类似，但是又堆叠数据，背景数据 可以设置barGap:’-100%’ 当作背景 </p></blockquote><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%881.48.15.png" alt="屏幕快照 2019-01-12 下午1.48.15"></p><ul><li><code>option</code>设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y1data = [ &#123; <span class="attr">value</span>: <span class="string">'中国投资系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'中国中信系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'山西省国有资本投资运营系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'国家电网公司系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'北京国有资本经营管理中心系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'招商局系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'深圳市地铁系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'中国华能系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'上海国际系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'四川发展(控股)系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'辽宁成大系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'大连合兴投资系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'陕西湖业化工集团系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'深圳市江天企业管理咨询系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'中国坊织机械(集团)系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'北京车之家信息技术系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'江苏省国信资产管理系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'中国保利系'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'北京银华水利投资管理'</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">value</span>: <span class="string">'国家电力投资系'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">var</span> totData = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0.101</span>]</span><br><span class="line"><span class="keyword">var</span> bar1 =  [<span class="number">0.0001</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0.051</span>]</span><br><span class="line"><span class="keyword">var</span> bar2 =  [<span class="number">2.9999</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0.00001</span>]</span><br><span class="line"><span class="keyword">var</span> totNumber = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ttw = <span class="built_in">window</span>.width * <span class="number">0.27</span></span><br><span class="line"><span class="keyword">var</span> x2 = <span class="number">3</span> / <span class="number">7.0</span> * ttw</span><br><span class="line"><span class="keyword">var</span> x3 = <span class="number">5</span> / <span class="number">7.0</span> * ttw</span><br><span class="line">option = &#123;</span><br><span class="line">grid: &#123;</span><br><span class="line">  <span class="comment">// left: '30.09%',</span></span><br><span class="line">  left: <span class="string">'32%'</span>,</span><br><span class="line">  right: <span class="string">'1%'</span>,</span><br><span class="line">  top: <span class="string">'50px'</span>,</span><br><span class="line">  bottom: <span class="string">'4%'</span></span><br><span class="line">&#125;,</span><br><span class="line">xAxis: &#123;</span><br><span class="line">  type: <span class="string">'value'</span>,</span><br><span class="line">  splitNumber: <span class="number">10</span>,</span><br><span class="line">  axisLabel: &#123;</span><br><span class="line">    <span class="comment">// show:false,</span></span><br><span class="line">    fontSize: <span class="number">10</span>,</span><br><span class="line">    showMaxLabel: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  axisTick: &#123;</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  splitLine: &#123;</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  max: totNumber * <span class="number">0.07</span></span><br><span class="line">&#125;,</span><br><span class="line">yAxis: [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    gridIndex: <span class="number">0</span>,</span><br><span class="line">    inverse: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: y1data,</span><br><span class="line"></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      margin: <span class="number">8</span>,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// return '&#123;' + value + '| &#125;\n&#123;value|' + value + '&#125;';</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">mapName</span>(<span class="params">avalue</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> avalue.value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> aindx = y1data.map(mapName).indexOf(pramas)</span><br><span class="line">        <span class="comment">// let adic = y1data[aindx]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">'&#123;name|'</span> + pramas + <span class="string">'&#125;'</span> + <span class="string">' '</span> + <span class="string">'&#123;index|'</span> + (aindx + <span class="number">1</span>) + <span class="string">'&#125;'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      rich: &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">          fontSize: <span class="number">9</span>,</span><br><span class="line">          align: <span class="string">'right'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        index: &#123;</span><br><span class="line">          align: <span class="string">'center'</span>,</span><br><span class="line">          color: <span class="string">'#fff'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          backgroundColor: <span class="string">'#C8D6E7'</span>,</span><br><span class="line">          borderRadius: <span class="number">2</span>,</span><br><span class="line">          padding: [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">          width: <span class="number">10</span>,</span><br><span class="line">          height: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//   3% - 5%</span></span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'value'</span>,</span><br><span class="line">    name: <span class="string">'3%'</span>,</span><br><span class="line">    nameGap: <span class="number">12</span>,</span><br><span class="line">    zlevel: <span class="number">1</span>,</span><br><span class="line">    offset:  <span class="number">-350</span>, <span class="comment">// -750,</span></span><br><span class="line">    nameTextStyle: &#123;</span><br><span class="line">      color: <span class="string">'#fff'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#E29519'</span>,</span><br><span class="line">      borderRadius: <span class="number">8</span>,</span><br><span class="line">      padding: [<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">      fontSize: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">'#E29519'</span>,</span><br><span class="line">        type: <span class="string">'dashed'</span>,</span><br><span class="line">        shadowOffsetY: <span class="number">-25</span>,</span><br><span class="line">        shadowColor: <span class="string">'#E29519'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'value'</span>,</span><br><span class="line">    name: <span class="string">'5%'</span>,</span><br><span class="line">    nameGap: <span class="number">12</span>,</span><br><span class="line">    zlevel: <span class="number">1</span>,</span><br><span class="line">    offset: <span class="number">-180</span>, <span class="comment">// -800,</span></span><br><span class="line">    nameTextStyle: &#123;</span><br><span class="line">      color: <span class="string">'#fff'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#B20116'</span>,</span><br><span class="line">      borderRadius: <span class="number">8</span>,</span><br><span class="line">      padding: [<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">      fontSize: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">'#B20116'</span>,</span><br><span class="line">        type: <span class="string">'dashed'</span>,</span><br><span class="line">        shadowOffsetY: <span class="number">-25</span>,</span><br><span class="line">        shadowColor: <span class="string">'#B20116'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">series: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'name1'</span>,</span><br><span class="line">    type: <span class="string">'bar'</span>,</span><br><span class="line">    barWidth: <span class="string">'12px'</span>,</span><br><span class="line">    stack: <span class="string">'fengxinan'</span>,</span><br><span class="line">    zlevel: <span class="number">2</span>,</span><br><span class="line">    yAxisIndex: <span class="number">0</span>,</span><br><span class="line">    color: <span class="string">'#FF6B2C'</span>,</span><br><span class="line">    label: &#123;</span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      fontSize: <span class="number">10</span>,</span><br><span class="line">      position: <span class="string">'insideLeft'</span>,</span><br><span class="line">      padding: <span class="number">2</span>,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> v1 = totData[pramas.dataIndex].leftInner</span><br><span class="line">        <span class="keyword">return</span> v1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: bar2</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'name2'</span>,</span><br><span class="line">    type: <span class="string">'bar'</span>,</span><br><span class="line">    barWidth: <span class="string">'12px'</span>,</span><br><span class="line">    stack: <span class="string">'fengxinan'</span>,</span><br><span class="line"></span><br><span class="line">    yAxisIndex: <span class="number">0</span>,</span><br><span class="line">    color: <span class="string">'#FFDABB'</span>,</span><br><span class="line">    label: &#123;</span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      fontSize: <span class="number">10</span>,</span><br><span class="line">      position: <span class="string">'right'</span>,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> v1 = totData[pramas.dataIndex]</span><br><span class="line">           <span class="keyword">var</span> stta =  (totData[pramas.dataIndex] / totNumber * <span class="number">100</span>).toFixed(<span class="number">2</span>) +  <span class="string">'%'</span></span><br><span class="line">           <span class="keyword">if</span> ( (totData[pramas.dataIndex] / totNumber * <span class="number">100</span>).toFixed(<span class="number">2</span>) &lt; <span class="number">0.5</span> ) &#123;</span><br><span class="line">               v1 = <span class="string">'             '</span> + v1</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   let v1 = Number(totData[pramas.dataIndex].value).toFixed(0)</span></span><br><span class="line">        <span class="comment">//   let tem1 = totData[pramas.dataIndex].percent</span></span><br><span class="line">        <span class="comment">//   let stta = (Number(tem1) * 100).toFixed(2) + '%'</span></span><br><span class="line">        <span class="comment">//   if ((Number(tem1) * 100).toFixed(1) &lt; 0.5) &#123;</span></span><br><span class="line">        <span class="comment">//     v1 = '             ' + v1</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">          <span class="keyword">var</span> v2 = <span class="string">'('</span> + stta + <span class="string">')'</span></span><br><span class="line">          <span class="keyword">return</span> <span class="string">'&#123;value|'</span> + v1 + <span class="string">'&#125;'</span> + <span class="string">''</span> + <span class="string">'&#123;percent|'</span> + v2 + <span class="string">'&#125;'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rich: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">          align: <span class="string">'left'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">'#333'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        percent: &#123;</span><br><span class="line">          align: <span class="string">'left'</span>,</span><br><span class="line">          color: <span class="string">'#FF6B2C'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: bar1</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-堆叠柱状图-处理X轴-markLine"><a href="#6-堆叠柱状图-处理X轴-markLine" class="headerlink" title="6.堆叠柱状图 + 处理X轴 + markLine"></a>6.堆叠柱状图 + 处理X轴 + markLine</h3><blockquote><p>X轴文字换行；气泡；两条markLine</p></blockquote><ul><li>X轴文字还向 <code>value.split(&quot;&quot;).join(&quot;\n&quot;);</code></li><li>气泡  散点图样式是气泡 <code>type:&#39;scatter&#39;； symbol:&#39;pin&#39;</code></li><li>两条markLine 设置起点终点。</li></ul><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%882.47.33.png" alt="屏幕快照 2019-01-12 下午2.47.33"></p><ul><li>option 设置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"煤炭及煤制品煤炭及煤制品煤炭及煤制品"</span>,<span class="string">'建筑施工'</span>,<span class="string">'电力生产'</span>,<span class="string">'农林牧渔'</span>,<span class="string">'建材'</span>,<span class="string">'食品、餐饮及烟酒'</span>]               </span><br><span class="line"><span class="keyword">var</span> totData = [<span class="string">"100.00"</span>,<span class="string">'16.00'</span>,<span class="string">'4.00'</span>,<span class="string">'22.00'</span>,<span class="string">'20.00'</span>,<span class="string">'16.00'</span>]</span><br><span class="line"><span class="keyword">var</span> datas1 = [<span class="string">"0.00"</span>,<span class="string">'2.00'</span>,<span class="string">'2.00'</span>,<span class="string">'11.00'</span>,<span class="string">'10.00'</span>,<span class="string">'11.00'</span>]</span><br><span class="line"><span class="keyword">var</span> datas2 = [<span class="string">"100.00"</span>,<span class="string">'14.00'</span>,<span class="string">'2.00'</span>,<span class="string">'11.00'</span>,<span class="string">'10.00'</span>,<span class="string">'5.00'</span>]               </span><br><span class="line"><span class="keyword">var</span> datas3 = [<span class="string">"100.10"</span>, <span class="string">''</span>,<span class="string">'  4.10'</span>,  <span class="string">''</span>,   <span class="string">'20.10'</span>,<span class="string">''</span>]</span><br><span class="line"><span class="keyword">var</span> totNumber = <span class="number">100</span>;</span><br><span class="line">option = &#123;</span><br><span class="line">      tooltip: &#123;</span><br><span class="line">          trigger: <span class="string">'axis'</span>,</span><br><span class="line">          formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> index = names.indexOf(params[<span class="number">0</span>].name)</span><br><span class="line">              <span class="keyword">var</span> valiue1 = datas2[index];</span><br><span class="line">              <span class="keyword">var</span> valiue2 = totData[index];</span><br><span class="line">              <span class="comment">//   params[0].value  -&gt; valiue1</span></span><br><span class="line">              <span class="keyword">return</span>  params[<span class="number">0</span>].name + <span class="string">'&lt;br /&gt;'</span> +</span><br><span class="line">                      params[<span class="number">0</span>].seriesName  + <span class="string">':'</span>  + valiue1 +  <span class="string">'%'</span> +  <span class="string">'&lt;br /&gt;'</span> +</span><br><span class="line">                      params[<span class="number">1</span>].seriesName  + <span class="string">':'</span>  +  valiue2 + <span class="string">'%'</span>;</span><br><span class="line">              &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">          data:[<span class="string">'风险资产水平'</span>,<span class="string">'出险资产水平'</span>,<span class="string">'出险及风险资产水平超警戒线，集团限额监控行业'</span>],</span><br><span class="line">          right:<span class="number">10</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      grid: &#123;</span><br><span class="line">          top:<span class="string">'6%'</span>,</span><br><span class="line">          left: <span class="string">'5%'</span>,</span><br><span class="line">          right: <span class="string">'10%'</span>,</span><br><span class="line">          bottom: <span class="string">'26%'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xAxis: [</span><br><span class="line">          &#123;</span><br><span class="line">              type: <span class="string">'category'</span>,</span><br><span class="line">              <span class="comment">// name:"222",</span></span><br><span class="line">              data: names,</span><br><span class="line">              boundaryGap:[<span class="string">'1%'</span>, <span class="string">'5%'</span>],</span><br><span class="line">              gridIndex:<span class="number">0</span>,</span><br><span class="line">              axisLabel:&#123;</span><br><span class="line">                  interval:<span class="number">0</span>,</span><br><span class="line">                  formatter:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">                      <span class="keyword">return</span> value.split(<span class="string">""</span>).join(<span class="string">"\n"</span>);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  color:<span class="string">"#333"</span>,</span><br><span class="line">                  fontSize:<span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">              </span><br><span class="line">              axisTick:&#123;</span><br><span class="line">                  show:<span class="literal">false</span>,  </span><br><span class="line">              &#125;,</span><br><span class="line">              splitLine:&#123;</span><br><span class="line">                  show:<span class="literal">false</span>,  </span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">      ],</span><br><span class="line">      yAxis:&#123;</span><br><span class="line">              type: <span class="string">'value'</span>,</span><br><span class="line">              axisLine:&#123;</span><br><span class="line">                  show:<span class="literal">false</span>, </span><br><span class="line">              &#125;,</span><br><span class="line">              axisLabel:&#123;</span><br><span class="line">                  <span class="comment">// show:false, </span></span><br><span class="line">                  formatter: <span class="string">'&#123;value&#125;%'</span> ,</span><br><span class="line">                  fontSize:<span class="number">10</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              axisTick:&#123;</span><br><span class="line">                  show:<span class="literal">false</span>,  </span><br><span class="line">              &#125;,</span><br><span class="line">              splitNumber:<span class="number">10</span>,</span><br><span class="line">              splitLine:&#123;</span><br><span class="line">                  <span class="comment">// show:false,  </span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">// max: function(value) &#123;</span></span><br><span class="line">              <span class="comment">//     return value.max * 1.2;</span></span><br><span class="line">              <span class="comment">// &#125;,</span></span><br><span class="line">              max:totNumber,</span><br><span class="line">          </span><br><span class="line">      &#125;,</span><br><span class="line">      series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name:<span class="string">'出险资产水平'</span>,</span><br><span class="line">            type:<span class="string">'bar'</span>,</span><br><span class="line">            yAxisIndex:<span class="number">0</span>,</span><br><span class="line">            </span><br><span class="line">            barWidth:<span class="number">8</span>,</span><br><span class="line">            stack: <span class="string">'chuxianzichan'</span>,</span><br><span class="line">            </span><br><span class="line">            itemStyle:&#123;</span><br><span class="line">                color:<span class="string">"#3AA4FF"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            data:datas2,</span><br><span class="line">          &#125;, </span><br><span class="line">          &#123;</span><br><span class="line">            name:<span class="string">'风险资产水平'</span>,</span><br><span class="line">            type:<span class="string">'bar'</span>,</span><br><span class="line">            yAxisIndex:<span class="number">0</span>,</span><br><span class="line">            barWidth:<span class="number">8</span>,</span><br><span class="line">            stack: <span class="string">'chuxianzichan'</span>,</span><br><span class="line">            </span><br><span class="line">            itemStyle:&#123;</span><br><span class="line">                color:<span class="string">"#B1DBFF"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            data:datas1,</span><br><span class="line"></span><br><span class="line">            markLine:&#123;</span><br><span class="line">                symbol:<span class="string">'none'</span>,</span><br><span class="line">                symbolSize:<span class="number">12</span>,</span><br><span class="line">                lineStyle:&#123;</span><br><span class="line">                    color:<span class="string">'#FF6B2C '</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                label:&#123;</span><br><span class="line">                    fontSize:<span class="number">10</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                data:[</span><br><span class="line">                  [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: <span class="string">'出险资产水平\n10%警戒线'</span>,</span><br><span class="line">                        x: <span class="number">20</span>,</span><br><span class="line">                        y: <span class="string">'67.2%'</span>, <span class="comment">// 70%</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        x: <span class="string">'88%'</span>,</span><br><span class="line">                        y: <span class="string">'67.2%'</span> <span class="comment">// 46</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">                </span><br><span class="line">          &#123;</span><br><span class="line">              name:<span class="string">'出险及风险资产水平超警戒线，集团限额监控行业'</span>,</span><br><span class="line">              yAxisIndex: <span class="number">0</span>,</span><br><span class="line">          </span><br><span class="line">              type:<span class="string">'scatter'</span>,</span><br><span class="line">              symbol:<span class="string">'pin'</span>,</span><br><span class="line">              symbolSize:<span class="number">16</span>,</span><br><span class="line">              symbolKeepAspect:<span class="literal">true</span>,</span><br><span class="line">              data:datas3,</span><br><span class="line"></span><br><span class="line">              itemStyle:&#123;</span><br><span class="line">                  color:<span class="string">"#FF6B2C"</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              </span><br><span class="line">              markLine:&#123;</span><br><span class="line">                symbol:<span class="string">'none'</span>,</span><br><span class="line">                symbolSize:<span class="number">12</span>,</span><br><span class="line">                lineStyle:&#123;</span><br><span class="line">                    color:<span class="string">'#B20116'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                label:&#123;</span><br><span class="line">                    fontSize:<span class="number">10</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                data:[</span><br><span class="line">                  [</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: <span class="string">'风险资产水平\n20%警戒线'</span>,</span><br><span class="line">                        x: <span class="number">20</span>,</span><br><span class="line">                        y: <span class="string">'60.3%'</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        x: <span class="string">'88%'</span>,</span><br><span class="line">                        y: <span class="string">'60.3%'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ],</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">      ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><blockquote><p>单独的多折线图 / 柱状图折线图结合绘制</p></blockquote><h3 id="1-单独绘制"><a href="#1-单独绘制" class="headerlink" title="1.单独绘制"></a>1.单独绘制</h3><blockquote><p>三线图 修改X轴样式； 修改Y轴样式 不显示；修改3线颜色； 修改节点颜色</p></blockquote><ul><li>线的颜色 <code>itemStyle</code></li><li>修改线的宽度 <code>lineStyle: { width: 1}</code></li><li>修改节点颜色大小<code>symbol: &#39;circle&#39;, symbolSize: 8</code></li></ul><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%882.01.50.png" alt="屏幕快照 2019-01-12 下午2.01.50"></p><ul><li>option 设置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">char1XData</span> <span class="string">=</span> <span class="string">[</span> <span class="string">'2017-12'</span><span class="string">,</span>  <span class="string">'2018-01'</span><span class="string">,</span> <span class="string">'2018-02'</span><span class="string">,</span> <span class="string">'2018-03'</span><span class="string">,</span>  <span class="string">'2018-04'</span><span class="string">,</span> <span class="string">'2018-05'</span><span class="string">,</span> <span class="string">'2018-06'</span> <span class="string">]</span></span><br><span class="line"><span class="string">var</span> <span class="string">char1Line1</span> <span class="string">=</span> <span class="string">[2534,</span> <span class="number">2563</span><span class="string">,</span> <span class="number">2531</span><span class="string">,</span> <span class="number">2589</span><span class="string">,</span> <span class="number">2519</span><span class="string">,</span> <span class="number">2737</span><span class="string">,</span> <span class="number">2816</span><span class="string">]</span></span><br><span class="line"><span class="string">var</span> <span class="string">char1Line2</span> <span class="string">=</span> <span class="string">[2221,</span> <span class="number">2215</span><span class="string">,</span> <span class="number">2211</span><span class="string">,</span> <span class="number">2239</span><span class="string">,</span> <span class="number">2131</span><span class="string">,</span> <span class="number">2225</span><span class="string">,</span> <span class="number">2310</span><span class="string">]</span></span><br><span class="line"><span class="string">var</span> <span class="string">char1Line3</span> <span class="string">=</span> <span class="string">[313,</span> <span class="number">348</span><span class="string">,</span> <span class="number">320</span><span class="string">,</span> <span class="number">349</span><span class="string">,</span> <span class="number">388</span><span class="string">,</span> <span class="number">492</span><span class="string">,</span> <span class="number">506</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="string">option</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  text:</span> <span class="string">'单位：亿元'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  right:</span> <span class="number">309</span><span class="string">,</span></span><br><span class="line"><span class="attr">  textStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    fontFamily:</span> <span class="string">'PingFangSC-Regular'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    fontWeight:</span> <span class="string">'normal'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    fontSize:</span> <span class="number">12</span><span class="string">,</span></span><br><span class="line"><span class="attr">    color:</span> <span class="string">'#333333'</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">tooltip:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">'axis'</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">legend:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  data:</span> <span class="string">['非银规模',</span> <span class="string">'银行规模'</span><span class="string">,</span> <span class="string">'整体规模'</span><span class="string">],</span></span><br><span class="line"><span class="attr">  right:</span> <span class="number">10</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">grid:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  left:</span> <span class="string">'1%'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  right:</span> <span class="string">'2%'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  bottom:</span> <span class="string">'3%'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  containLabel:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">xAxis:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">'category'</span><span class="string">,</span></span><br><span class="line"><span class="attr">  data:</span> <span class="string">char1XData,</span></span><br><span class="line"><span class="attr">  boundaryGap:</span> <span class="string">['5%',</span> <span class="string">'5%'</span><span class="string">],</span></span><br><span class="line"><span class="attr">  axisLine:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    lineStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      color:</span> <span class="string">'#333'</span><span class="string">,</span></span><br><span class="line"><span class="attr">      width:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  axisLabel:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">//</span> <span class="attr">show:false,</span></span><br><span class="line"><span class="attr">    fontSize:</span> <span class="number">9</span><span class="string">,</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="string">//</span> <span class="attr">rotate:</span> <span class="number">30</span><span class="string">,</span></span><br><span class="line"><span class="attr">    padding:</span> <span class="string">[0,</span> <span class="bullet">-6</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span><span class="string">]</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  axisTick:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  splitLine:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="attr">yAxis:</span> <span class="string">[</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">'value'</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    axisLine:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    axisLabel:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    axisTick:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    splitLine:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    min:</span> <span class="string">function(value)</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">return</span> <span class="string">value.min</span> <span class="string">*</span> <span class="number">0.8</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">'value'</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    axisLine:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    axisLabel:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    axisTick:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    splitLine:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    max:</span> <span class="string">function(value)</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">return</span> <span class="string">value.max</span> <span class="string">*</span> <span class="number">2</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    min:</span> <span class="string">function(value)</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">return</span> <span class="string">value.min</span> <span class="string">*</span> <span class="number">0.8</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="attr">series:</span> <span class="string">[</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">'整体规模'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">'line'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    yAxisIndex:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    itemStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      color:</span> <span class="string">'#3AA4FF'</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    symbol:</span> <span class="string">'circle'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    symbolSize:</span> <span class="number">8</span><span class="string">,</span></span><br><span class="line"><span class="attr">    lineStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      width:</span> <span class="number">1</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    data:</span> <span class="string">char1Line1</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">'银行规模'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">'line'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    yAxisIndex:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">      fontSize:</span> <span class="number">11</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    itemStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      color:</span> <span class="string">'#BA70CC'</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    symbol:</span> <span class="string">'circle'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    symbolSize:</span> <span class="number">8</span><span class="string">,</span></span><br><span class="line"><span class="attr">    lineStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      width:</span> <span class="number">1</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    data:</span> <span class="string">char1Line2</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">'非银规模'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">'line'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    yAxisIndex:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    itemStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      color:</span> <span class="string">'#6678E7'</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    symbol:</span> <span class="string">'circle'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    symbolSize:</span> <span class="number">8</span><span class="string">,</span></span><br><span class="line"><span class="attr">    lineStyle:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      width:</span> <span class="number">1</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    data:</span> <span class="string">char1Line3</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-柱状图-折线图"><a href="#2-柱状图-折线图" class="headerlink" title="2.柱状图+折线图"></a>2.柱状图+折线图</h3><blockquote><p>2Y轴 2柱状图 2线图</p></blockquote><ul><li>设置2个Y轴，保留一个分割线 <code>splitLine: { show: false}</code></li><li>设置两个柱状图的间隙 <code>barGap: 0.05</code></li><li>设置柱状图的宽度，最小高度 颜色 <code>barMinHeight: 15 ;barWidth: 20;itemStyle: { color: &#39;#FFDCC0&#39; }</code></li><li><p>设置线的颜色 节点大小 颜色 线宽等 <code>itemStyle: { color: &#39;#3981F4&#39;} ; lineStyle: { width: 1 };symbolSize: 8</code><br><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%882.02.06.png" alt="屏幕快照 2019-01-12 下午2.02.06"></p></li><li><p>option 设置</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> char2XData = [<span class="string">'2017-09'</span>, <span class="string">'2017-10'</span>, <span class="string">'2017-11'</span>, <span class="string">'2017-12'</span>, <span class="string">'2018-01'</span>, <span class="string">'2018-02'</span>, <span class="string">'2018-03'</span>, <span class="string">'2018-04'</span>, <span class="string">'2018-05'</span>,  <span class="string">'2018-06'</span>, <span class="string">'2018-07'</span> ]</span><br><span class="line"><span class="keyword">var</span> char2Bar1 = [<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> char2Bar2 = [<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> char2Line1 = [<span class="number">0.15</span>, <span class="number">0.13</span>, <span class="number">0.15</span>, <span class="number">0.16</span>, <span class="number">0.13</span>, <span class="number">0.12</span>, <span class="number">0.11</span>,  <span class="number">0.1</span>, <span class="number">0.09</span>, <span class="number">0.09</span>, <span class="number">0.08</span> ]</span><br><span class="line"><span class="keyword">var</span> char2Line2 = [ <span class="number">0.05</span>,  <span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.06</span>,  <span class="number">0.05</span>, <span class="number">0.16</span>, <span class="number">0.05</span>, <span class="number">0.06</span> ]</span><br><span class="line">      </span><br><span class="line">option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      text: <span class="string">'单位：亿元'</span>,</span><br><span class="line">      right: <span class="number">400</span>,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        fontFamily: <span class="string">'PingFangSC-Regular'</span>,</span><br><span class="line">        fontWeight: <span class="string">'normal'</span>,</span><br><span class="line">        fontSize: <span class="number">12</span>,</span><br><span class="line">        color: <span class="string">'#333333'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: <span class="string">'axis'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      data: [<span class="string">'刚性逾期'</span>, <span class="string">'不良资产'</span>, <span class="string">'逾期率'</span>, <span class="string">'不良率'</span>],</span><br><span class="line">      right: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: <span class="string">'1%'</span>,</span><br><span class="line">      right: <span class="string">'3%'</span>,</span><br><span class="line">      bottom: <span class="string">'3%'</span>,</span><br><span class="line">      containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: <span class="string">'category'</span>,</span><br><span class="line"></span><br><span class="line">      data: char2XData,</span><br><span class="line">      boundaryGap: [<span class="string">'5%'</span>, <span class="string">'5%'</span>],</span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">'#333'</span>,</span><br><span class="line">          width: <span class="number">0.5</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        fontSize: <span class="number">9</span>,</span><br><span class="line">        interval: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// rotate: 30</span></span><br><span class="line">      &#125;,</span><br><span class="line">      axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      splitLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">'value'</span>,</span><br><span class="line"></span><br><span class="line">        axisLine: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          <span class="comment">// show:false,</span></span><br><span class="line">          fontSize: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        axisTick: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">          <span class="comment">// show:false,</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// min: function(value) &#123;</span></span><br><span class="line">        <span class="comment">//     return value.min * 0.8;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">'value'</span>,</span><br><span class="line">        axisLine: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          <span class="comment">// show:false,</span></span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          showMaxLabel: <span class="literal">false</span>,</span><br><span class="line">           formatter: <span class="string">' &#123;value&#125;%'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        axisTick: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        max: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> value.max * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'刚性逾期'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">0</span>,</span><br><span class="line">        barWidth: <span class="number">20</span>,</span><br><span class="line">        barMinHeight: <span class="number">15</span>,</span><br><span class="line">        barGap: <span class="number">0.05</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#FFDCC0'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Bar1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'不良资产'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">0</span>,</span><br><span class="line">        barWidth: <span class="number">20</span>,</span><br><span class="line">        barMinHeight: <span class="number">15</span>,</span><br><span class="line">        barGap: <span class="number">0.05</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span>,</span><br><span class="line">          offset: [<span class="number">6</span>, <span class="number">0</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#AECDFF'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Bar2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'逾期率'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">1</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          distance: <span class="number">2</span>,</span><br><span class="line">          fontSize: <span class="number">9</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#FF6B2C'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        symbol: <span class="string">'circle'</span>,</span><br><span class="line">        symbolSize: <span class="number">8</span>,</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          width: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Line1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'不良率'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">1</span>,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'bottom'</span>,</span><br><span class="line">          fontSize: <span class="number">9</span>,</span><br><span class="line">          color: <span class="string">'#333333'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          color: <span class="string">'#3981F4'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        symbol: <span class="string">'circle'</span>,</span><br><span class="line">        symbolSize: <span class="number">8</span>,</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          width: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: char2Line2</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="饼图-圆环图"><a href="#饼图-圆环图" class="headerlink" title="饼图 圆环图"></a>饼图 圆环图</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>上图又单圆环图；双圆环图</span><br><span class="line"><span class="number">2.</span>radius 支持设置成百分比，相对于容器高宽中较小的一项的一半</span><br><span class="line"><span class="number">3.</span>center 第一项是相对于容器宽度，第二项是相对于容器高度</span><br></pre></td></tr></table></figure><h3 id="1-单圆环图-右侧标记"><a href="#1-单圆环图-右侧标记" class="headerlink" title="1.单圆环图 右侧标记"></a>1.单圆环图 右侧标记</h3><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%883.15.09.png?50" alt="屏幕快照 2019-01-12 下午3.15.09"></p><ul><li>data 数组 数组内的百分比加起来为100%</li><li>右侧标记是 用markLine 文字label：（formatter + rich）富文本实现</li><li>两个折现 是markLine （x，y） 数组实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appExposureRatiosDTO =  &#123;</span><br><span class="line">  <span class="string">"percent"</span>: <span class="string">"0.2538"</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"全集团风险敞口"</span>,</span><br><span class="line">  <span class="string">"top20WarnAssetPool"</span>: <span class="string">"739.62"</span>,</span><br><span class="line">  <span class="string">"totalAssetPoolValue"</span>: <span class="string">"2914.24"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> top20 = <span class="built_in">Number</span>(appExposureRatiosDTO.top20WarnAssetPool).toFixed(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> pieData = [</span><br><span class="line">    &#123; <span class="attr">value</span>: appExposureRatiosDTO.percent&#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="number">1</span>-appExposureRatiosDTO.percent&#125;</span><br><span class="line">]</span><br><span class="line">option = &#123;</span><br><span class="line">    color: [<span class="string">'#FE7011'</span>, <span class="string">'#FFDABB'</span>],</span><br><span class="line">    <span class="comment">// tooltip: &#123;</span></span><br><span class="line">    <span class="comment">//   trigger: 'item',</span></span><br><span class="line">    <span class="comment">//   formatter: '&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    series: &#123;</span><br><span class="line">      name: <span class="string">'全集团风险敞口'</span>,</span><br><span class="line">      type: <span class="string">'pie'</span>,</span><br><span class="line">      <span class="comment">// 支持设置成百分比，相对于容器高宽中较小的一项的一半。</span></span><br><span class="line">      radius: [<span class="string">'80%'</span>, <span class="string">'60%'</span>],</span><br><span class="line">      <span class="comment">// 第一项是相对于容器宽度，第二项是相对于容器高度。</span></span><br><span class="line">      center: [<span class="string">'30%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">      data: pieData,</span><br><span class="line">      labelLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span>,</span><br><span class="line">        length: <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">      markLine: &#123;</span><br><span class="line">        symbol: <span class="string">'none'</span>,</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">'#FF6B2C '</span>,</span><br><span class="line">          width: <span class="number">2.5</span>,</span><br><span class="line">          type: <span class="string">'dotted'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          fontSize: <span class="number">10</span>,</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          color: <span class="string">'#333'</span>,</span><br><span class="line">          formatter: <span class="function"><span class="keyword">function</span>(<span class="params">pramas</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> v1 = <span class="string">'前20大风险系客户\n风险敞口'</span></span><br><span class="line">            <span class="keyword">var</span> v2 = top20</span><br><span class="line">            <span class="keyword">var</span> v3 = <span class="string">'亿元'</span></span><br><span class="line">            <span class="keyword">if</span> (pramas.dataIndex === <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> ( <span class="string">'&#123;name|'</span> + v1 + <span class="string">'&#125;'</span> + <span class="string">'\n'</span> +</span><br><span class="line">                      <span class="string">'&#123;number|'</span> + v2 + <span class="string">'&#125;'</span> +</span><br><span class="line">                      <span class="string">'&#123;unit|'</span> +  v3 + <span class="string">'&#125;'</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">          &#125;,</span><br><span class="line">          rich: &#123;</span><br><span class="line">            name: &#123;</span><br><span class="line">              align: <span class="string">'center'</span>,</span><br><span class="line">              fontSize: <span class="number">12</span>,</span><br><span class="line">              color: <span class="string">'#666666'</span>,</span><br><span class="line">              lineHeight: <span class="number">16</span></span><br><span class="line">            &#125;,</span><br><span class="line">            number: &#123;</span><br><span class="line">              align: <span class="string">'left'</span>,</span><br><span class="line">              color: <span class="string">'#FE7011'</span>,</span><br><span class="line">              padding: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">20</span>],</span><br><span class="line">              fontSize: <span class="number">26</span>,</span><br><span class="line">              fontFamily: <span class="string">'JCHEadA'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            unit: &#123;</span><br><span class="line">              align: <span class="string">'left'</span>,</span><br><span class="line">              color: <span class="string">'#FF6B2C'</span>,</span><br><span class="line">              fontSize: <span class="number">11</span>,</span><br><span class="line">              padding: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [</span><br><span class="line">          [</span><br><span class="line">            &#123;</span><br><span class="line">              x: <span class="string">'70%'</span>,</span><br><span class="line">              y: <span class="string">'10%'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              x: <span class="string">'70%'</span>,</span><br><span class="line">              y: <span class="string">'30.2%'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            &#123;</span><br><span class="line">              x: <span class="string">'36%'</span>,</span><br><span class="line">              y: <span class="string">'10%'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              x: <span class="string">'70%'</span>,</span><br><span class="line">              y: <span class="string">'10%'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      label: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-单圆环图-右侧标记-1"><a href="#1-单圆环图-右侧标记-1" class="headerlink" title="1.单圆环图 右侧标记"></a>1.单圆环图 右侧标记</h3><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%883.17.42.png?30" alt="屏幕快照 2019-01-12 下午3.17.42"></p><ul><li>两组数据 每组都是和100%</li><li>图例在下面 中间有文字提示 图例是html</li><li>中心文字使用 <code>graphic</code>  设置左侧上的中心对齐</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pieData = &#123;</span><br><span class="line">    <span class="string">"assetPoolRatio"</span>: <span class="string">"0.8278"</span>,</span><br><span class="line">    <span class="string">"outRiskRatio"</span>: <span class="string">"0.7926"</span>,</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"全集团风险客户"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> color1 = [<span class="string">'#FFDABB'</span>, <span class="string">'#EEEEEE'</span>]</span><br><span class="line"><span class="keyword">var</span> color2 = [<span class="string">'#FF6B2C'</span>, <span class="string">'#ddd'</span>]</span><br><span class="line"><span class="keyword">var</span> pieData1 = [pieData.assetPoolRatio,<span class="number">1</span>-pieData.assetPoolRatio]</span><br><span class="line"><span class="keyword">var</span> pieData2 = [pieData.outRiskRatio,<span class="number">1</span>-pieData.outRiskRatio]</span><br><span class="line"><span class="keyword">var</span> centerText = (pieData.title.length &gt; <span class="number">5</span>) ? (pieData.title.substring(<span class="number">0</span>,<span class="number">5</span>) + <span class="string">'\n'</span> + pieData.title.substring(<span class="number">5</span>)) : pieData.title </span><br><span class="line">option = &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 中心提示lable</span></span><br><span class="line">graphic:&#123;</span><br><span class="line">    type:<span class="string">"text"</span>,</span><br><span class="line">    left:<span class="string">"center"</span>,</span><br><span class="line">    top:<span class="string">'center'</span>,</span><br><span class="line">    zlevel:<span class="number">100</span>,</span><br><span class="line">    z:<span class="number">2</span>,</span><br><span class="line">    style:&#123;</span><br><span class="line">        text: centerText,</span><br><span class="line">        textAlign:<span class="string">'center'</span>,</span><br><span class="line">        fontSize:<span class="number">11</span>,</span><br><span class="line">        color:<span class="string">'#333333'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">series: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'风险资产'</span>,</span><br><span class="line">    type: <span class="string">'pie'</span>,</span><br><span class="line">    <span class="comment">// 支持设置成百分比，相对于容器高宽中较小的一项的一半。</span></span><br><span class="line">    radius: [<span class="string">'80%'</span>, <span class="string">'65%'</span>],</span><br><span class="line">    <span class="comment">// 第一项是相对于容器宽度，第二项是相对于容器高度。</span></span><br><span class="line">    center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">    </span><br><span class="line">    data:pieData1,</span><br><span class="line">    label: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      color: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color1[params.dataIndex]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'出险资产'</span>,</span><br><span class="line">    type: <span class="string">'pie'</span>,</span><br><span class="line">    <span class="comment">// 支持设置成百分比，相对于容器高宽中较小的一项的一半。</span></span><br><span class="line">    radius: [<span class="string">'65%'</span>, <span class="string">'51%'</span>],</span><br><span class="line">    <span class="comment">// 第一项是相对于容器宽度，第二项是相对于容器高度。</span></span><br><span class="line">    center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">    data:pieData2,</span><br><span class="line">    label: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      color: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color2[params.dataIndex]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h1><blockquote><p><a href="https://echarts.baidu.com/examples/editor.html?c=radar-custom" target="_blank" rel="noopener">官方文档</a></p></blockquote><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%883.28.36.png" alt="屏幕快照 2019-01-12 下午3.28.36"></p><ul><li>series设置 <code>type: &#39;radar&#39;</code> <ul><li>1.设置 指标类型 格式</li><li>2.设置splitArea分割区域 颜色5个</li><li>3.设置axisLine 颜色</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">radar: [</span><br><span class="line">    &#123;</span><br><span class="line">        indicator: [</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'指标一'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'指标二'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'指标三'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'指标四'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">text</span>: <span class="string">'指标五'</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        center: [<span class="string">'25%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">        radius: <span class="number">120</span>,</span><br><span class="line">        startAngle: <span class="number">90</span>,</span><br><span class="line">        splitNumber: <span class="number">4</span>,</span><br><span class="line">        shape: <span class="string">'circle'</span>,</span><br><span class="line">        name: &#123;</span><br><span class="line">            formatter:<span class="string">'【&#123;value&#125;】'</span>,</span><br><span class="line">            textStyle: &#123;</span><br><span class="line">                color:<span class="string">'#72ACD1'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        splitArea: &#123;</span><br><span class="line">            areaStyle: &#123;</span><br><span class="line">                color: [<span class="string">'rgba(114, 172, 209, 0.2)'</span>,</span><br><span class="line">                <span class="string">'rgba(114, 172, 209, 0.4)'</span>, <span class="string">'rgba(114, 172, 209, 0.6)'</span>,</span><br><span class="line">                <span class="string">'rgba(114, 172, 209, 0.8)'</span>, <span class="string">'rgba(114, 172, 209, 1)'</span>],</span><br><span class="line">                shadowColor: <span class="string">'rgba(0, 0, 0, 0.3)'</span>,</span><br><span class="line">                shadowBlur: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        axisLine: &#123;</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                color: <span class="string">'rgba(255, 255, 255, 0.5)'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">                color: <span class="string">'rgba(255, 255, 255, 0.5)'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>设置data 两组数据对比 设置各组数据对应的 个个点连线颜色 <code>lineStyle</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'雷达图'</span>,</span><br><span class="line">        type: <span class="string">'radar'</span>,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                <span class="comment">// color: 各异,</span></span><br><span class="line">                lineStyle: &#123;</span><br><span class="line">                    width: <span class="number">4</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data: [</span><br><span class="line">            &#123;</span><br><span class="line">                value: [<span class="number">100</span>, <span class="number">8</span>, <span class="number">0.40</span>, <span class="number">-80</span>, <span class="number">2000</span>],</span><br><span class="line">                name: <span class="string">'图一'</span>,</span><br><span class="line">                symbol: <span class="string">'rect'</span>,</span><br><span class="line">                symbolSize: <span class="number">5</span>,</span><br><span class="line">                lineStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        type: <span class="string">'dashed'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                value: [<span class="number">60</span>, <span class="number">5</span>, <span class="number">0.30</span>, <span class="number">-100</span>, <span class="number">1500</span>],</span><br><span class="line">                name: <span class="string">'图二'</span>,</span><br><span class="line">                areaStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        color: <span class="string">'rgba(255, 255, 255, 0.5)'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h1><h1 id="中国地图"><a href="#中国地图" class="headerlink" title="中国地图"></a>中国地图</h1><p><img src="/images/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-12%20%E4%B8%8B%E5%8D%883.26.25.png" alt="屏幕快照 2019-01-12 下午3.26.25"></p><ul><li>准备每个省份的数据</li><li>设置 <code>visualMap</code> 小地图颜色  <code>type: &#39;piecewise&#39;</code> 分段型视觉映射组件（visualMapPiecewise）;连续型视觉映射组件（visualMapContinuous）<ul><li>pieces 分段型 每一段的样式可以设置，根据数据的数值区间</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mydata = [</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"西藏"</span>,<span class="string">"value"</span>: <span class="string">"5"</span>,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"新疆"</span>,<span class="string">"value"</span>: <span class="string">"4"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"广西"</span>,<span class="string">"value"</span>: <span class="string">"3"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"重庆"</span>,<span class="string">"value"</span>: <span class="string">"2"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"河南"</span>,<span class="string">"value"</span>: <span class="string">"1"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"江苏"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"上海"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"辽宁"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"黑龙江"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"湖南"</span>,<span class="string">"value"</span>: <span class="string">"0"</span>,<span class="string">'percent'</span>:<span class="string">'1%'</span>  &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"安徽"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"山东"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"天津"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"河北"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"浙江"</span>,<span class="string">"value"</span>: <span class="string">"0"</span>,<span class="string">'percent'</span>:<span class="string">'1%'</span>  &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"江西"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"湖北"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"云南"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"甘肃"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"山西"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"内蒙古"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"陕西"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"吉林"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"福建"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"贵州"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"广东"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"青海"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"北京"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"四川"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"宁夏"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"海南"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"台湾"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"香港"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"澳门"</span>,<span class="string">"value"</span>: <span class="string">"0"</span> ,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>: <span class="string">"南海诸岛"</span>,<span class="string">"value"</span>: <span class="string">"0"</span>,<span class="string">'percent'</span>:<span class="string">'1%'</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = <span class="number">0.01</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mydata.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        a2 = <span class="built_in">Number</span>(mydata[i][<span class="string">"value"</span>]) &gt; a2 ? <span class="built_in">Number</span>(mydata[i][<span class="string">"value"</span>]) : a2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a2)</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//左侧小导航图标</span></span><br><span class="line">    visualMap: &#123;</span><br><span class="line">            type: <span class="string">'piecewise'</span>,</span><br><span class="line">            show : <span class="literal">true</span>,</span><br><span class="line">            splitNumber:<span class="number">2</span>,</span><br><span class="line">            left:<span class="string">"15px"</span>,</span><br><span class="line">            bottom:<span class="string">"7.5%"</span>,</span><br><span class="line">            color: [<span class="string">'#E74040'</span> ,<span class="string">'#dee4ff'</span>],</span><br><span class="line">            pieces: [ &#123;<span class="attr">min</span>: a2, <span class="attr">label</span>: <span class="string">'风险资产规模区域占比前五大省市'</span>&#125;,</span><br><span class="line">                        &#123;<span class="attr">max</span>: a2,<span class="attr">label</span>: <span class="string">'其他风险资产所在区域'</span>&#125;,</span><br><span class="line">                        ],</span><br><span class="line">            </span><br><span class="line">            inRange: &#123;</span><br><span class="line">                color: [<span class="string">'#dee4ff'</span>, <span class="string">'#E74040'</span>],</span><br><span class="line">                symbolSize: [<span class="number">30</span>, <span class="number">100</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            outOfRange: &#123;</span><br><span class="line">                color: [<span class="string">'#dee4ff'</span>, <span class="string">'#E74040'</span>],</span><br><span class="line">                symbolSize: [<span class="number">30</span>, <span class="number">100</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">    </span><br><span class="line">    &#125;,                   </span><br><span class="line">    <span class="comment">//配置属性</span></span><br><span class="line">    series: [&#123;</span><br><span class="line">            name: <span class="string">'数据'</span>,</span><br><span class="line">            type: <span class="string">'map'</span>,</span><br><span class="line">            mapType: <span class="string">'china'</span>,</span><br><span class="line">            data:mydata,</span><br><span class="line">            roam: <span class="literal">false</span>, <span class="comment">//是否开启鼠标缩放和平移漫游</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//高亮状态下的多边形和标签样式。</span></span><br><span class="line">            itemStyle:&#123;</span><br><span class="line">                <span class="comment">// normal:&#123;label:&#123;show:true&#125;&#125;,</span></span><br><span class="line">                emphasis:&#123;<span class="attr">label</span>:&#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;&#125;,</span><br><span class="line">                borderWidth:<span class="number">1</span>,</span><br><span class="line">                <span class="comment">// borderColor:'rgba(0,0,0,0.3)',</span></span><br><span class="line">                borderColor:<span class="string">'#fff'</span>,</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            label:&#123;</span><br><span class="line">                show:<span class="literal">true</span>,</span><br><span class="line">                color:<span class="string">'#333'</span>,</span><br><span class="line">                fontSize:<span class="string">'9'</span>,</span><br><span class="line">                <span class="comment">// formatter:'',</span></span><br><span class="line">                formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">Number</span>(params.data.value ) &gt; a2)&#123;</span><br><span class="line">                        <span class="keyword">return</span> params.data.name + <span class="string">'\n'</span> + params.data.percent + <span class="string">'%'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECharts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery学习笔记03</title>
      <link href="/2018/05/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/jQuery03/"/>
      <url>/2018/05/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/jQuery03/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery特殊属性操作"><a href="#jQuery特殊属性操作" class="headerlink" title="jQuery特殊属性操作"></a>jQuery特殊属性操作</h1><h2 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h2><blockquote><p>val方法用于设置和获取表单元素的值，例如input、textarea的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">"#name"</span>).val(“张三”);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">$(<span class="string">"#name"</span>).val();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section1 #btn'</span>).val())  <span class="comment">// hehe</span></span><br><span class="line">$(<span class="string">'.section1 #btn'</span>).val(<span class="string">'add'</span>)       <span class="comment">// add</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section1 #btn'</span>).attr(<span class="string">'value'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是默认值 清空内容</span></span><br><span class="line">$(<span class="string">'.section1 #txt'</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">'.section1 #txt'</span>).val() === <span class="string">'洋酒'</span>)&#123;</span><br><span class="line">        $(<span class="string">'.section1 #txt'</span>).val(<span class="string">''</span>)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 失去焦点的时候 如果为空 给个默认值</span></span><br><span class="line">$(<span class="string">'.section1 #txt'</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">'.section1 #txt'</span>).val() === <span class="string">''</span>)&#123;</span><br><span class="line">        $(<span class="string">'.section1 #txt'</span>).val(<span class="string">'洋酒'</span>)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="html-方法-和text-方法"><a href="#html-方法-和text-方法" class="headerlink" title="html() 方法 和text() 方法"></a>html() 方法 和text() 方法</h2><blockquote><p>html方法相当于innerHTML  text方法相当于innerText</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置内容</span></span><br><span class="line">$(“div”).html(“&lt;span&gt;这是一段内容&lt;<span class="regexp">/span&gt;”);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获取内容</span></span><br><span class="line"><span class="regexp">$(“div”).html()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/设置内容</span></span><br><span class="line"><span class="regexp">$(“div”).text(“&lt;span&gt;这是一段内容&lt;/</span>span&gt;”);</span><br><span class="line"><span class="comment">//获取内容</span></span><br><span class="line">$(“div”).text()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section2 div'</span>).html())   <span class="comment">//  &lt;h3&gt;我是标题&lt;/h3&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section2 div'</span>).text())  <span class="comment">// 我是标题</span></span><br><span class="line">$(<span class="string">'.section2 div'</span>).text(<span class="string">'&lt;p&gt;我是文本&lt;/p&gt;'</span>)  </span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section2 div'</span>).html())   <span class="comment">// &amp;lt;p&amp;gt;我是文本&amp;lt;p&amp;gt;  字符串</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section2 div'</span>).html(<span class="string">'&lt;p&gt;我是文本&lt;/p&gt;'</span>)  </span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section2 div'</span>).html())   <span class="comment">// &lt;p&gt;我是文本&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>区别：html方法会识别html标签，text方法会那内容直接当成字符串，并不会识别html标签。</p><h2 id="width-height-方法"><a href="#width-height-方法" class="headerlink" title="width() / height() 方法"></a>width() / height() 方法</h2><blockquote><p>设置或者获取高度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带参数表示设置高度</span></span><br><span class="line">$(“img”).height(<span class="number">200</span>);</span><br><span class="line"><span class="comment">//不带参数获取高度</span></span><br><span class="line">$(“img”).height();</span><br></pre></td></tr></table></figure><p>获取网页的可视区宽高<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取可视区宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="comment">//获取可视区高度</span></span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure></p><h2 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a>scrollTop与scrollLeft</h2><blockquote><p>设置或者获取垂直滚动条的位置<br>距窗口的左侧的偏移量 距离顶部的偏移量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">//获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">window</span>).scrollTop())</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="built_in">window</span>).scrollLeft())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="固定导航案例"><a href="#固定导航案例" class="headerlink" title="固定导航案例"></a>固定导航案例</h2><blockquote><p>下滑到一定的长度 导航栏悬浮固定</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>判断卷的高度 与 topPart的高度</span><br><span class="line"><span class="number">2.</span>大于 的话navbar 固定定位</span><br><span class="line"><span class="number">3.</span>设置main 有marginTop</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() &gt;= $(<span class="string">'.top'</span>).height())&#123;</span><br><span class="line">    $(<span class="string">'.nav'</span>).addClass(<span class="string">'fixed'</span>)</span><br><span class="line">    $(<span class="string">'.main'</span>).css(<span class="string">'marginTop'</span>,$(<span class="string">'.nav'</span>).height() + <span class="number">10</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $(<span class="string">'.nav'</span>).removeClass(<span class="string">'fixed'</span>)</span><br><span class="line">    $(<span class="string">'.main'</span>).css(<span class="string">'marginTop'</span>,<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小火箭返回顶部案例"><a href="#小火箭返回顶部案例" class="headerlink" title="小火箭返回顶部案例"></a>小火箭返回顶部案例</h2><blockquote><p>当页面超出去1000px的时候，让小火箭显示出来,如果小于1000，就让小火箭隐藏</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">        $(<span class="string">'.actGop'</span>).stop().fadeIn(<span class="number">1000</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">'.actTop'</span>).stop().fadeOut(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScroll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        left:<span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>,</span><br><span class="line">        top:<span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.actGotop'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'html,body'</span>).stop().animate(&#123;<span class="attr">scrollTop</span>:<span class="number">0</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">    <span class="comment">// screenTop 为0 </span></span><br><span class="line">    $(<span class="built_in">window</span>).scrollTop(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h2><blockquote><p>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素的位置。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">//获取相对于其最近的有定位的父元素的位置。</span></span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure><h1 id="jQuery事件机制"><a href="#jQuery事件机制" class="headerlink" title="jQuery事件机制"></a>jQuery事件机制</h1><blockquote><p>JavaScript中已经学习过了事件，但是jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</p></blockquote><h2 id="jQuery事件发展历程-了解"><a href="#jQuery事件发展历程-了解" class="headerlink" title="jQuery事件发展历程(了解)"></a>jQuery事件发展历程(了解)</h2><p>简单事件绑定&gt;&gt;bind事件绑定&gt;&gt;delegate事件绑定&gt;&gt;on事件绑定(推荐)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>bind() 方式 参数是一个对象，有多个时间的name，func </span><br><span class="line"><span class="number">2.</span>click() 方法 简单事件，给自己注册的事件</span><br><span class="line"><span class="number">3.</span>delegate(ele.funname,callback)</span><br><span class="line">    - 给父元素注册委托事件 最终还有子元素来执行</span><br><span class="line">    - 第一个参数 事件名</span><br><span class="line">    - 第二个参数  回调函数</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section6 p'</span>).bind(&#123;</span><br><span class="line">    <span class="comment">// click:function()&#123;</span></span><br><span class="line">    <span class="comment">//     console.log('p bind click')</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    mouseenter:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'p bind mouseenter'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'.section6 div'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'selft click'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子：给div 注册一个委托事件 最终不是由自己执行，而是由P执行</span></span><br><span class="line">$(<span class="string">'.section6 #box'</span>).delegate(<span class="string">'p'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)      <span class="comment">// &lt;p&gt;44444&lt;/p&gt;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>简单事件注册</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">click(handler)单击事件</span><br><span class="line">mouseenter(handler)鼠标进入事件</span><br><span class="line">mouseleave(handler)鼠标离开事件</span><br></pre></td></tr></table></figure><p>缺点：不能同时注册多个事件</p><blockquote><p>bind方式注册事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数：事件类型</span></span><br><span class="line"><span class="comment">//第二个参数：事件处理程序</span></span><br><span class="line">$(<span class="string">"p"</span>).bind(<span class="string">"click mouseenter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//事件响应方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>缺点：不支持动态事件绑定</p><blockquote><p>delegate注册委托事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：selector，要绑定事件的元素</span></span><br><span class="line"><span class="comment">// 第二个参数：事件类型</span></span><br><span class="line"><span class="comment">// 第三个参数：事件处理函数</span></span><br><span class="line">$(<span class="string">".parentBox"</span>).delegate(<span class="string">"p"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//为 .parentBox下面的所有的p标签绑定事件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>缺点：只能注册委托事件，因此注册时间需要记得方法太多了</p><blockquote><p>on注册事件</p></blockquote><h2 id="on注册事件-重点"><a href="#on注册事件-重点" class="headerlink" title="on注册事件(重点)"></a>on注册事件(重点)</h2><blockquote><p>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。</p><p>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。</p></blockquote><p>on注册简单事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>on注册委托事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>,“span”, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>on注册事件的语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span></span><br><span class="line"><span class="comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span></span><br><span class="line"><span class="comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span></span><br><span class="line"><span class="comment">// 第四个参数：handler，事件处理函数</span></span><br><span class="line">$(selector).on(events[,selector][,data],handler);</span><br></pre></td></tr></table></figure></p><h2 id="事件的执行顺序"><a href="#事件的执行顺序" class="headerlink" title="事件的执行顺序"></a>事件的执行顺序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- p自己注册事件  简单事件</span></span><br><span class="line"><span class="comment">- 父级div自己执行</span></span><br><span class="line"><span class="comment">- 给div 里面的p 执行委托事件</span></span><br><span class="line"><span class="comment">- btn 自己注册事件 创建p添加div p无事件注册</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">'.section7 p'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'.section7 p -&gt; on'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'.section7 div'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'.section7 div -&gt; on'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">$(<span class="string">'.section7 div'</span>).on(<span class="string">'click'</span>,<span class="string">'.section7 p'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'.section7 div -&gt; (div  .section7 p))'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section7 #btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'&lt;p&gt;新创建的P元素&lt;/p&gt;'</span>).appendTo($(<span class="string">'.section7 div'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="表格删除功能"><a href="#表格删除功能" class="headerlink" title="表格删除功能"></a>表格删除功能</h2><blockquote><p> 清空所有/ 删除一行 / 添加 一行 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 清空所有  empty 清空自己内部的所有组件</span></span><br><span class="line">$(<span class="string">'.seciton8 clerarbtn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.seciton8 #j_tbody'</span>).empty()</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 删除一行  删除按钮 自己删除 / 代理onbody注册 ，让删除button执行</span></span><br><span class="line"><span class="comment">// 1. remove 自己从父view 中移除</span></span><br><span class="line">$(<span class="string">'.seciton8 .row_dele_btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).parent().parent().remove()</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">$(<span class="string">'.seciton8 #j_tbody'</span>).on(<span class="string">'click'</span>,<span class="string">'.seciton8 .row_dele_btn'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).parent().parent().remove()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一行</span></span><br><span class="line">$(<span class="string">'.seciton8 .add_button'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'&lt;tr&gt; &lt;td&gt;jQuery111&lt;/td&gt; &lt;td&gt;adddrow11&lt;/td&gt; &lt;td&gt;&lt;a href="javascrip:;" class="row_dele_btn"&gt;DELETE&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;'</span>).appendTo(<span class="string">"#j_tbody"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="移除事件绑定"><a href="#移除事件绑定" class="headerlink" title="移除事件绑定"></a>移除事件绑定</h2><blockquote><p>unbind方式（不用）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).unbind(); <span class="comment">//解绑所有的事件</span></span><br><span class="line">$(selector).unbind(<span class="string">"click"</span>); <span class="comment">//解绑指定的事件</span></span><br></pre></td></tr></table></figure><blockquote><p>undelegate方式（不用）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$( selector ).undelegate(); <span class="comment">//解绑所有的delegate事件</span></span><br><span class="line">$( selector).undelegate( “click” ); <span class="comment">//解绑所有的click事件</span></span><br></pre></td></tr></table></figure><blockquote><p>off方式（推荐）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑匹配元素的所有事件</span></span><br><span class="line">$(selector).off();</span><br><span class="line"><span class="comment">// 解绑匹配元素的所有click事件</span></span><br><span class="line">$(selector).off(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure><h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).click(); <span class="comment">//触发 click事件</span></span><br><span class="line">$(selector).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure><h2 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h2><blockquote><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//screenX和screenY对应屏幕最左上角的值</span></span><br><span class="line"><span class="comment">//clientX和clientY距离页面左上角的位置（忽视滚动条）</span></span><br><span class="line"><span class="comment">//pageX和pageY距离页面最顶部的左上角的位置（会计算滚动条的距离）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.keyCode按下的键盘代码</span></span><br><span class="line"><span class="comment">//event.data存储绑定事件时传递的附加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.stopPropagation()阻止事件冒泡行为</span></span><br><span class="line"><span class="comment">//event.preventDefault()阻止浏览器默认行为</span></span><br><span class="line"><span class="comment">//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></span><br></pre></td></tr></table></figure><h2 id="阻止冒泡和阻止浏览器的默认行为"><a href="#阻止冒泡和阻止浏览器的默认行为" class="headerlink" title="阻止冒泡和阻止浏览器的默认行为"></a>阻止冒泡和阻止浏览器的默认行为</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">阻止 默认</span></span><br><span class="line"><span class="comment">preventDefault() 阻止默认事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">stopPropagation()   组织冒泡</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">return false 既能阻止事件冒泡 也能阻止浏览器的默认行为</span></span><br><span class="line"><span class="comment">console.log(e.cancelBubble)</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section11 #link'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="comment">//   e.preventDefault() </span></span><br><span class="line"><span class="comment">//   e.stopPropagation()</span></span><br><span class="line">    <span class="comment">// alert('11')  // alert之后继续跳转链接</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// return false;</span></span><br><span class="line">    <span class="comment">// console.log(e.cancelBubble) // undefined</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="string">'112'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="五星级评分案例"><a href="#五星级评分案例" class="headerlink" title="五星级评分案例"></a>五星级评分案例</h2><blockquote><p>点击之前的变实心 / 鼠标hover实实 变换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 给li 注册鼠标经过事件 让自己和前面的兄弟都变实心</span></span><br><span class="line"><span class="comment">2. 给ul 注册鼠标离开事件 让所有的li变成空心</span></span><br><span class="line"><span class="comment">  2-1. 找到current 让current和current前面的变成实心 </span></span><br><span class="line"><span class="comment">3.li注册点击事件 点击的加上current class 移除其他兄弟current</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> wjx_k = <span class="string">"☆"</span>;</span><br><span class="line"><span class="keyword">var</span> wjx_s = <span class="string">"★"</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//li  mounseenter 之前的都变实心</span></span><br><span class="line">$(<span class="string">'.section14 .comment&gt;li'</span>).on(<span class="string">'mounseenter'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).text(wjx_s).prevAll().text(wjx_s)</span><br><span class="line">    $(<span class="keyword">this</span>).nextAll().text(wjx_k)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// li click 记录current</span></span><br><span class="line">$(<span class="string">'.section14 .comment&gt;li'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">'current'</span>).siblings().removeClass(<span class="string">'current'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ul 离开事件</span></span><br><span class="line">$(<span class="string">'.section14 .comment'</span>).on(<span class="string">''</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 所有的li 为空心 </span></span><br><span class="line">    $(<span class="keyword">this</span>).children().text(wjx_k)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  Curren之前的类 -&gt; 实心</span></span><br><span class="line">    $(<span class="string">'.comment&gt;li.current'</span>).text(wjx_s).prevAll().text(wjx_s)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="jQuery补充知识点"><a href="#jQuery补充知识点" class="headerlink" title="jQuery补充知识点"></a>jQuery补充知识点</h1><h2 id="delay的用法"><a href="#delay的用法" class="headerlink" title="delay的用法"></a>delay的用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funn15</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.section12 div'</span>).css(<span class="string">'display'</span>,<span class="string">'block'</span>).fadeIn(<span class="number">1000</span>).delay(<span class="number">8000</span>).fadeOut(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><blockquote><p>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end(); <span class="comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span></span><br></pre></td></tr></table></figure><p>【案例：五角星评分案例.html】</p><h2 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h2><blockquote><p>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</p></blockquote><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数一表示当前元素在所有匹配元素中的索引号</span></span><br><span class="line"><span class="comment">// 参数二表示当前元素（DOM对象）</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h2><blockquote><p>jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = $.noConflict();<span class="comment">//释放$的控制权,并且把$的能力给了c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery学习笔记02</title>
      <link href="/2018/05/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/jQuery02/"/>
      <url>/2018/05/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/jQuery02/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery方法"><a href="#jQuery方法" class="headerlink" title="jQuery方法"></a>jQuery方法</h1><blockquote><p>学习CSS/Class/attr/prop/show()/slideDown()/fadeIn()/自定义动画/动画队列/停止动画stop()/动态创建节点<br>配合几个案例练习；tab栏切换/美女相册/轮播图/手风琴/城市选择/微博发布案例/弹幕效果</p></blockquote><h2 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h2><ul><li><p>1.修改单个样式<strong>css(name,value)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.section1 li'</span>).css(<span class="string">'fontSize'</span>,<span class="string">'20'</span>)</span><br></pre></td></tr></table></figure></li><li><p>2.修改多个样式 </p><ul><li>css(k1,v1).css(k2,v2).css(k3,v3)</li><li>css({key1:value1,key2:value2})</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式</span></span><br><span class="line">$(<span class="string">"li"</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"pink"</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>).css(<span class="string">"fontSize"</span>, <span class="string">"32px"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象形式</span></span><br><span class="line">$(<span class="string">"li"</span>).css(&#123;</span><br><span class="line">    backgroundColor:<span class="string">"pink"</span>,</span><br><span class="line">    color: <span class="string">"red"</span>,</span><br><span class="line">    fontSize:<span class="string">"32px"</span>,</span><br><span class="line">    border: <span class="string">"1px solid black"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>3.获取css 样式 <code>css(name)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>隐式迭代 全部设置，取出时按第一个</span><br><span class="line"><span class="number">2.</span>设置操作的时候：会给jq内部的所有对象都设置上相同的值。</span><br><span class="line"><span class="number">3.</span>获取的时候：只会返回第一个元素对应的值。</span><br><span class="line">$(<span class="string">'.section1 li'</span>).eq(<span class="number">0</span>).css(<span class="string">'fontSize'</span>,<span class="string">'20px'</span>)</span><br><span class="line">$(<span class="string">'.section1 li'</span>).eq(<span class="number">1</span>).css(<span class="string">'fontSize'</span>,<span class="string">'21px'</span>)</span><br><span class="line">$(<span class="string">'.section1 li'</span>).eq(<span class="number">2</span>).css(<span class="string">'fontSize'</span>,<span class="string">'22px'</span>)</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section1 li'</span>).css(<span class="string">'fontSize'</span>)) <span class="comment">// -&gt; 20px</span></span><br></pre></td></tr></table></figure><h2 id="Class操作-增删改查判断"><a href="#Class操作-增删改查判断" class="headerlink" title="Class操作 增删改查判断"></a>Class操作 增删改查判断</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增1</span></span><br><span class="line">$(<span class="string">'.section2 input'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'li'</span>).addClass(<span class="string">'basic'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 增2</span></span><br><span class="line">$(<span class="string">'.section2 input'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'li'</span>).addClass(<span class="string">'bigger'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 删除1</span></span><br><span class="line">$(<span class="string">'.section2 input'</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'li'</span>).removeClass(<span class="string">'bigger'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line">$(<span class="string">'.section2 input'</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">'li'</span>).hasClass(<span class="string">'bigger'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 切换 有删除 没有添加 toggle</span></span><br><span class="line">$(<span class="string">'.section2 input'</span>).eq(<span class="number">4</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'li'</span>).toggleClass(<span class="string">'basic'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="tab栏切换"><a href="#tab栏切换" class="headerlink" title="tab栏切换"></a>tab栏切换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// tab 选中的添加active 其他的移除 active</span></span><br><span class="line">    <span class="comment">// main 选中添加selected 其他的移除 selected</span></span><br><span class="line">    $(<span class="string">'.tab .tab-item'</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>)</span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index()</span><br><span class="line">        $(<span class="string">'.products .main'</span>).eq(index).addClass(<span class="string">'selected'</span>).siblings().removeClass(<span class="string">'selected'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性操作-标签的属性-img-的src-alt-title-等属性"><a href="#属性操作-标签的属性-img-的src-alt-title-等属性" class="headerlink" title="属性操作 标签的属性 img 的src / alt / title 等属性"></a>属性操作 标签的属性 img 的src / alt / title 等属性</h2><blockquote><p>样式：在style里面写的，用css来操作<br>属性：在里面里面写的，用attr方法操作。</p></blockquote><ul><li>用法和css一样  单个/多个/获取  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1.</span> 单个attr(k1,v1)</span><br><span class="line"> <span class="number">2.</span> 多个attr(k1,v1).attr(k2,v2)</span><br><span class="line"> <span class="number">3.</span> attr(&#123;<span class="attr">k1</span>:v1,<span class="attr">k2</span>:v2,<span class="attr">k3</span>:v3&#125;)</span><br><span class="line"> <span class="number">4.</span> attr(name) 获取name 的属性值</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section4 img'</span>).attr(<span class="string">'alt'</span>,<span class="string">'XXXXX'</span>)</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'.section4 img'</span>).attr(<span class="string">'alt'</span>))</span><br></pre></td></tr></table></figure><h2 id="美女相册点击小图，显示大图并更换提示文字"><a href="#美女相册点击小图，显示大图并更换提示文字" class="headerlink" title="美女相册点击小图，显示大图并更换提示文字"></a>美女相册点击小图，显示大图并更换提示文字</h2><blockquote><p>把点击的a标签的文字，传入下面ID为image 的src中  a标签title 替换P标签的内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.section5 #imagegallery a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">   <span class="keyword">var</span> asrc =  $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>)</span><br><span class="line">   <span class="keyword">var</span> astr =  $(<span class="keyword">this</span>).attr(<span class="string">'title'</span>)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#image'</span>).attr(<span class="string">'src'</span>,asrc)</span><br><span class="line">    $(<span class="string">'#des'</span>).text(astr)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>  <span class="comment">// 组织默认操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="prop-方法-只设置bool-类型-使用方法和attr-一样"><a href="#prop-方法-只设置bool-类型-使用方法和attr-一样" class="headerlink" title="prop 方法 只设置bool 类型 使用方法和attr 一样"></a>prop 方法 只设置bool 类型 使用方法和attr 一样</h2><blockquote><p>选中/不选中 获取bool类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.section6 input'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#ck'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>)            </span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'.section6 input'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#ck'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>)            </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="表格全选案例"><a href="#表格全选案例" class="headerlink" title="表格全选案例"></a>表格全选案例</h2><blockquote><p>thead input -&gt; tbody input<br>tbody input 选择的个数 0 false， 总个数 true -&gt;(决定) thead input </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 头部全选 下面的所有的li状态跟着变</span><br><span class="line">$(<span class="string">'#j_cbAll'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> che = $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line">    $(<span class="string">'#j_tb input'</span>).prop(<span class="string">'checked'</span>,che)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">2.</span>下面的全部选中，头部的input也选中</span><br><span class="line">$(<span class="string">'#j_tb input'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chedinput = $(<span class="string">'#j_tb input:checked'</span>)</span><br><span class="line">    <span class="keyword">var</span> all = $(<span class="string">'#j_tb input'</span>)</span><br><span class="line">    <span class="keyword">if</span>(chedinput.length == all.length)&#123;</span><br><span class="line">        $(<span class="string">'#j_cbAll'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">'#j_cbAll'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="三组基本动画"><a href="#三组基本动画" class="headerlink" title="三组基本动画"></a>三组基本动画</h2><h3 id="show"><a href="#show" class="headerlink" title="show()"></a>show()</h3><ul><li>show()动画 不传参数没有动画效果</li><li>show(speed) speed:100/fast:200ms/normal:400ms/slow:600</li><li>show(speed,callback)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           </span><br><span class="line">  <span class="comment">// show1.无参数直接显示</span></span><br><span class="line">   $(<span class="string">'.section8 div'</span>).show()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// show2设置速度</span></span><br><span class="line">  $(<span class="string">'.section8 div'</span>).show(<span class="string">'slow'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// show3 设置回调</span></span><br><span class="line">   $(<span class="string">'.section8 div'</span>).show(<span class="number">300</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'anomation done'</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="slideDowm"><a href="#slideDowm" class="headerlink" title="slideDowm()"></a>slideDowm()</h3><blockquote><p>slideDowm() slideUp() 滑入滑出 如果不传参数，默认nomarl 400ms<br>slideToggle 如果时滑入 就执行滑出动画，切换动画</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.section8 div'</span>).slideDown(<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).slideUp()</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).slideToggle()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="fadeIn"><a href="#fadeIn" class="headerlink" title="fadeIn()"></a>fadeIn()</h3><blockquote><p>fadeIn() fadeOut() fadeToggle() 淡入/淡出/切换淡入淡出</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.section8 div'</span>).fadeIn(<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).fadeOut()</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".section8 input"</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).fadeToggle()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="下拉菜单案例"><a href="#下拉菜单案例" class="headerlink" title="下拉菜单案例"></a>下拉菜单案例</h2><blockquote><p>mouseover：鼠标经过事件 mouseout:鼠标离开事件 mouseenter:鼠标进入事件 mouseleave：鼠标离开事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(<span class="string">".wrap&gt;ul&gt;li"</span>);</span><br><span class="line"><span class="comment">//给li注册鼠标经过事件，让自己的ul显示出来</span></span><br><span class="line">$li.mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//找到所有的儿子，并且还得是ul</span></span><br><span class="line">    <span class="comment">//stop：停止当前正在执行的动画</span></span><br><span class="line">    $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).stop().slideDown();</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">$li.mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).stop().slideUp();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="京东轮播图"><a href="#京东轮播图" class="headerlink" title="京东轮播图"></a>京东轮播图</h2><blockquote><p>左右侧切换加动画</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">$(<span class="string">".arrow-right"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span>(count == $(<span class="string">".slider li"</span>).length)&#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">    <span class="comment">//让count渐渐的显示，其他兄弟渐渐的隐藏</span></span><br><span class="line">    $(<span class="string">".slider li"</span>).eq(count).fadeIn().siblings(<span class="string">"li"</span>).fadeOut();</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">$(<span class="string">".arrow-left"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">-1</span>)&#123;</span><br><span class="line">        count = $(<span class="string">".slider li"</span>).length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">    <span class="comment">//让count渐渐的显示，其他兄弟渐渐的隐藏</span></span><br><span class="line">    $(<span class="string">".slider li"</span>).eq(count).fadeIn().siblings(<span class="string">"li"</span>).fadeOut();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><ul><li>自定义动画 animate(obj,speed,style,callback)<ul><li>第一个参数时动画的样式对象</li><li>第二个参数 speed 动画的执行时间</li><li>第三个参数 动画的执行效果</li><li>第四个参数 回调函数</li></ul></li><li>停止动画 stop(clearQueue,jumpToEnd) <ul><li>clearQueue 是否清除动画队列</li><li>jumpToEnd 是否跳转到当前动画的最终结果 </li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.section9 input'</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="comment">// $('.section9 #box1').animate(&#123;left:800&#125;,10000)</span></span><br><span class="line">    $(<span class="string">'.section9 #box1'</span>).animate(&#123;<span class="attr">left</span>:<span class="number">800</span>&#125;,<span class="number">5000</span>,<span class="string">'swing'</span>)  <span class="comment">// swing 秋千 摇摆</span></span><br><span class="line">    $(<span class="string">'.section9 #box2'</span>).animate(&#123;<span class="attr">left</span>:<span class="number">800</span>&#125;,<span class="number">5000</span>,<span class="string">'linear'</span>)  <span class="comment">// linear 匀速</span></span><br><span class="line">    $(<span class="string">'.section9 #box3'</span>).animate(&#123;<span class="attr">left</span>:<span class="number">800</span>&#125;,<span class="number">5000</span>,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'animate done liner 5s'</span>)</span><br><span class="line">    &#125;)   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">1.</span> stop:停止当前正在执行的动画</span><br><span class="line"><span class="number">2.</span> clearQueue:是否清除动画队列 <span class="literal">true</span>  <span class="literal">false</span></span><br><span class="line"><span class="number">3.</span> jumpToEnd:是否跳转到当前动画的最终效果 <span class="literal">true</span> <span class="literal">false</span></span><br><span class="line"><span class="number">4</span> .stop().animate();</span><br><span class="line">$(<span class="string">'.section9 input'</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".section9 #box1"</span>).stop(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="手风琴案例"><a href="#手风琴案例" class="headerlink" title="手风琴案例"></a>手风琴案例</h2><blockquote><p>设置所有的默认图片 li鼠标进入一个展开其他隐藏 移除鼠标 全部设置默认值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun12</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ul -&gt;6li li上</span></span><br><span class="line">    <span class="comment">// 设置背景图</span></span><br><span class="line">    <span class="keyword">var</span>  lis = $(<span class="string">'.section10 #box li'</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        lis.eq(i).css(<span class="string">'backgroundImage'</span>,<span class="string">'url(images/14-'</span> + (i +<span class="number">1</span> ) + <span class="string">'.jpg)'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 所有的li 注册鼠标进入事件</span></span><br><span class="line">    lis.mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).stop().animate(&#123;<span class="attr">width</span>:<span class="number">800</span>&#125;).siblings().stop().animate(&#123;<span class="attr">width</span>:<span class="number">100</span>&#125;)</span><br><span class="line">    &#125;).mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        lis.stop().animate(&#123;<span class="attr">width</span>:<span class="number">240</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h2><blockquote><p>把这些动画存储到一个动画队列里面</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun13</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.section11 #btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'.section11 div'</span>).animate(&#123;<span class="attr">left</span>:<span class="number">800</span>&#125;) </span><br><span class="line">                .animate(&#123;<span class="attr">top</span>:<span class="number">400</span>&#125;)</span><br><span class="line">                .animate(&#123;<span class="attr">width</span>:<span class="number">300</span>,<span class="attr">height</span>:<span class="number">300</span>&#125;)</span><br><span class="line">                .animate(&#123;<span class="attr">top</span>:<span class="number">0</span>&#125;)</span><br><span class="line">                .animate(&#123;<span class="attr">left</span>:<span class="number">0</span>&#125;)</span><br><span class="line">                .animate(&#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">100</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery-创建添加节点"><a href="#jQuery-创建添加节点" class="headerlink" title="jQuery 创建添加节点"></a>jQuery 创建添加节点</h2><blockquote><p>移动到里面 ：append appendTo prepend prependTo ；追加到前后： after before</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建jq对象</span></span><br><span class="line"><span class="keyword">var</span> lis = $(<span class="string">'&lt;a href="https://www.baidu.com" target="_blank"&gt;百度一下你不就知道'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(lis)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section12 div'</span>).append(<span class="string">'&lt;a href="https://www.baidu.com" target="_blank"&gt;百度一下你不就知道'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 添加到子元素的最后面</span></span><br><span class="line">$(<span class="string">'.section12 div'</span>).append($(<span class="string">'p'</span>))</span><br><span class="line">$(<span class="string">'p'</span>).appendTo($(<span class="string">'.section12 div'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加到元素的前面</span></span><br><span class="line">$(<span class="string">'.section12 div'</span>).prepend($(<span class="string">'p'</span>))</span><br><span class="line">$(<span class="string">'p'</span>).prependTo($(<span class="string">'.section12 div'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// after before </span></span><br><span class="line">$(<span class="string">'.section12 div'</span>).after($(<span class="string">"p"</span>));</span><br><span class="line">$(<span class="string">'.section12 div'</span>).before($(<span class="string">"p"</span>));</span><br></pre></td></tr></table></figure><h2 id="城市选择-案例"><a href="#城市选择-案例" class="headerlink" title="城市选择 案例"></a>城市选择 案例</h2><blockquote><p>点击 <code>&gt;&gt;</code> <code>&lt;&lt;</code> <code>&gt;</code>  <code>&lt;</code> 出发方法 全部移动 和选中部分移动</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// &gt;&gt;</span></span><br><span class="line">$(<span class="string">'.section13 #btn1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 全部移入右边</span></span><br><span class="line">    $(<span class="string">'#src-city&gt;option'</span>).appendTo($(<span class="string">'#tar-city'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;&lt;</span></span><br><span class="line">$(<span class="string">'.section13 #btn2'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// $('#tar-city&gt;option').appendTo($('#src-city'))</span></span><br><span class="line">    $(<span class="string">'#src-city'</span>).append($(<span class="string">'#tar-city&gt;option'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; </span></span><br><span class="line">$(<span class="string">'.section13 #btn3'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#src-city&gt;option:selected'</span>).appendTo($(<span class="string">'#tar-city'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;</span></span><br><span class="line">$(<span class="string">'.section13 #btn4'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#src-city'</span>).append($(<span class="string">'#tar-city&gt;option:selected'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="微博发布案例"><a href="#微博发布案例" class="headerlink" title="微博发布案例"></a>微博发布案例</h2><blockquote><p>将输入框文字  创建一个li 拼接到 ul 中 并将输入框清空</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>获取input 的内容 $(<span class="string">'input'</span>).val().trim() 判断长度</span><br><span class="line"><span class="number">2.</span>拼接到后面的ul中 </span><br><span class="line"><span class="number">3.</span>清空输入框</span><br><span class="line">$(<span class="string">'.section14 #btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> atext =  $(<span class="string">'.section14 #txt'</span>).val()</span><br><span class="line">    <span class="keyword">if</span> (atext.trim().length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// appendTo  拼入组件 在后面</span></span><br><span class="line">    <span class="comment">// prependTo 拼入组件 在前面</span></span><br><span class="line">    $(<span class="string">'&lt;li&gt;&lt;/li&gt;'</span>).text(atext).prependTo(<span class="string">'.section14 #ul'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空输入框</span></span><br><span class="line">    $(<span class="string">'.section14 #txt'</span>).val(<span class="string">""</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="清空节点-删除节点-清空一个元素"><a href="#清空节点-删除节点-清空一个元素" class="headerlink" title="清空节点 删除节点 清空一个元素"></a>清空节点 删除节点 清空一个元素</h2><blockquote><p> <code>html(&#39;&#39;)</code>  <code>empty()</code> <code>remove()</code>  复制节点 <code>clone(bool)</code></p></blockquote><ul><li>html(‘’) 会内存泄漏</li><li>清理门户 empty()</li><li>remove()</li><li>复制节点 clone(bool)  参数bool  默认是false<ul><li>false 的时候深度复制，不会复制事件</li><li>true 深复制 会复制事件</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1.</span>深复制事件</span><br><span class="line"> $(<span class="string">'.section15 .des'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'p click'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">$(<span class="string">'.section15 .des'</span>).clone(<span class="literal">true</span>).appendTo(<span class="string">'.section15 div'</span>)</span><br><span class="line">-------</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">$(<span class="string">'.section15 div'</span>).html(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">$(<span class="string">'.section15 div'</span>).empty()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">$(<span class="string">'.section15 div'</span>).remove()</span><br></pre></td></tr></table></figure><h2 id="弹幕效果-随机-XY-从右侧动画进入，出界面-隐藏"><a href="#弹幕效果-随机-XY-从右侧动画进入，出界面-隐藏" class="headerlink" title="弹幕效果  随机 XY 从右侧动画进入，出界面 隐藏"></a>弹幕效果  随机 XY 从右侧动画进入，出界面 隐藏</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1.</span> 随机色</span><br><span class="line">&gt; <span class="number">2.</span> 根据input内容 创建span </span><br><span class="line">&gt; <span class="number">3</span> 设置css 颜色 初始的left top 值（style中绝对定位） </span><br><span class="line">&gt; <span class="number">4.</span>设置动画 animate <span class="number">5</span>秒之内 left 修改为<span class="number">-1000</span> ，动画结束 移除span </span><br><span class="line">&gt; <span class="number">5.</span>清空输入输入框</span><br><span class="line">&gt; <span class="number">6.</span>监听键盘 keycode==<span class="number">13</span> 的时候 出发发射按钮</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"hotpink"</span>, <span class="string">"pink"</span>, <span class="string">"cyan"</span>, <span class="string">"yellowgreen"</span>, <span class="string">"purple"</span>, <span class="string">"deepskyblue"</span>];</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">$(<span class="string">'.section16 #btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> randcolor = colors[<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*colors.length)]</span><br><span class="line">    <span class="keyword">var</span> randy = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">var</span> atxe = $(<span class="string">'.section16 #text'</span>).val()</span><br><span class="line">    <span class="keyword">if</span>(atxe.trim().length == <span class="number">0</span>) &#123;<span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(<span class="string">'&lt;span&gt;&lt;/span&gt;'</span>).text(atxe)</span><br><span class="line">        .css(<span class="string">'color'</span>,randcolor)</span><br><span class="line">        .css(<span class="string">'left'</span>,<span class="string">'1400px'</span>)</span><br><span class="line">        .css(<span class="string">'top'</span>,randy)</span><br><span class="line">        .animate(&#123;<span class="attr">left</span>:<span class="string">'-100px'</span>&#125;,<span class="number">8000</span>, <span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).remove()</span><br><span class="line">        &#125;)</span><br><span class="line">    .appendTo(<span class="string">'.section16 #boxDom'</span>)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'.section16 #text'</span>).val(<span class="string">''</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回车触发</span></span><br><span class="line">$(<span class="string">'.section16 #text'</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(el.keyCode == <span class="number">13</span>)&#123;</span><br><span class="line">        $(<span class="string">'.section16 #btn'</span>).click()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery学习笔记01</title>
      <link href="/2018/05/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/jQuery01/"/>
      <url>/2018/05/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/jQuery01/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery基本概念"><a href="#jQuery基本概念" class="headerlink" title="jQuery基本概念"></a>jQuery基本概念</h1><blockquote><p>学习目标：学会如何使用jQuery，掌握jQuery的常用api，能够使用jQuery实现常见的效果。</p></blockquote><h2 id="为什么要学习jQuery？"><a href="#为什么要学习jQuery？" class="headerlink" title="为什么要学习jQuery？"></a>为什么要学习jQuery？</h2><p>【01-让div显示与设置内容.html】</p><p>使用javascript开发过程中，有许多的缺点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 查找元素的方法太少，麻烦。</span><br><span class="line"><span class="number">2.</span> 遍历伪数组很麻烦，通常要嵌套一大堆的<span class="keyword">for</span>循环。</span><br><span class="line"><span class="number">3.</span> 有兼容性问题。</span><br><span class="line"><span class="number">4.</span> 想要实现简单的动画效果，也很麻烦</span><br><span class="line"><span class="number">5.</span> 代码冗余。</span><br></pre></td></tr></table></figure><h2 id="jQuery初体验"><a href="#jQuery初体验" class="headerlink" title="jQuery初体验"></a>jQuery初体验</h2><p>【02-让div显示与设置内容.html】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//隐式迭代：偷偷的遍历，在jQuery中，不需要手动写for循环了，会自动进行遍历。</span></span><br><span class="line">        $(<span class="string">"div"</span>).show(<span class="number">200</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).text(<span class="string">"我是内容"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>优点总结：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 查找元素的方法多种多样，非常灵活</span><br><span class="line"><span class="number">2.</span> 拥有隐式迭代特性，因此不再需要手写<span class="keyword">for</span>循环了。</span><br><span class="line"><span class="number">3.</span> 完全没有兼容性问题。</span><br><span class="line"><span class="number">4.</span> 实现动画非常简单，而且功能更加的强大。</span><br><span class="line"><span class="number">5.</span> 代码简单、粗暴。</span><br></pre></td></tr></table></figure><blockquote><p>没有对比，就没有伤害，有了对比，处处戳中要害。</p></blockquote><h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery?"></a>什么是jQuery?</h2><blockquote><p>jQuery的官网 <a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a><br>jQuery就是一个js库，使用jQuery的话，会比使用JavaScript更简单。</p></blockquote><p>js库：把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。（animate.js、common.js）</p><p>我们知道了，jQuery其实就是一个js文件，里面封装了一大堆的方法方便我们的开发，其实就是一个加强版的common.js，因此我们学习jQuery，其实就是学习jQuery这个js文件中封装的一大堆方法。</p><h2 id="jQuery的版本"><a href="#jQuery的版本" class="headerlink" title="jQuery的版本"></a>jQuery的版本</h2><blockquote><p>官网下载地址：<a href="http://jquery.com/download/" target="_blank" rel="noopener">http://jquery.com/download/</a><br>jQuery版本有很多，分为1.x 2.x 3.x</p></blockquote><p>大版本分类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>x版本：能够兼容IE678浏览器</span><br><span class="line"><span class="number">2.</span>x版本：不兼容IE678浏览器</span><br><span class="line"><span class="number">1.</span>x和<span class="number">2.</span>x版本jquery都不再更新版本了，现在只更新<span class="number">3.</span>x版本。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>x版本：不兼容IE678，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）</span><br></pre></td></tr></table></figure><p>关于压缩版和未压缩版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jquery<span class="number">-1.12</span><span class="number">.4</span>.min.js:压缩版本，适用于生产环境，因为文件比较小，去除了注释、换行、空格等东西，但是基本没有颗阅读性。</span><br><span class="line">jquery<span class="number">-1.12</span><span class="number">.4</span>.js:未压缩版本，适用于学习与开发环境，源码清晰，易阅读。</span><br></pre></td></tr></table></figure><h2 id="jQuery的入口函数"><a href="#jQuery的入口函数" class="headerlink" title="jQuery的入口函数"></a>jQuery的入口函数</h2><p>使用jQuery的三个步骤：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 引入jQuery文件</span><br><span class="line"><span class="number">2.</span> 入口函数</span><br><span class="line"><span class="number">3.</span> 功能实现</span><br></pre></td></tr></table></figure><p>关于jQuery的入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery入口函数与js入口函数的对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</span><br><span class="line"><span class="number">2.</span>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</span><br></pre></td></tr></table></figure><h2 id="jQuery对象与DOM对象的区别（重点）"><a href="#jQuery对象与DOM对象的区别（重点）" class="headerlink" title="jQuery对象与DOM对象的区别（重点）"></a>jQuery对象与DOM对象的区别（重点）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</span><br><span class="line"><span class="number">2.</span> jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</span><br><span class="line"><span class="number">3.</span> jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））</span><br><span class="line"><span class="number">4.</span> DOM对象与jQuery对象的方法不能混用。</span><br></pre></td></tr></table></figure><p>DOM对象转换成jQuery对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = $(domObj);</span><br><span class="line"><span class="comment">// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象</span></span><br></pre></td></tr></table></figure><p>jQuery对象转换成DOM对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(“li”);</span><br><span class="line"><span class="comment">//第一种方法（推荐使用）</span></span><br><span class="line">$li[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$li.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>【练习：隔行变色案例.html】</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h2><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p><p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。【查看jQuery文档】</p><p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td style="text-align:left">获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td style="text-align:left">获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td style="text-align:left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td style="text-align:left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td style="text-align:left">获取class为redClass的div元素</td></tr></tbody></table><blockquote><p>总结：跟css的选择器用法一模一样。</p></blockquote><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td style="text-align:left">使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td style="text-align:left">使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><blockquote><p>跟CSS的选择器一模一样。</p></blockquote><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><blockquote><p>这类选择器都带冒号:</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td style="text-align:left">获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td style="text-align:left">获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td style="text-align:left">获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>【案例：隔行变色】</p><h2 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器(方法)"></a>筛选选择器(方法)</h2><blockquote><p>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td style="text-align:left">相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td style="text-align:left">相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td style="text-align:left">查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td style="text-align:left">查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td style="text-align:left">相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td style="text-align:left">找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td style="text-align:left">找上一次兄弟</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【案例：下拉菜单】<span class="keyword">this</span>+children+mouseenter+mouseleave</span><br><span class="line">【案例：突出展示】siblings+find</span><br><span class="line">【案例：手风琴】next+parent</span><br><span class="line">【案例：淘宝精品】index+eq</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>函数式编程-链式编程</title>
      <link href="/2017/06/13/2017b/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2017/06/13/2017b/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-函数式编程，链式编程定义"><a href="#1-函数式编程，链式编程定义" class="headerlink" title="1 函数式编程，链式编程定义"></a>1 函数式编程，链式编程定义</h3><ul><li>准备工作：自定义一个基类重写description 打印model 的时候能打印所有的属性<img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程1.png" width="400"></li><li>OC 中应用函数式编程，方法后面拼接()要能继续执行下去，所有要有返回值，使用block，返回值式自己。<img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程2.png" width="400"></li><li>方法的实现：<img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程3.png" width="400"></li><li>直接返回return，简写如下：<img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程4.png" width="400"></li></ul><h3 id="2-Swift是适合函数式编程-，方法后面带有-如果需要执行下去，加上返回值是自己的就可以链式编程下去。"><a href="#2-Swift是适合函数式编程-，方法后面带有-如果需要执行下去，加上返回值是自己的就可以链式编程下去。" class="headerlink" title="2 Swift是适合函数式编程 ，方法后面带有(),如果需要执行下去，加上返回值是自己的就可以链式编程下去。"></a>2 Swift是适合函数式编程 ，方法后面带有(),如果需要执行下去，加上返回值是自己的就可以链式编程下去。</h3><ul><li>形式  <img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程5.png" width="400"></li><li>实现 <img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程6.png" width="400"></li></ul><h3 id="3-响应式编程RAC-集成注意点"><a href="#3-响应式编程RAC-集成注意点" class="headerlink" title="3 响应式编程RAC - 集成注意点"></a>3 响应式编程RAC - 集成注意点</h3><ul><li>选择框架<ul><li>纯 swift 项目，继续使用 ReactiveCocoa 。但是 RAC 依赖于 ReactiveSwift ，等于你引入了两个库。</li><li>纯 OC 项目，需要使用 ReactiveObjC 。这个库里面包含原来 RAC 2的全部代码。</li><li>项目是 swift 和 OC 混编，需要同时引用 ReactiveCocoa 和 ReactiveObjCBridge 。但是 ReactiveObjCBridge 依赖于 ReactiveObjC ，所以你就等于引入了 4 个库。</li></ul></li><li>集成环境配置<ul><li>如果项目不是纯OC项目，那么编辑Podfile文件添加了pod ‘ReactiveCocoa’, ‘~&gt; 5.0.3’以后一定别忘了添加一行use_frameworks!用于生成动态链接库。</li><li>Xcode8导入时因为Swift2.3与Swift3.0的关系，导入后，无法成功编译程序，工程会弹出一个选择框，最好选第一个later，跳过swift编译。之后修改pod项目的Bulid Settings里搜swift_version之后把Swift Language Version变成3.0在使用command+shift+k进行clear下项目就OK了。</li></ul></li></ul><h3 id="4-RAC应用"><a href="#4-RAC应用" class="headerlink" title="4 RAC应用"></a>4 RAC应用</h3><ul><li>iOS中的事件<ul><li>目标（方法），代理，通知，KVO，时钟，网络</li><li><code>rac_signalForControlEvents</code>  target </li><li><code>rac_signalForSelector</code>  代理</li><li><code>rac_addObserverForName</code> 通知</li><li><code>rac_valuesAndChangesForKeyPath</code> KVO</li></ul></li><li><p>创建信号<code>RACSignal</code> <code>createSignal</code></p>   <img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程7.png" width="400"></li><li><p>信号， <code>RACSignal</code></p></li><li>状态：<ul><li>热信号：有订阅者，一旦订阅信息，就会执行</li><li>冷信号 只是定义，没有订阅，只是信号对象，不会工作 </li></ul></li></ul><h3 id="5-订阅者：-视图控制器需要知道加载数据的情况"><a href="#5-订阅者：-视图控制器需要知道加载数据的情况" class="headerlink" title="5 订阅者： 视图控制器需要知道加载数据的情况"></a>5 订阅者： 视图控制器需要知道加载数据的情况</h3><ul><li>订阅三种类型，next ID类型，error：出错处理，completion表示信号完成</li><li><p>加载过后订阅</p>   <img src="/2017/06/13/2017b/函数式编程-链式编程/函数式编程7.png" width="400"></li></ul><h3 id="6-RAC系统学习"><a href="#6-RAC系统学习" class="headerlink" title="6 RAC系统学习"></a>6 RAC系统学习</h3><ul><li>ReactiveCocoa常见类有哪些？<ul><li>RACSignal:表示有数据传递的时候</li><li>RACDisposable:取消订阅信号</li><li>RACSubscriber:订阅者,发送数据</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> runloop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>runTime</title>
      <link href="/2017/02/13/2017b/runTime/"/>
      <url>/2017/02/13/2017b/runTime/</url>
      
        <content type="html"><![CDATA[<h3 id="1-runTime-方法-class-copyPropertyList"><a href="#1-runTime-方法-class-copyPropertyList" class="headerlink" title="1. runTime 方法 class_copyPropertyList"></a>1. <code>runTime</code> 方法 <code>class_copyPropertyList</code></h3><ul><li>获取类属性列表使用<code>class_copyPropertyList()</code>方法  <img src="/2017/02/13/2017b/runTime/runTime1.png" width="400"></li><li>C语言函数，copy之后需要free()  <img src="/2017/02/13/2017b/runTime/runTime2.png" width="400"></li><li>使用字典转模型</li><li><p>获得self的属性列表，遍历字典，如果key 值在数组中，进行KVC赋值，</p>  <img src="/2017/02/13/2017b/runTime/runTime3.png" width="400"></li><li><p>cz_objectProperties方法会调用很多变，需要进行关联缓存处理</p></li><li><p>从关联对象中获取对象属性，如果有，直接返回</p></li><li><p>获取之后的数组，<code>objc_setAssociatedObject</code> 添加关联对象</p>  <img src="/2017/02/13/2017b/runTime/runTime4.png" width="400"></li></ul><h3 id="2-方法交换"><a href="#2-方法交换" class="headerlink" title="2.方法交换"></a>2.方法交换</h3><ul><li><code>load</code> 方法中交换， 在类被加载到运行时的时候，就会被执行  <img src="/2017/02/13/2017b/runTime/runTime5.png" width="400"></li><li>method_exchangeImplementations() 执行之后，交换2个方法</li><li><p>调用setImage：相当于调用cz_setImage：</p></li><li><p>调用cz_setImage：相当于调用setImage：</p>  <img src="/2017/02/13/2017b/runTime/runTime6.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> runTime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>runloop解决Cell上主线程卡顿</title>
      <link href="/2017/02/12/2017b/runloop%E8%A7%A3%E5%86%B3Cell%E4%B8%8A%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%8D%A1%E9%A1%BF/"/>
      <url>/2017/02/12/2017b/runloop%E8%A7%A3%E5%86%B3Cell%E4%B8%8A%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%8D%A1%E9%A1%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="1解决cell上的主线程加载卡顿问题"><a href="#1解决cell上的主线程加载卡顿问题" class="headerlink" title="1解决cell上的主线程加载卡顿问题"></a>1解决cell上的主线程加载卡顿问题</h3><ul><li>通过添加runloop 观察者，卡顿等待的时候进行处理</li><li>视频地址<ul><li><a href="http://v.youku.com/v_show/id_XODgxODkzODI0.html" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XODgxODkzODI0.html</a></li></ul></li><li><p>RunLoopMode 5 种mode</p>  <img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿1.png"></li><li><p>使用 C 创建观察者 </p><ul><li>获取当前的runloop: CFRunLoopRef runloop = CFRunLoopGetCurrent();</li><li>创建观察者</li><li><p>参数1：分配者，NUll 或者Defaul ,参数2:活动标志，等待前处理，参数3:重复，参数4:从0开始，参数5：监听到的回调函数地址，参数6:观察者上下文，结构体指针</p><img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿2.png"><img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿3.png" width="400"></li></ul></li></ul><ul><li><p>上面参数callout,需要传入函数的地址，观察者，活动状态，本文背景是等待的情况下，传入的info</p>  <img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿4.png" width="400"><ul><li><p>添加观察者</p><img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿5.png"></li></ul></li><li><p>在回调中回去self，获取不到，需要用上下文中的info参数传递，</p>  <img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿6.png"></li><li><p>在上面回调中处理cell中添加的任务</p></li><li><p>cell中的任务加载block中，将代码块添加到数组中,延迟执行</p>  <img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿7.png"></li><li><p>将任务加入到任务数组中</p>  <img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿8.png"></li><li><p>callback 方法中，执行任务，执行之后删除任务</p>  <img src="/2017/02/12/2017b/runloop解决Cell上主线程卡顿/Cell上主线程卡顿9.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> runloop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片打码(系统自带 VS openCV)</title>
      <link href="/2017/02/10/2017b/%E5%9B%BE%E7%89%87%E6%89%93%E7%A0%81(%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%20VS%20openVC)/"/>
      <url>/2017/02/10/2017b/%E5%9B%BE%E7%89%87%E6%89%93%E7%A0%81(%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%20VS%20openVC)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-实用系统自带的API进行图片打码"><a href="#1-实用系统自带的API进行图片打码" class="headerlink" title="1.实用系统自带的API进行图片打码"></a>1.实用系统自带的API进行图片打码</h3><ul><li>原图片进行打码，没有头像检测，全部打码</li><li>获取图像上下文，</li><li>获取宽高</li><li>获取颜色空间</li><li>创建图像内容上下文</li><li><p>根据上下文绘制图片</p>  <img src="/2017/02/10/2017b/图片打码(系统自带%20VS%20openVC)/图片打码1.png" width="400"></li><li><p>获取上下文绘制的图片空间，内存地址</p></li><li><p>根据内存中地址，运用C函数，自己定义算法进行打码处理，（可以局部打码）</p>  <img src="/2017/02/10/2017b/图片打码(系统自带%20VS%20openVC)/图片打码2.png" width="400"></li><li><p>根据像素点处理好的图片内存，获取图片数据集合，</p></li><li>输出图片</li><li><p>释放内存</p>  <img src="/2017/02/10/2017b/图片打码(系统自带%20VS%20openVC)/图片打码3.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片转化为视频</title>
      <link href="/2017/02/03/2017b/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%8C%96%E4%B8%BA%E8%A7%86%E9%A2%91/"/>
      <url>/2017/02/03/2017b/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%8C%96%E4%B8%BA%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<ul><li>图片转为视频流<ul><li>使用 <code>AVAssetWriter</code>. <code>AVAssetWriterInputPixelBufferAdaptor</code> 处理<a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片转为视频频</span></span><br><span class="line">- (void) testchangeImageToVideo&#123;</span><br><span class="line">    <span class="type">NSArray</span> *imageArr = [<span class="type">NSArray</span> arrayWithObjects:[[<span class="type">UIImage</span> imageNamed:@<span class="string">"114.png"</span>] <span class="type">CGImage</span>],[[<span class="type">UIImage</span> imageNamed:@<span class="string">"114.png"</span>] <span class="type">CGImage</span>],[[<span class="type">UIImage</span> imageNamed:@<span class="string">"placeholderImage.png"</span>] <span class="type">CGImage</span>],[[<span class="type">UIImage</span> imageNamed:@<span class="string">"dfd.png"</span>] <span class="type">CGImage</span>],[[<span class="type">UIImage</span> imageNamed:@<span class="string">"viewbg.png"</span>] <span class="type">CGImage</span>], <span class="literal">nil</span>];</span><br><span class="line">    <span class="type">CGSize</span> size = <span class="type">CGSizeMake</span>(<span class="number">480</span>, <span class="number">320</span>);</span><br><span class="line">    <span class="type">NSString</span> *betaCompressionDirectory = [<span class="type">NSHomeDirectory</span>() stringByAppendingPathComponent:@<span class="string">"Documents/Movie.m4v"</span>];</span><br><span class="line">    <span class="type">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    unlink([betaCompressionDirectory <span class="type">UTF8String</span>]);</span><br><span class="line">    <span class="type">AVAssetWriter</span> *videoWriter = [[<span class="type">AVAssetWriter</span> alloc] initWithURL:[<span class="type">NSURL</span> fileURLWithPath:betaCompressionDirectory]</span><br><span class="line">                                </span><br><span class="line">                                                        fileType:<span class="type">AVFileTypeQuickTimeMovie</span></span><br><span class="line">                                </span><br><span class="line">                                                            error:&amp;error];</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSParameterAssert</span>(videoWriter);</span><br><span class="line">    <span class="keyword">if</span>(error)</span><br><span class="line">        <span class="type">NSLog</span>(@<span class="string">"error = %@"</span>, [error localizedDescription]);</span><br><span class="line">    <span class="type">NSDictionary</span> *videoSettings = [<span class="type">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="type">AVVideoCodecH264</span>, <span class="type">AVVideoCodecKey</span>,</span><br><span class="line">                                [<span class="type">NSNumber</span> numberWithInt:size.width], <span class="type">AVVideoWidthKey</span>,</span><br><span class="line">                                [<span class="type">NSNumber</span> numberWithInt:size.height], <span class="type">AVVideoHeightKey</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="type">AVAssetWriterInput</span> *writerInput = [<span class="type">AVAssetWriterInput</span> assetWriterInputWithMediaType:<span class="type">AVMediaTypeVideo</span> outputSettings:videoSettings];</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSDictionary</span> *sourcePixelBufferAttributesDictionary = [<span class="type">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                                                        </span><br><span class="line">                                                        [<span class="type">NSNumber</span> numberWithInt:kCVPixelFormatType_32ARGB], kCVPixelBufferPixelFormatTypeKey, <span class="literal">nil</span>];</span><br><span class="line">    <span class="type">AVAssetWriterInputPixelBufferAdaptor</span> *adaptor = [<span class="type">AVAssetWriterInputPixelBufferAdaptor</span> assetWriterInputPixelBufferAdaptorWithAssetWriterInput:writerInput sourcePixelBufferAttributes:sourcePixelBufferAttributesDictionary];</span><br><span class="line">    <span class="type">NSParameterAssert</span>(writerInput);</span><br><span class="line">    <span class="type">NSParameterAssert</span>([videoWriter canAddInput:writerInput]);</span><br><span class="line">    <span class="keyword">if</span> ([videoWriter canAddInput:writerInput])</span><br><span class="line">        <span class="type">NSLog</span>(@<span class="string">"I can add this input"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="type">NSLog</span>(@<span class="string">"i can't add this input"</span>);</span><br><span class="line">    [videoWriter addInput:writerInput];</span><br><span class="line">    [videoWriter startWriting];</span><br><span class="line">    [videoWriter startSessionAtSourceTime:kCMTimeZero];</span><br><span class="line">    <span class="comment">// insert demo debugging code to write the same image repeated as a movie</span></span><br><span class="line">    <span class="type">CGImageRef</span> theImage = [[<span class="type">UIImage</span> imageNamed:@<span class="string">"114.png"</span>] <span class="type">CGImage</span>];</span><br><span class="line">    dispatch_queue_t    dispatchQueue = dispatch_queue_create(<span class="string">"mediaInputQueue"</span>, <span class="type">NULL</span>);</span><br><span class="line">    int __block         frame = <span class="number">0</span>;</span><br><span class="line">    [writerInput requestMediaDataWhenReadyOnQueue:dispatchQueue usingBlock:^&#123;</span><br><span class="line">        <span class="keyword">while</span> ([writerInput isReadyForMoreMediaData])&#123;</span><br><span class="line">            <span class="keyword">if</span>(++frame &gt;= imageArr.<span class="built_in">count</span> * <span class="number">40</span>)&#123;</span><br><span class="line">                [writerInput markAsFinished];</span><br><span class="line">                [videoWriter finishWriting];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            int idx = frame/<span class="number">40</span>;</span><br><span class="line">            <span class="type">CVPixelBufferRef</span> buffer = (<span class="type">CVPixelBufferRef</span>)[<span class="keyword">self</span> pixelBufferFromCGImage:(__bridge <span class="type">CGImageRef</span>)([imageArr objectAtIndex:idx]) size:size];</span><br><span class="line">            <span class="keyword">if</span> (buffer)&#123;</span><br><span class="line">                <span class="keyword">if</span>(![adaptor appendPixelBuffer:buffer withPresentationTime:<span class="type">CMTimeMake</span>(frame, <span class="number">20</span>)])</span><br><span class="line">                    <span class="type">NSLog</span>(@<span class="string">"FAIL"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="type">NSLog</span>(@<span class="string">"Success:%d"</span>, frame);</span><br><span class="line">            <span class="type">CFRelease</span>(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">"outside for loop"</span>);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">CVPixelBufferRef</span> )pixelBufferFromCGImage:(<span class="type">CGImageRef</span>)image size:(<span class="type">CGSize</span>)size&#123;</span><br><span class="line">    <span class="type">NSDictionary</span> *options = [<span class="type">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                            [<span class="type">NSNumber</span> numberWithBool:<span class="type">YES</span>], kCVPixelBufferCGImageCompatibilityKey,</span><br><span class="line">                            [<span class="type">NSNumber</span> numberWithBool:<span class="type">YES</span>], kCVPixelBufferCGBitmapContextCompatibilityKey, <span class="literal">nil</span>];</span><br><span class="line">    <span class="type">CVPixelBufferRef</span> pxbuffer = <span class="type">NULL</span>;</span><br><span class="line"><span class="type">CVReturn</span> status = <span class="type">CVPixelBufferCreate</span>(kCFAllocatorDefault, size.width, size.height, kCVPixelFormatType_32ARGB, (__bridge <span class="type">CFDictionaryRef</span>) options, &amp;pxbuffer);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// CVReturn status = CVPixelBufferPoolCreatePixelBuffer(NULL, adaptor.pixelBufferPool, &amp;pxbuffer);</span></span><br><span class="line">    <span class="type">NSParameterAssert</span>(status == kCVReturnSuccess &amp;&amp; pxbuffer != <span class="type">NULL</span>);</span><br><span class="line">    <span class="type">CVPixelBufferLockBaseAddress</span>(pxbuffer, <span class="number">0</span>);</span><br><span class="line">    void *pxdata = <span class="type">CVPixelBufferGetBaseAddress</span>(pxbuffer);</span><br><span class="line">    <span class="type">NSParameterAssert</span>(pxdata != <span class="type">NULL</span>);</span><br><span class="line">    <span class="type">CGColorSpaceRef</span> rgbColorSpace = <span class="type">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    <span class="type">CGContextRef</span> context = <span class="type">CGBitmapContextCreate</span>(pxdata, size.width, size.height, <span class="number">8</span>, <span class="number">4</span>*size.width, rgbColorSpace, kCGImageAlphaPremultipliedFirst);</span><br><span class="line">    <span class="type">NSParameterAssert</span>(context);</span><br><span class="line">    <span class="type">CGContextDrawImage</span>(context, <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="type">CGImageGetWidth</span>(image), <span class="type">CGImageGetHeight</span>(image)), image);</span><br><span class="line">    </span><br><span class="line">    <span class="type">CGColorSpaceRelease</span>(rgbColorSpace);</span><br><span class="line">    <span class="type">CGContextRelease</span>(context);</span><br><span class="line">    <span class="type">CVPixelBufferUnlockBaseAddress</span>(pxbuffer, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> pxbuffer;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swiftSQLite</title>
      <link href="/2016/09/28/2016b/swiftSQLite/"/>
      <url>/2016/09/28/2016b/swiftSQLite/</url>
      
        <content type="html"><![CDATA[<h3 id="使用FMDB-存储本地数据，增删改查"><a href="#使用FMDB-存储本地数据，增删改查" class="headerlink" title="使用FMDB 存储本地数据，增删改查"></a>使用FMDB 存储本地数据，增删改查</h3><ul><li><p>创建管理类 </p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite1.png" width="400"></li><li><p>使用当前用户的ID， 返回需要的字典数组</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite2.png" width="400"></li><li><p>回滚的处理</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite3.png" width="400"></li><li><p>从本地加载数据，和网络请求数据的参数一样，方便处理，在viewModel中，内部处理VC不关心是从本地还是从网络数据</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite4.png" width="400"></li><li><p>ViewModel 中，不改变控制器代码，增加本地数据读取</p></li><li><p>加载完成网络数据时，把数据存入本地数据库中，</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite5.png" width="400"></li><li><p>仿SDWebImage 固定时间清楚缓存</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite6.png" width="400"></li><li><p>SDWebImage 的监听系统时间，</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite7.png" width="400"></li><li><p>在程序中，没有通过sql  指定字段的值，就使用default 的值替代</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite8.png" width="400"></li><li><p>清楚缓存 如果超过了7天之后，把日期小于7天前的日期数据删除</p>  <img src="/2016/09/28/2016b/swiftSQLite/swiftSQLite9.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift泛型</title>
      <link href="/2016/09/27/2016b/swift%E6%B3%9B%E5%9E%8B/"/>
      <url>/2016/09/27/2016b/swift%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-类型约束"><a href="#1-类型约束" class="headerlink" title="1.类型约束"></a>1.类型约束</h3><ul><li><p>你可以在一个类型参数名后面放置一个类名或者协议名，并用冒号进行分隔，来定义类型约束，它们将成为类型参数列表的一部分。对泛型函数添加类型约束的基本语法如下所示（作用于泛型类型时的语法与之相同）：</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型1.png" width="400"></li><li><p>下面展示了 <code>findIndex(ofString:in:)</code> 函数的泛型版本 findIndex(ofString:in:)。请注意这个函数返回值的类型仍然是 Int?，这是因为函数返回的是一个可选的索引数，而不是从数组中得到的一个可选值。需要提醒的是，这个函数无法通过编译，原因会在例子后面说明：</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型2.png" width="400"></li><li><p>上面所写的函数无法通过编译。问题出在相等性检查上，即 <code>if value == valueToFind</code>。不是所有的 Swift 类型都可以用等式符（==）进行比较。比如说，如果你创建一个自定义的类或结构体来表示一个复杂的数据模型，那么 Swift 无法猜到对于这个类或结构体而言“相等”意味着什么。</p></li><li><p>Swift 标准库中定义了一个 <code>Equatable</code> 协议，该协议要求任何遵循该协议的类型必须实现等式符（==）及不等符(!=) ,所有的 Swift 标准类型自动支持 Equatable 协议</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型3.png" width="400"></li><li><p><code>findIndex(of:in:)</code> 唯一的类型参数写做 T: Equatable，也就意味着“任何符合 Equatable 协议的类型 T </p></li></ul><h3 id="2-关联类型"><a href="#2-关联类型" class="headerlink" title="2.关联类型"></a>2.关联类型</h3><ul><li><p>定义一个协议时，有的时候声明一个或多个关联类型作为协议定义的一部分将会非常有用。关联类型为协议中的某个类型提供了一个占位名（或者说别名），其代表的实际类型在协议被采纳时才会被指定。你可以通过 <code>associatedtype</code> 关键字来指定关联类型。</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型4.png" width="400"></li><li><p>协议没有指定容器中元素的类型，只指定了遵守协议，必须实现的方法，同时声明了<code>associatedtype</code> 的<code>ItemType</code> 关联类型。这个协议无法定义 ItemType 是什么类型的别名，这个信息将留给遵从协议的类型来提供</p></li><li><p>intStack 遵守Container 协议，需要实现协议的方法，指定关联类型的真是类型。</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型5.png" width="400"></li><li><p>由于swift中的类型推导，不用写typealias ItemType = Int ,省略这一句，会推导append(item:) 方法，传的是什么类型，</p></li><li><p>Stack 遵守Container协议，stack 是范型，具体的类型，有外部就决定 append(item:) 传入的是范型的类型：代码如下</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型6.png" width="400"></li></ul><h3 id="3-范型where-语句"><a href="#3-范型where-语句" class="headerlink" title="3.范型where 语句"></a>3.范型<code>where</code> 语句</h3><ul><li><p>为关联类型定义约束也是非常有用的，可以在参数列表中通过where语句，为关联类型定义约束。</p></li><li><p>where 使用场景</p><ul><li>可以通过where 语句，要求关联类型遵守特定的协议，以及某个参数的类型必须和关联类型的类型相同，</li><li>可以通过where语句，紧跟参数列表后面来定义where语句，where子句后面跟一个或者多个针对关联类型的约束，以及一个或者多个参数类型和关联类型的相等关系。</li><li>可以在函数体或类型大括号之前添加where语句</li></ul></li><li><p>例子检验2个容器是不是相同，其中元素个数，顺序，顺序上的值是否都相同？</p>  <img src="/2016/09/27/2016b/swift泛型/swift泛型7.png" width="400"></li><li><p>这个函数接受 someContainer 和 anotherContainer 两个参数。参数 someContainer 的类型为 C1，参数 anotherContainer 的类型为 C2。C1 和 C2 是容器的两个占位类型参数，函数被调用时才能确定它们的具体类型</p></li><li><p>C1 必须符合 Container 协议（写作 C1: Container）。 C2 必须符合 Container 协议（写作 C2: Container）。</p></li><li><p>C1 的 ItemType 必须和 C2 的 ItemType类型相同 ，C1 的 ItemType 必须符合 Equatable 协议，第三个和第四个要求被定义为一个 where 子句，写在关键字 where 后面，它们也是泛型函数类型参数列表的一部分</p></li><li><p>someContainer和 anotherContainer可以通过<code>!=</code> 操作其中的元素</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> swift泛型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift协议</title>
      <link href="/2016/09/26/2016b/swift%E5%8D%8F%E8%AE%AE/"/>
      <url>/2016/09/26/2016b/swift%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-协议"><a href="#1-协议" class="headerlink" title="1.协议"></a>1.协议</h3><ul><li><p>协议的语法：</p><ul><li><p>定义协议</p></li><li><p>遵守协议：在类型名称后面，加上协议名称，用<code>:</code> 隔开，协议之间用<code>,</code>隔开</p></li><li><p>继承父类的子类的时候，应该把父类写在协议前面，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protocol SomeProtocol &#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>: <span class="type">SomeSuperClass</span>, <span class="type">FirstProtocol</span>, <span class="type">AnotherProtocol &#123;&#125;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性要求</p><ul><li>协议中定义了属性，遵守该协议的实例或类型，必须有这个属性</li><li><p>协议的中定义属性，只指定属性的名称和类型，还指定属性的可读性，可写性，</p><img src="/2016/09/26/2016b/swift协议/swift协议1.png" width="400"><img src="/2016/09/26/2016b/swift协议/swift协议2.png" width="400"></li></ul></li><li><p>方法要求</p><ul><li>和普通方法一样，但不需要{} 和方法体，方法的参数列表也不支持默认值</li></ul></li><li><p>Mutating 方法要求</p><ul><li>如果你在协议中定义了一个实例方法，该方法会改变遵循该协议的类型的实例，那么在定义协议时需要在方法前加 mutating 关键字。这使得结构体和枚举能够遵循此协议并满足此方法要求。</li></ul></li><li><p>构造器要求</p><ul><li><p>协议可以要求遵循协议的类型实现指定的构造器。你可以像编写普通构造器那样，在协议的定义里写下构造器的声明，但不需要写花括号和构造器的实体</p><img src="/2016/09/26/2016b/swift协议/swift协议3.png" width="400"><img src="/2016/09/26/2016b/swift协议/swift协议4.png" width="400"></li><li><p>实现的时候，遵守代理的构造器方法需要加上关键字<code>required</code></p></li><li>如果一个类是定义了<code>final</code>,不需要在写required，因为不会有子类，final是为了防止重写</li><li>如果子类重写了父类的指定构造器，并且指定构造器遵循了某个协议，该方法同时需要写关键字<code>required</code>和<code>overri</code></li></ul></li><li><p>协议作为类型</p>  <figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sides: <span class="keyword">Int</span></span><br><span class="line">    <span class="keyword">let</span> generator: RandomNumberGenerator</span><br><span class="line">    init(sides: <span class="keyword">Int</span>, generator: RandomNumberGenerator) &#123;</span><br><span class="line">        <span class="keyword">self</span>.sides = sides</span><br><span class="line">        <span class="keyword">self</span>.generator = generator</span><br><span class="line">    &#125;</span><br><span class="line">    func roll() -&gt; <span class="keyword">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">Int</span>(generator.random() * <span class="keyword">Double</span>(sides)) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Dice 类提供了一个名为 roll 的实例方法，用来模拟骰子的面值。它先调用 generator 的 random() 方法来生成一个 [0.0,1.0) 区间内的随机数，然后使用这个随机数生成正确的骰子面值。因为 generator 遵循了 RandomNumberGenerator 协议，可以确保它有个 random() 方法可供调用</p></li></ul><h3 id="2-委托（代理）模式"><a href="#2-委托（代理）模式" class="headerlink" title="2.委托（代理）模式"></a>2.委托（代理）模式</h3><ul><li><p>protocol - delegate</p> <img src="/2016/09/26/2016b/swift协议/swift协议5.png" width="400"></li></ul><h3 id="3-通过扩展添加协议一致性，通过扩展遵循协议"><a href="#3-通过扩展添加协议一致性，通过扩展遵循协议" class="headerlink" title="3.通过扩展添加协议一致性，通过扩展遵循协议"></a>3.通过扩展添加协议一致性，通过扩展遵循协议</h3><ul><li>当一个类型已经符合了某个协议中的所有要求，却还没有声明遵循该协议时，可以通过空扩展体的扩展来遵循该协议：</li></ul><h3 id="4-协议类型的集合，协议的继承"><a href="#4-协议类型的集合，协议的继承" class="headerlink" title="4.协议类型的集合，协议的继承"></a>4.协议类型的集合，协议的继承</h3><ul><li><p>协议能够继承一个或多个其他协议，可以在继承的协议的基础上增加新的要求</p>  <img src="/2016/09/26/2016b/swift协议/swift协议6.png" width="400"></li><li><p>例子中定义了一个新的协议 PrettyTextRepresentable，它继承自 TextRepresentable 协议。任何遵循 PrettyTextRepresentable 协议的类型在满足该协议的要求时，也必须满足 TextRepresentable 协议的要求</p></li></ul><h3 id="5-类类型专属协议"><a href="#5-类类型专属协议" class="headerlink" title="5.类类型专属协议"></a>5.类类型专属协议</h3><ul><li><p>只适用一某种类型</p>  <img src="/2016/09/26/2016b/swift协议/swift协议7.png" width="400"></li></ul><h3 id="6-协议合成"><a href="#6-协议合成" class="headerlink" title="6.协议合成"></a>6.协议合成</h3><ul><li><p>有时候需要同时遵循多个协议，你可以将多个协议采用 SomeProtocol &amp; AnotherProtocol 这样的格式进行组合，称为 协议合成（protocol composition）。你可以罗列任意多个你想要遵循的协议，以与符号(&amp;)分隔。</p>  <img src="/2016/09/26/2016b/swift协议/swift协议8.png" width="400"></li></ul><h3 id="7-检查协议一致性"><a href="#7-检查协议一致性" class="headerlink" title="7.检查协议一致性"></a>7.检查协议一致性</h3><ul><li>Circle，Country，遵守了HasArea协议，协议中有只读的area属性</li><li>Animal 没有遵守HasArea协议</li><li><p>上面三个各自实例，判断是不是符合某个协议的，使用<code>as?</code>, 返回可选值，进行可选值绑定</p>  <img src="/2016/09/26/2016b/swift协议/swift协议9.png" width="400">  </li></ul><h3 id="8-可选的协议要求"><a href="#8-可选的协议要求" class="headerlink" title="8.可选的协议要求"></a>8.可选的协议要求</h3><ul><li>可选的时候使用<code>optional</code> 关键字</li><li><p>可选要求用在你需要和 Objective-C 打交道的代码中。协议和可选要求都必须带上@objc属性</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">CounterDataSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">incrementForCount</span><span class="params">(<span class="built_in">count</span>: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">    <span class="keyword">optional</span> <span class="keyword">var</span> fixedIncrement: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/26/2016b/swift协议/swift协议12.png" width="400"></li></ul><h3 id="8-协议扩展"><a href="#8-协议扩展" class="headerlink" title="8.协议扩展"></a>8.协议扩展</h3><ul><li>协议可以通过扩展来为遵循协议的类型提供属性、方法以及下标的实现。通过这种方式，你可以基于协议本身来实现这些功能，而无需在每个遵循协议的类型中都重复同样的实现，也无需使用全局函数</li><li><p>扩展<code>RandomNumberGenerator</code>协议,增加<code>randomBool()</code> 方法</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">RandomNumberGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">randomBool</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> random() &gt; <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供默认实现</p>  <img src="/2016/09/26/2016b/swift协议/swift协议13.png" width="400"></li><li><p>为协议扩展添加限制条件</p><ul><li>在扩展协议的时候，可以指定一些限制条件，只有遵循协议的类型满足这些限制条件时，才能获得协议扩展提供的默认实现。这些限制条件写在协议名之后，使用 where 子句来描述<img src="/2016/09/26/2016b/swift协议/swift协议14.png" width="400"><img src="/2016/09/26/2016b/swift协议/swift协议15.png" width="400"><img src="/2016/09/26/2016b/swift协议/swift协议16.png" width="400"></li></ul></li></ul><ul><li>textualDescription返回整个集合的文本描述，讲文本描述用，拼接起来，包括在【】中</li><li>Hamster 结构体符合TextRepresentable协议，放在一个数组中，array 符合CollectionType协议，</li><li>可以进行textualDescription方法，</li><li>如果多个协议扩展都为同一个协议要求提供了默认实现，而遵循协议的类型又同时满足这些协议扩展的限制条件，那么将会使用限制条件最多的那个协议扩展提供的默认实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> protocol </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift扩展Extensions</title>
      <link href="/2016/09/25/2016b/swift%E6%89%A9%E5%B1%95Extensions/"/>
      <url>/2016/09/25/2016b/swift%E6%89%A9%E5%B1%95Extensions/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Extension"><a href="#1-Extension" class="headerlink" title="1.Extension"></a>1.Extension</h3><ul><li><p>扩展 就是为一个已有的类、结构体、枚举类型或者协议类型添加新功能</p></li><li><p>语法：<code>extension SomeType { }</code></p></li><li><p>可以使用的功能：</p><ul><li><p>添加计算行属性，计算类型属性</p></li><li><p>定义实例方法和类型方法</p></li><li><p>提供新的构造器</p></li><li><p>定义下标</p></li><li><p>定义和使用新的嵌套类型</p></li><li><p>使用已有类型符合某个协议。</p></li></ul></li></ul><h3 id="计算型属性"><a href="#计算型属性" class="headerlink" title="计算型属性"></a>计算型属性</h3><ul><li><p>为一个类增加计算属性</p><img src="/2016/09/25/2016b/swift扩展Extensions/swift扩展Extensions1.png" width="400"></li></ul><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul><li><p>扩展能为类添加新的便利构造器，但是它们不能为类添加新的指定构造器或析构器。指定构造器和析构器必须总是由原始的类实现来提供</p>  <img src="/2016/09/25/2016b/swift扩展Extensions/swift扩展Extensions2.png" width="400"><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3></li><li><p>扩展可以为已有类型添加新的实例方法和类型方法</p>  <img src="/2016/09/25/2016b/swift扩展Extensions/swift扩展Extensions3.png" width="400"></li><li><p>使用: 3.repetitions({ print(“Hello!”)})</p></li><li>可变实例方法：</li><li><p>结构体和枚举中，修改self或其属性方法，必须加上mutating</p>  <img src="/2016/09/25/2016b/swift扩展Extensions/swift扩展Extensions4.png" width="400"></li></ul><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><ul><li><p>扩展可以为已有类型添加新下标。这个例子为 Swift 内建类型 Int 添加了一个整型下标。该下标 [n] 返回十进制数字从右向左数的第 n 个数字 </p> <img src="/2016/09/25/2016b/swift扩展Extensions/swift扩展Extensions5.png" width="400"></li></ul><h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><ul><li><p>为Int添加了嵌套枚举，用来表示是正数，负数，0</p>  <img src="/2016/09/25/2016b/swift扩展Extensions/swift扩展Extensions6.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> extension </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift错误处理</title>
      <link href="/2016/09/24/2016b/swift%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2016/09/24/2016b/swift%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-表示并抛出错误"><a href="#1-表示并抛出错误" class="headerlink" title="1.表示并抛出错误"></a>1.表示并抛出错误</h3><ul><li><p>在 Swift 中，错误用符合Error协议的类型的值来表示</p>  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">VendingMachineError</span>: <span class="title">Error</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> invalidSelection                     /<span class="regexp">/选择无效</span></span><br><span class="line"><span class="regexp">    case insufficientFunds(coinsNeeded: Int) /</span><span class="regexp">/金额不足</span></span><br><span class="line"><span class="regexp">    case outOfStock                             /</span><span class="regexp">/缺货</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>swift 枚举，创建一组错误状态，枚举关联值，可以提供错误状态额外信息，遇见错误的时候，可以抛出异常，使用throw</p></li><li><p><code>throw VendingMachineError. insufficientFunds(coinsNeeded: 5)</code></p></li></ul><h3 id="2-处理错误"><a href="#2-处理错误" class="headerlink" title="2.处理错误"></a>2.处理错误</h3><ul><li><p>swift 中有4中错误处理方法：</p><ul><li><p>可以讲函数抛出的异常，传递给调用函数的代码</p></li><li><p>使用<code>do-cantch</code> 语句处理错误</p></li><li><p>讲错误当作可选项处理</p></li><li><p>断言此处不会出现错误</p></li></ul><h3 id="3-用-throwing-函数传递错误"><a href="#3-用-throwing-函数传递错误" class="headerlink" title="3.用 throwing 函数传递错误"></a>3.用 throwing 函数传递错误</h3></li><li><p>在函数声明参数列表之后加上throw，在箭头（-&gt;） 前面</p><ul><li>func canThrowErrors() throws -&gt; String</li></ul></li><li><p>因为vend(itemNamed:)方法能抛出错误，所以在调用的它时候在它前面加了try关键字。</p>  <img src="/2016/09/24/2016b/swift错误处理/swift错误处理1.png" width="400"></li></ul><h3 id="4-用-Do-Catch-处理错误"><a href="#4-用-Do-Catch-处理错误" class="headerlink" title="4.用 Do-Catch 处理错误"></a>4.用 Do-Catch 处理错误</h3><ul><li><p>如果在do子句中的代码抛出了一个错误，这个错误会与catch子句做匹配，从而决定哪条子句能处理它。</p> <img src="/2016/09/24/2016b/swift错误处理/swift错误处理2.png" width="400"> <img src="/2016/09/24/2016b/swift错误处理/swift错误处理3.png" width="400"></li></ul><h3 id="5-将错误转换成可选值-try"><a href="#5-将错误转换成可选值-try" class="headerlink" title="5.将错误转换成可选值 try?"></a>5.将错误转换成可选值 try?</h3><ul><li>如果someThrowingFunction()抛出一个错误，x和y的值是nil。否则x和y的值就是该函数的返回值</li></ul><h3 id="6-禁用错误传递"><a href="#6-禁用错误传递" class="headerlink" title="6.禁用错误传递"></a>6.禁用错误传递</h3><ul><li>有时你知道某个throwing函数实际上在运行时是不会抛出错误的，在这种情况下，你可以在表达式前面写try!</li></ul><h3 id="7-指定清理操作"><a href="#7-指定清理操作" class="headerlink" title="7.指定清理操作"></a>7.指定清理操作</h3><ul><li><p>可以使用defer语句在即将离开当前代码块时执行一系列语句。该语句让你能执行一些必要的清理工作，不管是以何种方式离开当前代码块的——无论是由于抛出错误而离开，还是由于诸如return或者break的语句</p>  <img src="/2016/09/24/2016b/swift错误处理/swift错误处理4.png" width="400"></li><li><p>上面的代码使用一条defer语句来确保open(<em>:)函数有一个相应的对close(</em>:)函数的调用。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图文混排</title>
      <link href="/2016/09/24/2016b/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
      <url>/2016/09/24/2016b/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h3 id="1-NSTextAttachment-实现图文混排"><a href="#1-NSTextAttachment-实现图文混排" class="headerlink" title="1.NSTextAttachment 实现图文混排"></a>1.NSTextAttachment 实现图文混排</h3><ul><li>图片附件</li><li>lineHeight 大致和字体的大小相等</li><li>bounds ,x,y 决定内部子控件相对远点的位置</li><li><p>图片属性文本</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func textTextKit()&#123;</span><br><span class="line">    <span class="keyword">let</span> attchment = NSTextAttachment()</span><br><span class="line">    <span class="comment">// 图片附件</span></span><br><span class="line">    attchment.image = UIImage(named: <span class="string">"hehheheh"</span>);</span><br><span class="line">    <span class="comment">// lineHeight 大致和字体的大小相等</span></span><br><span class="line">    <span class="keyword">let</span> height = lable.font.lineHeight</span><br><span class="line">    <span class="comment">// frame x,y 决定当前控件，相对父控件的位置</span></span><br><span class="line">    <span class="comment">// bounds ,x,y 决定内部子控件相对远点的位置</span></span><br><span class="line">    attchment.bounds = CGRect(x: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">-4</span>, <span class="attr">width</span>: height, <span class="attr">height</span>: height)</span><br><span class="line">    <span class="comment">//图片属性文本</span></span><br><span class="line">    <span class="keyword">let</span> attst1 = NSAttributedString(attachment: attchment)</span><br><span class="line">    <span class="keyword">let</span> attrStrM = NSMutableAttributedString(string: <span class="string">"我"</span>)</span><br><span class="line">    attrStrM.append(attst1)</span><br><span class="line">    attrStrM.append(NSAttributedString(string: <span class="string">"99999"</span>))</span><br><span class="line">    lable.attributedText = attrStrM</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>{% asset_img  图文混排1.png  400 %}</code></pre><h3 id="2-TextKit-重绘实现图文混排"><a href="#2-TextKit-重绘实现图文混排" class="headerlink" title="2.TextKit 重绘实现图文混排"></a>2.TextKit 重绘实现图文混排</h3><ul><li>NSTextStorage  管理NSLayoutManager 对象，字符或者属性变化的时候，通知LayoutManager重新布局并显示文本</li><li>NSLayoutManager 负责协调布局，显示NSTextStorage对象中保存的字符，将字形设置为一系列NSTextContainer 对象，然后以系列文本视图对象显示</li><li><p>NStextContainer 也可以定义一个排除路径，定义一下矩形区域，在layoutSubviews中更新调用</p>  <img src="/2016/09/24/2016b/图文混排/图文混排2.png" width="400">  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性文本存储  是 NSMutableAttributedString子类</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> textStore = <span class="type">NSTextStorage</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负责文本“字形”布局</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> layoutManager = <span class="type">NSLayoutManager</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定文本绘制的的范围</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> textContainer = <span class="type">NSTextContainer</span> ()</span><br></pre></td></tr></table></figure>  <img src="/2016/09/24/2016b/图文混排/图文混排3.png" width="400"></li><li><p>代码实现 </p><ul><li><p>在init方法中设置prepareTextSystem</p><img src="/2016/09/24/2016b/图文混排/图文混排4.png" width="400"></li><li><p>1.准备文本</p></li><li><p>2.设置对象关系 </p><img src="/2016/09/24/2016b/图文混排/图文混排5.png" width="400"></li><li><p>3.在layoutSubviews指定区域</p><img src="/2016/09/24/2016b/图文混排/图文混排6.png" width="400"></li><li><p>4.重写drawText 方法，重新绘制 绘制类似油画，后绘制的内容，会把之前绘制的内容覆盖</p><img src="/2016/09/24/2016b/图文混排/图文混排7.png" width="400"></li><li><p>定义只读属性urlRanges:[NSRange]? 字符串中的网址range</p><img src="/2016/09/24/2016b/图文混排/图文混排8.png" width="400"></li><li><p>在touchesBegan 中判断点击的index 在不在urlRanges 中，如果在，显示点击变色</p></li><li>获取点击的索引</li><li>判断点击的字符 indx 是不是再urlRanges范围内，如果在就高亮</li><li>需要重绘，调用setNeedsDisplay函数，但是不是drawrect<img src="/2016/09/24/2016b/图文混排/图文混排9.png" width="400"></li></ul></li></ul><h3 id="3-UITextView-的XIB处理"><a href="#3-UITextView-的XIB处理" class="headerlink" title="3.UITextView  的XIB处理"></a>3.UITextView  的XIB处理</h3><ul><li>进制滚动</li><li>拖拽回收键盘</li></ul><h3 id="4-切换键盘"><a href="#4-切换键盘" class="headerlink" title="4.切换键盘"></a>4.切换键盘</h3><ul><li>自定义view</li><li>点击切换，如果是nil显示，如果不是nil,隐藏</li><li><p>刷新键盘 reloadInputViews</p><img src="/2016/09/24/2016b/图文混排/图文混排10.png" width="400"></li></ul><h3 id="5-UITextView-的常用的三个方法"><a href="#5-UITextView-的常用的三个方法" class="headerlink" title="5. UITextView 的常用的三个方法"></a>5. UITextView 的常用的三个方法</h3><ul><li><p>是否为空 <code>hasText() -&gt; Bool</code> </p></li><li><p>插入字符串 <code>insertText(_ text: String )</code></p></li><li><p>向前删除 <code>deleteBackward()</code> </p></li><li><p>插入字符串 <code>textVIew.replace(&lt;#T##range: UITextRange##UITextRange#&gt;, withText: &lt;#T##String#&gt;)</code></p></li></ul><h3 id="6-监听键盘的方法"><a href="#6-监听键盘的方法" class="headerlink" title="6.监听键盘的方法"></a>6.监听键盘的方法</h3><ul><li><p>监听键盘通知，</p></li><li><p>获取键盘高度和键盘动画</p></li><li><p>设置底部约束高度</p></li><li><p>更新约束</p></li><li><p>执行动画</p>  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听键盘通知，</span></span><br><span class="line">NotificationCenter.<span class="keyword">default</span>.addObserver(self, selector: #selector(keybordChanged), <span class="keyword">name</span>: NSNotification.<span class="keyword">Name</span>.UIKeyboardWillChangeFrame, <span class="keyword">object</span>: <span class="keyword">nil</span>);</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.removeObserver(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span>  rect = (noti.userInfo?[<span class="type">UIKeyboardFrameEndUserInfoKey</span>] <span class="keyword">as</span>? <span class="type">NSValue</span>)?.cgRectValue,</span><br><span class="line">        <span class="keyword">let</span> duration = (noti.userInfo?[<span class="type">UIKeyboardAnimationDurationUserInfoKey</span>] <span class="keyword">as</span>? <span class="type">NSNumber</span>)?.doubleValue <span class="keyword">else</span>&#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="comment">// 设置底部约束高度</span></span><br><span class="line"><span class="keyword">let</span> offsite = view.bounds.height - rect.origin.y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新约束</span></span><br><span class="line">viewToButtonH.constant = offsite</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行动画</span></span><br><span class="line"><span class="type">UIView</span>.animate(withDuration: duration) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.view.layoutIfNeeded()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/24/2016b/图文混排/图文混排11.png" width="400"></li></ul><h3 id="7-图文混排，图片插入文字中"><a href="#7-图文混排，图片插入文字中" class="headerlink" title="7.图文混排，图片插入文字中"></a>7.图文混排，图片插入文字中</h3><ul><li><p>获取表情中的图像属性文本 使用attemnet</p></li><li><p>设置当前的textview的属性文本，可变的</p></li><li><p>将图像的属性文本插入到当前的光标位置</p></li><li><p>记录光标位置</p></li><li><p>重新设置文本</p></li><li><p>回复光标位置</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取表情中的图像属性文本 使用attemnet</span></span><br><span class="line"></span><br><span class="line">let imageText =  NSAttributedString(string: <span class="string">"ceshi"</span>, attributes: [NSFontAttributeName:UIFont.systemFont(ofSize: <span class="number">12</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前的textview的属性文本，可变的</span></span><br><span class="line"></span><br><span class="line">let attrStrM = NSMutableAttributedString(attributedString: textVIew.attributedText)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将图像的属性文本插入到当前的光标位置</span></span><br><span class="line"></span><br><span class="line">attrStrM.replaceCharacters(<span class="keyword">in</span>: textVIew<span class="selector-class">.selectedRange</span>, with: imageText)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录光标位置</span></span><br><span class="line">let range = textVIew.selectedRange</span><br><span class="line"></span><br><span class="line"><span class="comment">//  重新设置文本</span></span><br><span class="line">textVIew<span class="selector-class">.attributedText</span> = attrStrM</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回复光标位置</span></span><br><span class="line">textVIew<span class="selector-class">.selectedRange</span> = NSRange(location: range<span class="selector-class">.location</span> + <span class="number">1</span>, length: <span class="number">0</span>)</span><br></pre></td></tr></table></figure>  <img src="/2016/09/24/2016b/图文混排/图文混排12.png" width="400"></li></ul><h3 id="8-变量可变字符串寻找图片附件"><a href="#8-变量可变字符串寻找图片附件" class="headerlink" title="8. 变量可变字符串寻找图片附件"></a>8. 变量可变字符串寻找图片附件</h3><ul><li><p>字典中包含 NSAttachment key 说明是图片，否则是文本</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let aAttr =  NSAttributedString(<span class="string">string:</span> <span class="string">"ceshi"</span>, <span class="string">attributes:</span> [<span class="string">NSFontAttributeName:</span>UIFont.systemFont(<span class="string">ofSize:</span> <span class="number">12</span>)])</span><br><span class="line"></span><br><span class="line">aAttr.enumerateAttributes(<span class="string">in:</span> NSRange(<span class="string">location:</span> <span class="number">0</span>, <span class="string">length:</span> aAttr.length), <span class="string">options:</span> []) &#123; (dic, range, _) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字典中包含 NSAttachment key 说明是图片，否则是文本</span></span><br><span class="line"></span><br><span class="line">    let arrrment = dic[<span class="string">"NSAttachment"</span>]                      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-UIcode编码"><a href="#9-UIcode编码" class="headerlink" title="9.UIcode编码"></a>9.UIcode编码</h3><ul><li>uiicode 的编码，展现是啊用UTF8 1-4个字节表示一个字符</li><li>实例化字符扫描</li><li>从code中 扫描出16进制的数值</li><li><p>使用uint32的数值，生成UTF8 的字符</p>  <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code  = <span class="string">"0x1f633"</span></span><br><span class="line"><span class="keyword">let</span> scanner = <span class="type">Scanner</span>(<span class="built_in">string</span>: code)</span><br><span class="line"><span class="keyword">var</span> <span class="literal">result</span> :<span class="built_in">uint</span>  = <span class="number">0</span></span><br><span class="line">scanner.scanHexInt32(&amp;<span class="literal">result</span>)</span><br><span class="line"><span class="keyword">let</span> c  = <span class="type">Character</span>(<span class="type">UnicodeScalar</span>(<span class="literal">result</span>)!)</span><br><span class="line"><span class="keyword">let</span> emojy = <span class="type">String</span>(c)</span><br><span class="line">print(<span class="string">"\(emojy)"</span>)</span><br></pre></td></tr></table></figure>  <img src="/2016/09/24/2016b/图文混排/图文混排13.png" width="400">  <img src="/2016/09/24/2016b/图文混排/图文混排14.png" width="400"></li><li><p>uibutton 的设置nil</p><ul><li>设置图像，如果图像为nil,会清空图像，避免复用</li><li><p>设置标题</p><img src="/2016/09/24/2016b/图文混排/图文混排15.png" width="400"></li></ul></li></ul><h3 id="10-图片拉伸处理"><a href="#10-图片拉伸处理" class="headerlink" title="10.图片拉伸处理"></a>10.图片拉伸处理</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GCD调度组</title>
      <link href="/2016/09/24/2016b/GCD%E8%B0%83%E5%BA%A6%E7%BB%84/"/>
      <url>/2016/09/24/2016b/GCD%E8%B0%83%E5%BA%A6%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="GCD-调度组-oc"><a href="#GCD-调度组-oc" class="headerlink" title="GCD 调度组-oc"></a>GCD 调度组-oc</h3><ul><li>调度组是最重要的一监听一组任务的完成<ul><li>创建调度组</li><li>创建队列</li><li>调度组监听队列调度任务</li></ul></li></ul><pre><code><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_group_t </span>group = <span class="keyword">dispatch_group_create();</span></span><br><span class="line"><span class="keyword">dispatch_queue_t </span>que = <span class="keyword">dispatch_get_global_queue(0, </span><span class="number">0</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">dispatch_async(que, </span>^&#123;</span><br><span class="line">    NSLog(@<span class="string">"aaaaa%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line"><span class="keyword">dispatch_async(que, </span>^&#123;</span><br><span class="line">    NSLog(@<span class="string">"bbbbb%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line"><span class="keyword">dispatch_async(que, </span>^&#123;</span><br><span class="line">    NSLog(@<span class="string">"ccccccc%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line"><span class="keyword">dispatch_group_notify(group, </span>que, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"come herer%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>{% asset_img GCD调度组1.png   %}</code></pre><ul><li><p>调度的入组出组</p><ul><li><p>入组，出组，相互对应，不多不少。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_t group = dispatch_group_create()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_queue_t que = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_group_enter(<span class="name">group</span>)<span class="comment">;  // 入组</span></span><br><span class="line"></span><br><span class="line">dispatch_async(<span class="name">que</span>, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"aaaaa%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">    dispatch_group_leave(<span class="name">group</span>)<span class="comment">; // 出组</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">dispatch_group_enter(<span class="name">group</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async(<span class="name">que</span>, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"bbbbb%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">    dispatch_group_leave(<span class="name">group</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">dispatch_group_enter(<span class="name">group</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async(<span class="name">que</span>, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"ccccccc%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">    dispatch_group_leave(<span class="name">group</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_group_notify(<span class="name">group</span>, que, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"come herer%@"</span>,[NSThread currentThread])<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><img src="/2016/09/24/2016b/GCD调度组/GCD调度组2.png"></li></ul></li></ul><h3 id="GCD-调度组-swift"><a href="#GCD-调度组-swift" class="headerlink" title="GCD 调度组-swift"></a>GCD 调度组-swift</h3><ul><li><p>为了监听所有图像缓存，使用DispatchGroup</p><ul><li>enter 之后跟随block</li><li><p>block 中有leave，配对存在</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func textGroup()&#123;</span><br><span class="line">    let<span class="built_in"> group </span>= DispatchGroup()</span><br><span class="line">    let<span class="built_in"> queue </span>= DispatchQueue.global()</span><br><span class="line">    group.enter()</span><br><span class="line">    queue.async &#123;</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"aaaaa\(Thread.current)"</span>)</span><br><span class="line">        group.leave()</span><br><span class="line">    &#125;</span><br><span class="line">    group.enter()</span><br><span class="line">    queue.async &#123;</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"bbbbb\(Thread.current)"</span>)</span><br><span class="line">        group.leave()</span><br><span class="line">    &#125;</span><br><span class="line">    group.notify(queue: DispatchQueue.main) &#123;</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"come here is end \(Thread.current)"</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2016/09/24/2016b/GCD调度组/GCD调度组3.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义刷新控件</title>
      <link href="/2016/09/24/2016b/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6/"/>
      <url>/2016/09/24/2016b/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-自定义刷新控件-控制逻辑"><a href="#1-自定义刷新控件-控制逻辑" class="headerlink" title="1.自定义刷新控件 -控制逻辑"></a>1.自定义刷新控件 -控制逻辑</h3><ul><li>创建JYRefreshControl  基于UIControl 控制逻辑判断</li></ul><h3 id="2-自定义刷新控件视图-控制界面显示或者动画"><a href="#2-自定义刷新控件视图-控制界面显示或者动画" class="headerlink" title="2.自定义刷新控件视图 -控制界面显示或者动画"></a>2.自定义刷新控件视图 -控制界面显示或者动画</h3><ul><li><p>创建XIB实现UI view布局，通过control 得到父视图高度控制view的变化</p><img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件1.png"></li></ul><h3 id="3-JYRefreshControl"><a href="#3-JYRefreshControl" class="headerlink" title="3. JYRefreshControl"></a>3. <code>JYRefreshControl</code></h3><ul><li>初始化init方法，创建UI，此时没有设置高度，没有frame</li><li>创建scrollview 记录父视图</li><li><p>创建refreshView负责视图展示</p>  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">init</span>()&#123;</span><br><span class="line">    <span class="selector-tag">super</span><span class="selector-class">.init</span>(<span class="attribute">frame</span>: CGRect())</span><br><span class="line">    <span class="selector-tag">setupUI</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">required</span> <span class="selector-tag">init</span>?(coder <span class="attribute">aDecoder</span>: NSCoder) &#123;</span><br><span class="line">    <span class="selector-tag">super</span><span class="selector-class">.init</span>(<span class="attribute">coder</span>: aDecoder);</span><br><span class="line">    <span class="selector-tag">setupUI</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件2.png">  <img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件3.png"></li></ul><ul><li><p>设置刷新状态的枚举</p>  <img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件4.png"></li><li><p>重写父类的方法willMove toSuperView 上记录父视图，添加观察者</p>  </li><li><p>重写父类的移除视图的时候移除观察者</p>  </li><li><p>实现KVO 方法，根据监听到的父视图的滑动，设置view的frame，把高度传到refreshView中</p><ul><li>根据滑动的高度，设置frame</li><li>在拖拽的时候进行状态判断</li><li>不在拖拽的时候，状态是拖拽了，松手刷新，状态设置为刷新，执行beginRefreshing<img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件7.png"></li></ul></li></ul><ul><li><p><code>beginRefreshing()</code> 方法</p><img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件8.png"></li><li><p><code>endRefreshing()</code>  方法</p><img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件9.png"></li></ul><h3 id="4-JYNomalRefreshView"><a href="#4-JYNomalRefreshView" class="headerlink" title="4.JYNomalRefreshView"></a>4.<code>JYNomalRefreshView</code></h3><ul><li>init 方法 加载loadnib 方法</li><li><p>nibName 可以是子类，通过nibName 的改变切换不同的显示内容，在View 的拖出来的视图，是可选的，子类不一定有</p>  <img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件10.png"></li><li><p>在state的didset方法中设置UI</p><ul><li>ios  中旋转动画默认是 1.顺时针的旋转，  2.就近原则</li><li>实现同方向旋转，减少一个极小的值</li><li>如果旋转360，使用CABaseAnimation动画 <img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件11.png"><h3 id="5-刷新动画"><a href="#5-刷新动画" class="headerlink" title="5.刷新动画"></a>5.刷新动画</h3></li></ul></li><li>awakeFromNib() 进行动画的执行<ul><li>通过2张图片合成，实现1张GIF效果</li><li>使用<code>CABasicAnimation</code> 动画实现无限旋转</li><li>实现<code>CGAffineTransform</code>缩放动画，设置layer的锚点，先设置center，或者frame，再设置锚点，<img src="/2016/09/24/2016b/自定义刷新控件/自定义刷新控件12.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift自动引用计数</title>
      <link href="/2016/09/23/2016b/swift%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/"/>
      <url>/2016/09/23/2016b/swift%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-自动引用计数实践"><a href="#1-自动引用计数实践" class="headerlink" title="1.自动引用计数实践"></a>1.自动引用计数实践</h3><ul><li><p><code>ARC</code> 初始化</p>  <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数1.png" width="400">  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var reference1: Person?</span><br><span class="line">var reference2: Person?</span><br><span class="line">var reference3: Person?</span><br><span class="line">reference1 = Person(name: <span class="string">"John Appleseed"</span>)</span><br><span class="line">reference2 = reference1</span><br><span class="line">reference3 = reference1</span><br><span class="line">reference1 = nil</span><br><span class="line">reference2 = nil  //   此时person对象还没有释放，</span><br><span class="line">reference3 = nil  // 执行之后，对象进行释放，打印deinit 方法</span><br><span class="line">// 打印 “John Appleseed is being deinitialized</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-类实例之间的循环强引用"><a href="#2-类实例之间的循环强引用" class="headerlink" title="2.类实例之间的循环强引用"></a>2.类实例之间的循环强引用</h3><ul><li><p><code>Person 和Apartment</code></p> <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数2.png" width="400"> <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数3.png" width="400"> <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数4.png" width="400"></li></ul><h3 id="3-解决实例之间的循环强引用-—-弱引用（weak-reference）"><a href="#3-解决实例之间的循环强引用-—-弱引用（weak-reference）" class="headerlink" title="3.解决实例之间的循环强引用  — 弱引用（weak reference）"></a>3.解决实例之间的循环强引用  — 弱引用（weak reference）</h3><ul><li><p>Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：弱引用（<code>weak</code>reference）和无主引用（<code>unowned</code>reference ）</p> <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数5.png" width="400"> <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数6.png" width="380"> <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数7.png" width="400"></li></ul><h3 id="4-解决实例之间的循环强引用-—-无主引用（unowned-reference-）"><a href="#4-解决实例之间的循环强引用-—-无主引用（unowned-reference-）" class="headerlink" title="4.解决实例之间的循环强引用  — 无主引用（unowned reference ）"></a>4.解决实例之间的循环强引用  — 无主引用（unowned reference ）</h3><ul><li><p>在前面加上关键字unowned表示这是一个无主引用</p>  <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数8.png" width="400">  <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数9.png" width="400"></li><li><p>Person和Apartment的例子展示了两个属性的值都允许为nil，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</p></li><li>Customer和CreditCard的例子展示了一个属性的值允许为nil，而另一个属性的值不允许为nil，这也可能会产生循环强引用。这种场景最适合通过无主引用来解决。</li></ul><h3 id="5-无主引用以及隐式解析可选属性"><a href="#5-无主引用以及隐式解析可选属性" class="headerlink" title="5.无主引用以及隐式解析可选属性"></a>5.无主引用以及隐式解析可选属性</h3><ul><li><p>在这种场景中，两个属性都必须有值，并且初始化完成后永远不会为nil。在这种场景中，需要一个类使用无主属性，而另外一个类使用隐式解析可选属性 </p>   <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数10.png" width="400"></li><li><p>Country的构造函数调用了City的构造函数。然而，只有Country的实例完全初始化后，Country的构造函数才能把self传给City的构造函数</p></li><li>为了满足这种需求，通过在类型结尾处加上感叹号（City!）的方式，将Country的capitalCity属性声明为隐式解析可选类型的属性。这意味着像其他可选类型一样，capitalCity属性的默认值为nil，但是不需要展开它的值就能访问它</li><li>由于capitalCity默认值为nil，一旦Country的实例在构造函数中给name属性赋值后，整个初始化过程就完成了。这意味着一旦name属性被赋值后，Country的构造函数就能引用并传递隐式的self。Country的构造函数在赋值capitalCity时，就能将self作为参数传递给City的构造函数 </li></ul><h3 id="6-闭包引起的循环强引用"><a href="#6-闭包引起的循环强引用" class="headerlink" title="6.闭包引起的循环强引用"></a>6.闭包引起的循环强引用</h3><ul><li>Swift 提供了一种优雅的方法来解决这个问题，称之为闭包捕获列表（closure capture list）</li><li><p>定义了一个类，一个懒加载属性，懒加载属性是个闭包，内部强引用了类的2个属性</p>  <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数11.png" width="400"></li><li><p>实例化对象</p>  <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数12.png" width="400"></li><li><p>实例和闭包的引用关系如下：</p>  <img src="/2016/09/23/2016b/swift自动引用计数/swift自动引用计数13.png" width="400"></li></ul><h3 id="7-解决闭包引起的循环强引用"><a href="#7-解决闭包引起的循环强引用" class="headerlink" title="7.解决闭包引起的循环强引用"></a>7.解决闭包引起的循环强引用</h3><ul><li>在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用 </li><li><p>捕获列表中的每一项都由一对元素组成，一个元素是weak或unowned关键字，另一个元素是类实例的引用（例如self）或初始化过的变量<code>（如delegate = self.delegate!）</code>。这些项在方括号中用逗号分开</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazy var someClosure: (Int, <span class="keyword">String</span>) -&gt; <span class="keyword">String</span> = &#123;</span><br><span class="line">    [unowned self, weak <span class="keyword">property</span><span class="title"></span>= self. <span class="keyword">property</span><span class="title"></span>!] (index: Int, stringToProcess: <span class="keyword">String</span>) -&gt; <span class="keyword">String</span> <span class="keyword">in</span></span><br><span class="line">    // 这里是闭包的函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-使用弱引用和无主引用"><a href="#8-使用弱引用和无主引用" class="headerlink" title="8.使用弱引用和无主引用"></a>8.使用弱引用和无主引用</h3><ul><li>在闭包和捕获的实例总是互相引用并且总是同时销毁时，将闭包内的捕获定义为无主引用。</li><li>相反的，在被捕获的引用可能会变为nil时，将闭包内的捕获定义为弱引用。弱引用总是可选类型，并且当引用的实例被销毁后，弱引用的值会自动置为nil。这使我们可以在闭包体内检查它们是否存在。</li><li>注意如果被捕获的引用绝对不会变为nil，应该用无主引用，而不是弱引用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SDwebImage实现图片下载-圆角</title>
      <link href="/2016/09/23/2016b/SDwebImage%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD-%E5%9C%86%E8%A7%92/"/>
      <url>/2016/09/23/2016b/SDwebImage%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD-%E5%9C%86%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h3 id="1-设置UIImageView分类异步处理图片"><a href="#1-设置UIImageView分类异步处理图片" class="headerlink" title="1.设置UIImageView分类异步处理图片"></a>1.设置UIImageView分类异步处理图片</h3><ul><li><p>SDWebImage 的实现远离</p><ul><li>downloadImage 是SDWebImage  的核心方法</li><li>图像下载完成之后，会自动保存在沙盒中，文件路径是URL的md5</li><li>如果沙盒中已经存在缓存的图像，后续使用SD通过URL加载图像，都会加载本地沙盒图像</li><li>不会发起网络请求，同时回调方法，同样会调用</li><li>方法还是原来的方法，调用还是原来的调用，不过内部不会再次发起网络请求</li></ul></li><li><p>设置图片的异步设置，并且同一个方法中可以设置圆角半径</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jy_setImage</span><span class="params">(urlString:String?,placeholerImage:UIImage?,isAvatar:Bool = <span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> urlStr = urlString ,<span class="keyword">let</span> url = <span class="type">URL</span>(string: urlStr) <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            image = placeholerImage</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sd_setImage(with: url, placeholderImage: placeholerImage, options: [], progress: <span class="literal">nil</span>) &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>]  ( image, <span class="number">_</span>, <span class="number">_</span>, <span class="number">_</span>) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isAvatar &#123;</span><br><span class="line">            <span class="keyword">self</span>?.image = image?.getRoundedImage(size: (<span class="keyword">self</span>?.bounds.size)!)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <img src="/2016/09/23/2016b/SDwebImage实现图片下载-圆角/SDwebImage实现图片1.png"></li></ul><ul><li><p>异步下载图片封装，得到Image</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">jy_downImage</span><span class="params">(urlString:String?,complention:@escaping <span class="params">(UIImage?, Data?, Error?, Bool)</span></span></span>-&gt;())-&gt;()&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> urlStr = urlString ,<span class="keyword">let</span> url = <span class="type">URL</span>(string: urlStr) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">SDWebImageManager</span>.shared().imageDownloader?.downloadImage(with: url, options: [], progress: <span class="literal">nil</span>, completed: complention)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <img src="/2016/09/23/2016b/SDwebImage实现图片下载-圆角/SDwebImage实现图片2.png"></li></ul><h3 id="2-修复图片拉伸，压缩影响性能"><a href="#2-修复图片拉伸，压缩影响性能" class="headerlink" title="2.修复图片拉伸，压缩影响性能"></a>2.修复图片拉伸，压缩影响性能</h3><ul><li><p>根据尺寸重新绘图</p><ul><li>设置尺寸</li><li>开启图像上下文</li><li>绘图，指定固定区域</li><li>取得结果</li><li><p>关闭上下文</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let rect = <span class="built_in">CGRect</span>(origin: <span class="built_in">CGPoint</span>(), size: size)</span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">true</span>, <span class="number">0</span>)</span><br><span class="line">aimage.draw(<span class="keyword">in</span>: rect)</span><br><span class="line">let result = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>()</span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>()</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><img src="/2016/09/23/2016b/SDwebImage实现图片下载-圆角/SDwebImage实现图片3.png"></li></ul></li></ul><ul><li><p>设置圆角图片</p><ul><li>设置区域</li><li>开启图像上下文</li><li>背景颜色填充，填充整个区域</li><li>设置路径，设置裁剪</li><li>开始绘图，指定固定区域</li><li>设置边线，颜色填充，边线宽度，填充</li><li>取得结果</li><li><p>关闭上下文</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let rect = <span class="built_in">CGRect</span>(origin: <span class="built_in">CGPoint</span>(), size: size)</span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">true</span>, <span class="number">0</span>)</span><br><span class="line">backGroudColor?.setFill()</span><br><span class="line"><span class="built_in">UIRectFill</span>(rect)</span><br><span class="line">let path = <span class="built_in">UIBezierPath</span>(ovalIn: rect)</span><br><span class="line">path.addClip()</span><br><span class="line"><span class="keyword">self</span>.draw(<span class="keyword">in</span>: rect)</span><br><span class="line"><span class="built_in">UIColor</span>.red.setStroke()</span><br><span class="line">path.lineWidth = <span class="number">2</span> <span class="comment">// 默认是1</span></span><br><span class="line">path.stroke()</span><br><span class="line">let result = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>()</span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>()</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><img src="/2016/09/23/2016b/SDwebImage实现图片下载-圆角/SDwebImage实现图片4.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现cell处理</title>
      <link href="/2016/09/22/2016b/%E5%AE%9E%E7%8E%B0cell%E5%A4%84%E7%90%86/"/>
      <url>/2016/09/22/2016b/%E5%AE%9E%E7%8E%B0cell%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="实现微博cell处理"><a href="#实现微博cell处理" class="headerlink" title="实现微博cell处理"></a>实现微博cell处理</h3><ul><li>单条微博的处理 / 图片高度自适应</li></ul><h3 id="1-多张，单张图片高度的处理"><a href="#1-多张，单张图片高度的处理" class="headerlink" title="1.多张，单张图片高度的处理"></a>1.多张，单张图片高度的处理</h3><ul><li><p>单条微博的视图模型</p><ul><li>如果没有任何父类，如果希望在开发时调试，输出调试信息，需要</li><li>遵守CustomStringConvertible协议</li><li><p>实现desciription 是计算型属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> description:String &#123;</span><br><span class="line">return status.description</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2016/09/22/2016b/实现cell处理/实现cell处理1.png"></li></ul></li><li><p>视图列表模型 中引用视图模型 <code>listViewModel -&gt; aViewModel</code></p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrary  = [<span class="type">WBStatusViewModel</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for 循环遍历返回的数组，字典转模型</span></span><br><span class="line"><span class="keyword">for</span> dict <span class="keyword">in</span> list ??[ ] &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> model = <span class="type">WBStatus</span>.yymodel(with:dict) <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">    <span class="comment">//  根据转的model，初始化ViewModel，拼接到数组中</span></span><br><span class="line">    arrary.append(<span class="type">WBStatusViewModel</span>(model:model))</span><br><span class="line">    <span class="comment">// 如果是上拉刷新，数据拼接末尾，不是上拉刷新，拼接在数组前面</span></span><br><span class="line">    <span class="keyword">if</span> pullUp &#123;</span><br><span class="line">        <span class="keyword">self</span>.statusList +=arrary</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">self</span>.statusList  = arrary + <span class="keyword">self</span>.statusList</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ViewModel中增加储值属性，使用内存换CPU，cell中不用重复计算</p><ul><li>增加会员image，认证image，数字字符串，储值属性，在cell中直接赋值<img src="/2016/09/22/2016b/实现cell处理/实现cell处理2.png"></li></ul></li><li>一个xib中拖出来N个View，如果功能独立，可以创建view方便处理<ul><li>创建view添加到Cell上<img src="/2016/09/22/2016b/实现cell处理/实现cell处理3-1.png"></li></ul></li></ul><h3 id="2-图片的处理"><a href="#2-图片的处理" class="headerlink" title="2.图片的处理"></a>2.图片的处理</h3><ul><li>九宫格的创建，9个UIImageView for循环设置frame  <img src="/2016/09/22/2016b/实现cell处理/实现cell处理3.png"></li><li><p>九宫格视图的计算</p><ul><li>设置外边距，内边距</li><li>根据外边距，内边距，设置view宽度，设置PictureView的宽度，高度（1*1）</li><li>根据count计算列数，</li><li><p>根据列数，计算view的高度</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calcPictureViewSize</span><span class="params">(<span class="built_in">count</span>:Int?)</span></span>-&gt;<span class="type">CGSize</span>&#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="built_in">count</span> = <span class="built_in">count</span> <span class="keyword">else</span>&#123; <span class="keyword">return</span> <span class="type">CGSize</span>() &#125;</span><br><span class="line">    <span class="comment">// 计算配图视图高度</span></span><br><span class="line">    <span class="comment">// 外边距</span></span><br><span class="line">    <span class="keyword">let</span> <span class="type">WBStatusPictureViewOuterMargin</span> = <span class="type">CGFloat</span>(<span class="number">12</span>)</span><br><span class="line">    <span class="comment">/// 内边界</span></span><br><span class="line">    <span class="keyword">let</span> <span class="type">WBStatusPictureViewInnerMargin</span> = <span class="type">CGFloat</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">/// view视图的W</span></span><br><span class="line">        <span class="keyword">let</span> height = <span class="type">WBStatusPictureViewOuterMargin</span> + <span class="type">CGFloat</span>(row) * pitureWith + <span class="type">CGFloat</span>(row-<span class="number">1</span>)*<span class="type">WBStatusPictureViewInnerMargin</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGSize</span>(width: pictureItmeWidth, height: height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2016/09/22/2016b/实现cell处理/实现cell处理4.png"></li></ul></li></ul><h3 id="3-单图的处理"><a href="#3-单图的处理" class="headerlink" title="3.单图的处理"></a>3.单图的处理</h3><ul><li><p>使用GCD调度组，下载一个图片之后处理单张图片的大小，保存下来</p><ul><li>在viewMolde 中增加方法，使用储值属性记录imageSize <img src="/2016/09/22/2016b/实现cell处理/实现cell处理5.png"></li><li>在listModel每次下载完成一张图片之后进行调用刷新PictureSize</li><li><p>等调度组完成之后，之后再回调。</p><img src="/2016/09/22/2016b/实现cell处理/实现cell处理6.png" width="400" height="50"></li></ul></li><li><p>当一个图过宽或者过窄的时候需要程序处理</p><img src="/2016/09/22/2016b/实现cell处理/实现cell处理7.png" width="400" height="50"><img src="/2016/09/22/2016b/实现cell处理/实现cell处理8.png" width="400" height="50"></li><li>在PictureView 中设置statusMolde<ul><li>根据model的pictureSize 处理宽高，处理单图，处理无图<img src="/2016/09/22/2016b/实现cell处理/实现cell处理9.png" width="400" height="50"></li></ul></li></ul><h3 id="4-cell的自动布局，和缓存行高"><a href="#4-cell的自动布局，和缓存行高" class="headerlink" title="4.cell的自动布局，和缓存行高"></a>4.cell的自动布局，和缓存行高</h3><ul><li><p>自动布局</p><ul><li>设置tableView预估行高，和rowHeight 是自动计算</li><li><p>有一个从上到下的约束，lable 到下边距是&gt;= 一个数组</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">table</span> = UITableView()</span><br><span class="line"><span class="keyword">table</span>.rowHeight <span class="comment">= UITableViewAutomaticDimension</span></span><br><span class="line"><span class="keyword">table</span>.estimatedRowHeight <span class="comment">= 300</span>;</span><br></pre></td></tr></table></figure><img src="/2016/09/22/2016b/实现cell处理/实现cell处理10.png" width="400" height="50"></li></ul></li><li><p>缓存行高</p><ul><li>取消xib 中&gt;= 约束，设置为=约束</li><li>取消<code>table.rowHeight = UITableViewAutomaticDimension</code></li></ul></li><li><p>计算cell高度思路 </p>   <img src="/2016/09/22/2016b/实现cell处理/实现cell处理11.png" width="400" height="50"></li><li><p>计算文字，转发文字的长度 </p>   <img src="/2016/09/22/2016b/实现cell处理/实现cell处理12.png" width="400" height="50"></li><li><p>计算的高度，使用存储属性记录，设置好image更新高度后再计算一边 </p>   <img src="/2016/09/22/2016b/实现cell处理/实现cell处理13.png" width="400" height="50"></li><li><p>总结缓存行高  </p>   <img src="/2016/09/22/2016b/实现cell处理/实现cell处理14.png" width="400" height="50"></li></ul><h3 id="5-选中的某个cell后快速的恢复到选中前的状态"><a href="#5-选中的某个cell后快速的恢复到选中前的状态" class="headerlink" title="5.选中的某个cell后快速的恢复到选中前的状态"></a>5.选中的某个cell后快速的恢复到选中前的状态</h3><ul><li><p><code>tableView</code> 如何让选中的某个cell后快速的恢复到选中前的状态(选中时的灰色动态消失)?</p> <img src="/2016/09/22/2016b/实现cell处理/实现cell处理15.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift学习笔记《5》- 实用</title>
      <link href="/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A5%E3%80%8B/"/>
      <url>/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A5%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-setValue-forKeyPath实现原理"><a href="#1-setValue-forKeyPath实现原理" class="headerlink" title="1.setValue:forKeyPath实现原理"></a>1.<code>setValue:forKeyPath</code>实现原理</h4><ul><li><p><code>setValue:forKeyPath</code>实现原理</p><ul><li><p>先看有没有对应key值的set方法，如果有set方法，就会调用set方法，给对应的属性赋值</p></li><li><p>如果没有set方法，去查看有没有跟key值相同并且带有下划线的成员属性，如果有的话，就给带有下划线的成员属性赋值，</p></li><li><p>如果没有跟key 值相同并且带有下划线的成员属性，还会去找没有跟key 值相同的成员属性，如果有直接给它赋值，</p></li><li><p>如果没有直接报错</p></li></ul></li></ul><h4 id="2-button-颜色显示系统tineColor的解决办法"><a href="#2-button-颜色显示系统tineColor的解决办法" class="headerlink" title="2. button 颜色显示系统tineColor的解决办法"></a>2. button 颜色显示系统tineColor的解决办法</h4><ul><li><p>button 颜色显示系统tine的解决办法</p><ul><li><p>在<code>Assets</code>  中设置图片的Render为Orignnal Image</p><img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-1.png" width="400"></li></ul></li><li><p>使用代码设置 <code>imageWithRenderingMode:</code></p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"aimage"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIImage</span> *oriImage = [image imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-导航条隐藏"><a href="#3-导航条隐藏" class="headerlink" title="3.导航条隐藏"></a>3.导航条隐藏</h4><ul><li>导航条隐藏</li><li>导航条或者导航条上的控件设置透明度是没有效果的 self.navigationController.navigationBar.alpha = 0;</li><li>如果需要设置透明背景，设置导航条背景，<code>BackgroundImage</code>必须默认模式是UIBarMetricsDefafault </li><li>当背景图片设置为nil 的时候，<code>ShadowImage</code> 系统会自动生成一张半透明的图片，设置为导航条背景</li></ul><h4 id="4-Transform"><a href="#4-Transform" class="headerlink" title="4.Transform"></a>4.Transform</h4><ul><li>使用make 是相对于最原始的位置做的形变</li><li>使用CGAffineTransformTranslate 是相对于上一次做形变  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-2.png" width="400"></li></ul><h4 id="5-view-的任意拖拽"><a href="#5-view-的任意拖拽" class="headerlink" title="5.view 的任意拖拽"></a>5.view 的任意拖拽</h4><ul><li>在touchMoved a 方法里，计算XY方向的偏移量，设置view的transform，  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-3.png" width="400"></li></ul><h4 id="6-事件传递："><a href="#6-事件传递：" class="headerlink" title="6.事件传递："></a>6.事件传递：</h4><ul><li>如果父控件不能接收触摸事件，那么子控件就不可能接收到触摸事件，<ul><li>如何找到最合适的控件来处理事件、</li><li>判断自己能否接收触摸事件</li><li>触摸点是否在自己身上</li><li>从后往前便利子控件，重复前面的2个步骤</li><li>如果没有符合条件的子控件 ，那么就自己最适合处理</li></ul></li></ul><h4 id="7-tableView-的缩进处理"><a href="#7-tableView-的缩进处理" class="headerlink" title="7.tableView 的缩进处理"></a>7.tableView 的缩进处理</h4><ul><li><p>取消自动调整滚动视图的间距，- VC+NAV 会自动调整tanleView的contentInset</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-4.png" width="400"></li><li><p>如果设置了tableview的缩进，记得设置scrollIndictiorInsets;</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-5.png" width="400"></li><li><p>navBar 相融的问题，不显示在底部,从隐藏到显示，控制animated 就是可以的</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-6.png" width="400">  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-7.png" width="400">  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-8.png" width="400"></li></ul><h4 id="8-实现图片的，下拉放大，上推隐藏，直至隐藏渐变显示导航条"><a href="#8-实现图片的，下拉放大，上推隐藏，直至隐藏渐变显示导航条" class="headerlink" title="8.实现图片的，下拉放大，上推隐藏，直至隐藏渐变显示导航条"></a>8.实现图片的，下拉放大，上推隐藏，直至隐藏渐变显示导航条</h4><ul><li><p>放大代码实现  下拉，contentOffset 是负值</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-9.png" width="400"></li><li><p>向上移动的时候，当超过64的时候，不再移动</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-10.png" width="400"></li><li><p>动态变化设置图片的透明度</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-11.png" width="400"></li><li><p>根据推的长度，控制显示状态栏是黑色还是白色</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-12.png" width="400"></li><li><p>如果不设置背景颜色，拖拽手势返回的时候，右上角会有黑色，设置导航栏的背景色是白色</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-13.png" width="400"></li></ul><h4 id="9-实现图片的压缩处理圆角处理-加入线程"><a href="#9-实现图片的压缩处理圆角处理-加入线程" class="headerlink" title="9.实现图片的压缩处理圆角处理(加入线程)"></a>9.实现图片的压缩处理圆角处理(加入线程)</h4><ul><li><p>使用<code>CoreGraphisc</code>是耗时操作，讲图片处理放在全局队列中，结果放在主线程中</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(void)cz_coreImageWithSize:(<span class="type">CGSize</span>)size fillColor:(<span class="type">UIColor</span>*)fillColor complection:(void(^)(<span class="type">UIImage</span>*image))complection;</span><br></pre></td></tr></table></figure></li><li><p>具体实现如下</p>  <img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-14.png" width="400"></li></ul><h4 id="10-Xcode-使用"><a href="#10-Xcode-使用" class="headerlink" title="10.Xcode 使用"></a>10.Xcode 使用</h4><ul><li><ol><li>替换已有类名：<br>.h选中要改的类名 —&gt; 菜单栏选中 Edit —&gt; Refactor —&gt; Rename<img src="/2016/09/21/2016b/swift学习笔记《5》/swift学习笔记5-15.png" width="400"></li></ol></li><li><ol start="2"><li>替换已有类名：</li></ol></li><li><ol start="3"><li>Xcode 修改应用的名字<br>找到 TARGETS 中的 Build Setting , 搜索 Product Name－&gt;双击修改</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift学习笔记《4》</title>
      <link href="/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A4%E3%80%8B/"/>
      <url>/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A4%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-swift-Protocol"><a href="#1-swift-Protocol" class="headerlink" title="1.swift Protocol"></a>1.<code>swift Protocol</code></h3><ul><li><p>设置可选协议方法</p><ul><li><p>需要遵守<code>NSObjectProtocol</code> 协议</p></li><li><p>协议需要是 <code>@objec</code></p></li><li><p>方法是需要@object optional </p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">CircleDelegate</span>:<span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">cirelcPrint</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-1.png" width="400"></li><li><p>定义delegate 属性 <code>weak var delegate:CircleDelegate?</code></p></li><li><p>调用代理方法 <code>delegate?.cirelcPrint?()</code></p><img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-2.png" width="400"></li></ul></li><li><p>protocol <code>mutating</code> 关键字</p><ul><li><p>使用mutation 关键字来标记一个会修改结构体的刚发</p></li><li><p>class 中不需要使用mutating标记，因为类总方法通常可以修改类属性</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-3.png" width="400"></li><li><p>可以给系统方法增加写extion,遵守代理</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-4.png" width="400"></li></ul></li></ul><h3 id="2-switchCase"><a href="#2-switchCase" class="headerlink" title="2.switchCase"></a>2.<code>switchCase</code></h3><ul><li><p>case let x where x.hasSuffix(“peper”): print(“li it a spicy”)</p></li><li><p>可以在case中使用where 进行判断</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-5.png" width="400"></li></ul><h3 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h3><ul><li><p>取元组可以根据属性，也可以根据下标取</p>  <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let amutule : (<span class="built_in">min</span>:<span class="built_in">Int</span>,<span class="built_in">max</span>:<span class="built_in">Int</span>,<span class="built_in">sum</span>:<span class="built_in">Int</span>) = (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(amutule.<span class="built_in">sum</span>)</span><br><span class="line"><span class="built_in">print</span>(amutule<span class="number">.2</span>)</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-6.png" width="400"></li></ul><h3 id="4-函数的不确定参数个数"><a href="#4-函数的不确定参数个数" class="headerlink" title="4.函数的不确定参数个数"></a>4.函数的不确定参数个数</h3><ul><li><p>传入一个不确定参数类别，计算和</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfnumbers</span><span class="params">(numbers:Int...)</span></span>-&gt;<span class="type">Int</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> numbe <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        sum += numbe</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(sumOfnumbers(numbers: 2,3,4,5,5))"</span>)</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-7.png" width="400"></li></ul><h3 id="5-函数作为一个参数，传入另一个函数中"><a href="#5-函数作为一个参数，传入另一个函数中" class="headerlink" title="5.函数作为一个参数，传入另一个函数中"></a>5.函数作为一个参数，传入另一个函数中</h3><ul><li>一个函数传入一个参数，一个判断条件的函数参数，返回值是bool</li><li><p>在函数内部，传参数1，调用函数参数判断</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-8.png" width="400"></li></ul><h3 id="6-函数作为返回值"><a href="#6-函数作为返回值" class="headerlink" title="6.函数作为返回值"></a>6.函数作为返回值</h3><ul><li>函数作为返回值</li><li><p>适用的时候，生产函数类型的变量，调用变量（函数）方法</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-9.png" width="400"></li></ul><h3 id="7-集合map的使用"><a href="#7-集合map的使用" class="headerlink" title="7.集合map的使用"></a>7.<code>集合map</code>的使用</h3><ul><li>使用map 批量操作集合内的元素</li><li>匹配符合集合的元素批量处理，也可以进行判断，不符合条件的为0</li><li><p>如果一个闭包的类型已知，并且作为回调函数，可以忽略参数类型和返回值，单个闭包语句，会把它语句的值当作返回值返回</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-10.png" width="400"></li><li><p>可以通过参数所在的位置，替代参数名来引用参数，在非常短的闭包中非常有用</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-11.png" width="400"></li></ul><h3 id="8-setter-和getter-方法"><a href="#8-setter-和getter-方法" class="headerlink" title="8.setter 和getter 方法"></a>8.<code>setter 和getter</code> 方法</h3><ul><li>在setter 中新值是newValue </li><li><p>可以在set 后面显示设置一个别名</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-12.png" width="400"></li></ul><h3 id="9-监测API-可用性"><a href="#9-监测API-可用性" class="headerlink" title="9.监测API 可用性"></a>9.监测API 可用性</h3><ul><li><p>监测API 可用性 iOS 10</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textAPI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> #available(iOS <span class="number">10</span>, macOS <span class="number">10.12</span>,*) &#123;</span><br><span class="line">    <span class="comment">// 在iOS 10使用，MacOS 10。12使用</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 使用先前的iOS，macOS的API</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-13.png" width="400"></li></ul><h3 id="10-swift-数组"><a href="#10-swift-数组" class="headerlink" title="10.swift 数组"></a>10.<code>swift 数组</code></h3><ul><li><p>数组的CRUD</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aArray  = <span class="type">Array</span>(repeating: <span class="number">0.4</span>, <span class="built_in">count</span>: <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//aArray.isEmpty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//aArray.append(&lt;#T##newElement: Double##Double#&gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//aArray.insert(&lt;#T##newElement: Double##Double#&gt;, at: &lt;#T##Int#&gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//aArray.remove(at: &lt;#T##Int#&gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//aArray.removeLast()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (indx,value) <span class="keyword">in</span> aArray.enumerated() &#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(indx)----\(value)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-14.png" width="400"></li></ul><h3 id="11-swift字符串"><a href="#11-swift字符串" class="headerlink" title="11.swift字符串"></a>11.swift字符串</h3><ul><li><p>字符串的CRUD</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> astring = <span class="string">"Guten Tag!"</span></span><br><span class="line">    <span class="keyword">if</span> astring.isEmpty &#123;</span><br><span class="line">        <span class="comment">// 空字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(astring[astring.startIndex])"</span>) <span class="comment">// G</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(astring[astring.index(before: astring.endIndex)])"</span>)   <span class="comment">// !</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(astring[astring.index(after: astring.startIndex)])"</span>) <span class="comment">// u</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let aindex = astring.index(astring.startIndex, offsetBy: 7);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// print("\(astring[aindex])")  // a</span></span><br><span class="line"></span><br><span class="line">    astring.insert(<span class="string">"!"</span>, at: astring.endIndex)</span><br><span class="line"></span><br><span class="line">    astring.insert(contentsOf: <span class="string">"there"</span>.characters, at: astring.index(before: astring.endIndex))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  前缀 - 后缀</span></span><br><span class="line"></span><br><span class="line">    <span class="number">_</span> = astring.hasPrefix(<span class="string">"acutnr"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="number">_</span> = astring.hasSuffix(<span class="string">"!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-15.png" width="400"></li></ul><h3 id="12-范型"><a href="#12-范型" class="headerlink" title="12.范型"></a>12.范型</h3><ul><li><p>实用方法：</p><ul><li>在尖括号里面写一个名族创建一个范型函数或者类型</li><li><p>定一个函数，传入一个未知类型参数，重复N词，返回数组，数组红元素类型就是传入的类型 </p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-16.png" width="400"></li></ul></li></ul><ul><li><p>使用范型- 重新实现可选类型</p><ul><li>定义可选类型的枚举</li><li><p>使用赋值</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-17.png" width="400"></li></ul></li><li><p>实现方法，限定参数遵守协议，类型是相同的</p><ul><li>比较两个数组中相同的元素，有返回true，没有返回false</li><li>可以计算 两个集合中相同的元素返回</li><li>在类型名之后使用where 制定类型的需求</li><li>比如，限定类型实现某一个协议，限定两个类型是相同的，或者限定某个类必须有一个特定的父类”</li><li><p>where T.Iterator.Element: Equatable, T.Iterator.Element == U.Iterator.Element</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-18.png" width="400"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anyCommonElements</span>&lt;T:Sequence,U:Sequence&gt;<span class="params">(<span class="number">_</span> lhs :T,<span class="number">_</span> rhs: U)</span></span>-&gt;<span class="type">Bool</span>  <span class="keyword">where</span> <span class="type">T</span>.<span class="type">Iterator</span>.<span class="type">Element</span>:<span class="type">Equatable</span>,<span class="type">T</span>.<span class="type">Iterator</span>.<span class="type">Element</span> == <span class="type">U</span>.<span class="type">Iterator</span>.<span class="type">Element</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> lhsElement <span class="keyword">in</span> lhs &#123;</span><br><span class="line">        <span class="keyword">for</span> rhsElement <span class="keyword">in</span> rhs &#123;</span><br><span class="line">            <span class="keyword">if</span> lhsElement == rhsElement &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="13-集合操作"><a href="#13-集合操作" class="headerlink" title="13.集合操作"></a>13.集合操作</h3><ul><li><code>a.intersection(b)</code> A和B集合的交集 (A&amp;B)</li><li><code>a.symmtriDifference(b)</code> A +B - (A&amp;B)</li><li><code>a.union(b)</code> A+B</li><li><p><code>a.subtracting(b)</code> A-(A&amp;B) </p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-19.png" width="400"></li></ul><h3 id="14-递归枚举"><a href="#14-递归枚举" class="headerlink" title="14.递归枚举"></a>14.递归枚举</h3><ul><li><p>在枚举成员前面，加上 indirect 关键字，是可以递归的</p>  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> &#123;</span></span><br><span class="line">    <span class="keyword">case</span> number(Int)</span><br><span class="line">    indirect  <span class="keyword">case</span> addition(ArithmeticExpression,ArithmeticExpression)</span><br><span class="line">    indirect <span class="keyword">case</span> multiplication(ArithmeticExpression,ArithmeticExpression)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-20.png" width="400"></li><li><p>调用枚举</p>  <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">five</span> = ArithmeticExpression.number(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">foure</span> = ArithmeticExpression.number(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum</span> = ArithmeticExpression.addition(five, foure)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">procuct</span> = ArithmeticExpression.multiplication(sum, .number(<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li><li><p>操作能可以递归的枚举，需要可以递归的函数，</p></li><li><p>如果是纯数字，直接返回该值，如果是加法，或者乘法，计算左右的算法的值，然后相加，乘</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">evaluate</span><span class="params">(<span class="number">_</span> expression:ArithmeticExpression)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> expression &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span>  .number(value):</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .addition(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">            <span class="keyword">return</span>  evaluate(<span class="keyword">left</span>) + evaluate(<span class="keyword">right</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .multiplication(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">            <span class="keyword">return</span>  evaluate(<span class="keyword">left</span>) * evaluate(<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-21.png" width="400"></li></ul><h3 id="15-Swift-下标-subscript"><a href="#15-Swift-下标-subscript" class="headerlink" title="15.Swift 下标 subscript"></a>15.Swift 下标 <code>subscript</code></h3><ul><li><p>写法：</p><ul><li><p>定义下标使用<code>subscript</code>关键字，指定一个或多个输入参数和返回类型 </p></li><li><p>与实例方法不同的是，下标可以设定为读写或只读 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">subscript (index:<span class="type">Int</span>)-&gt;<span class="keyword">Int</span>&#123;</span><br><span class="line">    <span class="keyword">get</span>&#123;</span><br><span class="line">        <span class="comment">//返回一个适当的int 类型的操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>(<span class="keyword">new</span><span class="type">Value</span>)&#123;</span><br><span class="line">        <span class="comment">// 执行适当的赋值操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下标可以接受任意数量的入参，并且这些入参可以是任意类型。下标的返回值也可以是任意类型。下标可以使用变量参数和可变参数，但不能使用输入输出参数，也不能给参数设置默认值</p></li><li><p>定义了一个Matrix结构体，用于表示一个Double类型的二维矩阵</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-22.png" width="400">  <figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">struct Matrix &#123;</span><br><span class="line">    let ro<span class="symbol">ws:</span> <span class="built_in">Int</span>, colum<span class="symbol">ns:</span> <span class="built_in">Int</span></span><br><span class="line">    <span class="built_in">var</span> gr<span class="symbol">id:</span> [Double]</span><br><span class="line">    init(ro<span class="symbol">ws:</span> <span class="built_in">Int</span>, colum<span class="symbol">ns:</span> <span class="built_in">Int</span>) &#123;</span><br><span class="line">        self.rows = <span class="built_in">rows</span></span><br><span class="line">        self.columns = <span class="built_in">columns</span></span><br><span class="line">        grid = Array(repeati<span class="symbol">ng:</span> <span class="number">0.0</span>,cou<span class="symbol">nt:</span> <span class="built_in">rows</span> * <span class="built_in">columns</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    func indexIsValidForRow(r<span class="symbol">ow:</span> <span class="built_in">Int</span>, colu<span class="symbol">mn:</span> <span class="built_in">Int</span>) -&gt; Bool &#123;</span><br><span class="line">        return <span class="built_in">row</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">row</span> &lt; <span class="built_in">rows</span> &amp;&amp; <span class="built_in">column</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">column</span> &lt; <span class="built_in">columns</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //  <span class="built_in">N</span> 行 * <span class="built_in">N</span> 列的矩阵</span><br><span class="line">    subscript(r<span class="symbol">ow:</span> <span class="built_in">Int</span>, colu<span class="symbol">mn:</span> <span class="built_in">Int</span>) -&gt; Double &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            assert(indexIsValidForRow(r<span class="symbol">ow:</span> <span class="built_in">row</span>, colu<span class="symbol">mn:</span> <span class="built_in">column</span>), <span class="string">"Index out of range"</span>)</span><br><span class="line">            return grid[(<span class="built_in">row</span> * <span class="built_in">columns</span>) + <span class="built_in">column</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        set &#123;</span><br><span class="line">            assert(indexIsValidForRow(r<span class="symbol">ow:</span> <span class="built_in">row</span>, colu<span class="symbol">mn:</span> <span class="built_in">column</span>), <span class="string">"Index out of range"</span>)</span><br><span class="line">            grid[(<span class="built_in">row</span> * <span class="built_in">columns</span>) + <span class="built_in">column</span>] = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-23.png" width="400"></li></ul><h3 id="16-swift析构过程"><a href="#16-swift析构过程" class="headerlink" title="16.swift析构过程"></a>16.swift析构过程</h3><ul><li>析构器用<code>deinit</code> 表示 – 构造器init<ul><li>deinit {}</li></ul></li></ul><h3 id="17-swift访问控制"><a href="#17-swift访问控制" class="headerlink" title="17.swift访问控制"></a>17.swift访问控制</h3><ul><li><p>模块和源文件</p><ul><li>使用<code>import</code> 导入另外一个模块</li></ul></li><li><p>访问级别 五种不同的访问级别</p><ul><li><p>开放访问／公开访问   —–同一模块下的任意文件，任意方法，任意实体</p></li><li><p>内部访问   —-在模块内访问任何实体，到那时不能从外部导入模块访问</p></li><li><p>文件私有访问  只能在定义的文件内部访问</p></li><li><p>私有访问限制 只能在定义的作用域内访问</p></li></ul></li><li><p>开放访问权限最高，私有访问最低访问级别</p><ul><li><p>开放访问只作用于类类型和类的成员，和公开访问区别如下</p></li><li><p>开放访问的类，可以在模块内，模块外继承，公开访问和更严的访问级别的类，只能在他们定义的模块内部被继承</p></li><li><p>开放访问的类成员，可以在模块内，模块外的子类重写，公开访问只能在定义的模版内部重写。</p></li></ul></li><li><p>默认访问级别 <code>interal</code> 级别</p><ul><li>单目标程序，是为整个程序服务的，默认interal 即可。</li></ul></li><li><p>访问控制语法</p><ul><li><p>通过 <code>open</code>,<code>public</code>,<code>internal</code>,<code>filepart</code>,<code>private</code> , 修饰符，声明实体的访问级别：</p><img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-24.png" width="400"><img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-25.png" width="400"></li></ul></li><li><p>子类的访问级别不得高于父类的访问级别</p></li><li>函数的访问级别  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-26.png" width="400"></li></ul><h3 id="18-Pch-文件创建"><a href="#18-Pch-文件创建" class="headerlink" title="18.Pch 文件创建"></a>18.Pch 文件创建</h3><ul><li><p>工程  - &gt;TARGETS  -&gt; Bulid Settings  -&gt;搜索prefix -&gt; LLVM -Language  下的<code>Precompile Prefix Header</code> 设置置为YES，默认是NO。</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-27.png" width="400"></li><li><p>LLVM -Language 设置下，<code>Prefix Header</code> pch文件路径</p>  <img src="/2016/09/21/2016b/swift学习笔记《4》/swift学习笔记4-28.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift学习笔记《3》-技巧</title>
      <link href="/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A3%E3%80%8B/"/>
      <url>/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A3%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-swift打印"><a href="#1-swift打印" class="headerlink" title="1.swift打印"></a>1.swift打印</h3><ul><li>自定义<code>printLog</code>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLog</span>&lt;T&gt;<span class="params">(message : T, fileName : String = <span class="keyword">__FILE__</span>, lineNum : Int = <span class="keyword">__LINE__</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="comment">// 处理fileName</span></span><br><span class="line">    <span class="keyword">let</span> file = (fileName <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(file):[\(lineNum)]"</span>)</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-获取命名空间"><a href="#2-获取命名空间" class="headerlink" title="2.获取命名空间"></a>2.获取命名空间</h3><ul><li><code>let nas = Bundle.main.infoDictionary![&quot;CFBundleExecutable&quot;] as! String</code></li></ul><h3 id="3-try-的三种方式"><a href="#3-try-的三种方式" class="headerlink" title="3.try 的三种方式"></a>3.try 的三种方式</h3><ul><li>JSONObjectWithData(data: NSData, options opt: NSJSONReadingOptions)函数会抛出异常 </li><li><code>throws</code>   需要用try 获取</li><li><p>try  需要用do catch  错误放在catch 中的error中</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123; </span><br><span class="line">let<span class="built_in"> aaa </span>= try  JSONObjectWithData()</span><br><span class="line">&#125;catch&#123; </span><br><span class="line">    <span class="builtin-name">print</span>(\(error)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>try?</code> 如果没有值，返回nil   返回值是可选类型</p></li><li><p><code>try!</code>相当于告诉系统一定没有异常，发生异常会崩溃</p></li></ul><h3 id="4-storyBoard-Refrence"><a href="#4-storyBoard-Refrence" class="headerlink" title="4.storyBoard Refrence"></a>4.storyBoard Refrence</h3><ul><li><p>方式1</p><ul><li>选中需要的控制器</li><li>选择导航条的editor</li><li>选择下拉菜单 refector to sroryboard</li></ul></li><li><p>方式2</p><ul><li>在控件库中拖入storyboard refrence </li><li>新建一个storyboard </li><li>点击storyboard refrence 关联到建立的storyboard，</li><li>原来的控件中就可以与 storyboard refrence 连线跳转</li></ul></li></ul><h3 id="5-swift封装-AFN"><a href="#5-swift封装-AFN" class="headerlink" title="5.swift封装 AFN"></a>5.swift封装 AFN</h3><ul><li><p>设置网络工具枚举 POST，GET</p>  <figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum RequestMothod:String &#123;</span><br><span class="line">case POST = <span class="string">"<span class="keyword">POST</span>"</span></span><br><span class="line">case GET = <span class="string">"<span class="keyword">GET</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装网络请求单例类</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkTools</span> : <span class="title">AFHTTPSessionManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span>  shareTools : <span class="type">NetworkTools</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span>  tools =  <span class="type">NetworkTools</span>()</span><br><span class="line">        tools.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/plain"</span>)</span><br><span class="line">        <span class="keyword">return</span> tools</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>AFN</code> 内部方法的封装</p><ul><li>封装POST，GET 用一个方法封装</li><li>使用关键字 <code>typealias</code> 设置方法的block ，参数是返回值，错误信息，返回值是空(rest:Any,error:Error )-&gt;()</li><li>定义方法中的参数，type ,urlstring ,pramas, 上面的回调的block</li><li>在方法中定义成功的闭包，失败的闭包，用于传进AFN的方法参数，<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部封装AFN 请求</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AFNNetWorkTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//typealias callBack = (_ aresult:AnyObject?,_ erro:Error)-&gt;()</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">afnRequest</span><span class="params">(methodType:AFNnetRequsetType,urlString:String,parames:[String:AnyObject]?,finished:@escaping <span class="params">(<span class="number">_</span> result:<span class="keyword">Any</span>?,<span class="number">_</span> error:Error?)</span></span></span>-&gt;())&#123;</span><br><span class="line">        <span class="comment">// 定义成功的回调</span></span><br><span class="line">        <span class="keyword">let</span> seccessBlck = &#123; (task:<span class="type">URLSessionDataTask</span>,resuurt:<span class="type">Any</span>?)-&gt;() <span class="keyword">in</span></span><br><span class="line">            finished(resuurt,<span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义失败的回调</span></span><br><span class="line">        <span class="keyword">let</span> faitureBlock = &#123; (tast:<span class="type">URLSessionDataTask</span>?,error:<span class="type">Error</span>)-&gt;() <span class="keyword">in</span></span><br><span class="line">            finished (tast,error)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> methodType == .<span class="type">GET</span> &#123;</span><br><span class="line">            <span class="keyword">get</span>(urlString, parameters: parames, progress: <span class="literal">nil</span>, success: seccessBlck, failure: faitureBlock)</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            post(urlString, parameters: parames, progress: <span class="literal">nil</span>, success: seccessBlck, failure: faitureBlock)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-Alamofire-监测网络"><a href="#6-Alamofire-监测网络" class="headerlink" title="6 Alamofire 监测网络"></a>6 <code>Alamofire</code> 监测网络</h3><ul><li>使用alamofire 监测网络状况  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">NetworkManager</span> = <span class="type">NetworkReachabilityManager</span>(host: <span class="string">"www.baidu.com"</span>)</span><br><span class="line"><span class="type">NetworkManager</span>!.listener = &#123; status <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>) </span><br><span class="line">    <span class="keyword">switch</span> status &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">NotReachable</span>: </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">""</span>)  </span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Unknown</span>:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">""</span>)  </span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Reachable</span>(.<span class="type">EthernetOrWiFi</span>): </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">""</span>) </span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Reachable</span>(.<span class="type">WWAN</span>):  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">""</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">NetworkManager</span>!.startListening()</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-UIWebView-自动填充账户密码"><a href="#7-UIWebView-自动填充账户密码" class="headerlink" title="7.UIWebView 自动填充账户密码"></a>7.<code>UIWebView</code> 自动填充账户密码</h3><ul><li>每次输入网页需要填充账户名密码十分麻烦，结合safari开模拟查看网页上标签  <figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let js = <span class="string">"document.getElementById('</span>userId').value = <span class="string">'1606020376@qq.com'</span>;<span class="string">" +</span></span><br><span class="line"><span class="string">    "</span>document.getElementById(<span class="string">'passwd'</span>).value = <span class="string">'haomage'</span>;<span class="string">"</span></span><br><span class="line"><span class="string">    webView.stringByEvaluatingJavaScriptFromString(js)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="8-双击底部tabbarItem刷新数据"><a href="#8-双击底部tabbarItem刷新数据" class="headerlink" title="8.双击底部tabbarItem刷新数据"></a>8.双击底部<code>tabbarItem</code>刷新数据</h3><ul><li>判断索引是当前，并且将要点击是当前</li><li>让滑倒顶部</li><li>刷新数据，延迟加载</li><li><p>清除角标</p>  <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">index</span> = childViewControllers.index(of: viewController)</span><br><span class="line"><span class="keyword">if</span> <span class="attr">selectedIndex</span> == <span class="number">0</span> &amp;&amp; <span class="attr">selectedIndex</span> == index&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">nav</span>  = childViewControllers[<span class="number">0</span>] as! UINavigationController</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">vc</span> = nav.childViewControllers[<span class="number">0</span>] as! HomeVC</span><br><span class="line">    vc.tableView?.setContentOffset(CGPoint(x: <span class="number">0</span>, y: -<span class="number">64</span>), animated: <span class="literal">true</span>)</span><br><span class="line">    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + <span class="number">1</span> , execute: &#123;</span><br><span class="line">        vc.loadData()</span><br><span class="line">    &#125;)</span><br><span class="line">    vc.tabBarItem.<span class="attr">badgeValue</span> = nil</span><br><span class="line">    UIApplication.shared.<span class="attr">applicationIconBadgeNumber</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-1.png"></li></ul><h3 id="9-毛玻璃-高斯模糊"><a href="#9-毛玻璃-高斯模糊" class="headerlink" title="9. 毛玻璃 - 高斯模糊"></a>9. 毛玻璃 - 高斯模糊</h3><ul><li>Vleual Effect View 选择，extra Light 就可以</li><li>子视图添加在View上，并且不透明   <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-2.png"></li></ul><h3 id="10-POP-基本概念"><a href="#10-POP-基本概念" class="headerlink" title="10.POP 基本概念"></a>10.POP 基本概念</h3><ul><li>支持3种动画类型<ul><li>弹力动画POPSPringAnimation</li><li>衰减动画 POPDelayAnimation</li><li>基本动画 POPBasicAnimation</li></ul></li><li>如果需要做延时动画需要如下代码  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5秒之后的延迟</span></span><br><span class="line">anim.beginTime = <span class="built_in">CACurrentMediaTime</span>( ) + <span class="built_in">CFTimeInterval</span> ( <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="11-Block-的延时执行，需要的时候再执行"><a href="#11-Block-的延时执行，需要的时候再执行" class="headerlink" title="11.Block 的延时执行，需要的时候再执行"></a>11.Block 的延时执行，需要的时候再执行</h3><ul><li><p>当前方法不能执行，使用属性记录，在需要的时候再执行</p>  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个属性，是可选的闭包，</span></span><br><span class="line"><span class="comment">// 闭包有参数无返回值 </span></span><br><span class="line"><span class="selector-tag">private</span> <span class="selector-tag">var</span> <span class="selector-tag">comlentionBlock</span><span class="selector-pseudo">:(</span> (<span class="attribute">clasName</span>:String? ) <span class="selector-tag">-</span>&gt; ( ) )?</span><br></pre></td></tr></table></figure></li><li><p>当属性引用闭包，闭包右修改了属性，必发生循环引用，在闭包中使用【weak self】</p></li></ul><h3 id="12-单例方法严谨"><a href="#12-单例方法严谨" class="headerlink" title="12.单例方法严谨"></a>12.单例方法严谨</h3><ul><li>单例如果调用了init方法，和share方法，得到的是不同的对象，</li><li><p>init 用private 修饰，外部只能使用share 方法</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> share = <span class="type">CZEmotionManager</span>()</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    loadPackAges()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-3.png" width="400"></li></ul><h3 id="13-加载bundle中的图片素材"><a href="#13-加载bundle中的图片素材" class="headerlink" title="13.加载bundle中的图片素材"></a>13.加载bundle中的图片素材</h3><ul><li>通过mainBundle，找到素材bundle</li><li><p>找到素材plist的path，plist转为数组</p>  <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">guard let <span class="built_in">path</span>  = Bundle.main.<span class="built_in">path</span>(forResource: <span class="string">"HHEmotion.bundle"</span>, ofType: <span class="literal">nil</span>),</span><br><span class="line">            let bundle  = Bundle(<span class="built_in">path</span>: <span class="built_in">path</span>) ,</span><br><span class="line">            let plistpath = bundle.<span class="built_in">path</span>(forResource: <span class="string">"emotion.plist"</span>, ofType: <span class="literal">nil</span>),</span><br><span class="line">            let arry  = NSArray(contentsOfFile: plistpath) as? <span class="string">[[String:String]]</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(arry)"</span>)</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-4.png" width="400"><h3 id="14-过滤数组-尾随闭包的简单写法"><a href="#14-过滤数组-尾随闭包的简单写法" class="headerlink" title="14.过滤数组 - 尾随闭包的简单写法"></a>14.过滤数组 - 尾随闭包的简单写法</h3></li><li><p>OC 中过滤数组，使用谓词</p></li><li><p>swift 中，过滤使用filter， P是数组，判断数组中的模型的一个属性的值是不是相等</p><ul><li><p>直接过滤 </p><img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-5.png" width="400"></li><li><p>尾随闭包： </p><img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-6.png" width="400"></li><li><p>如果是尾随闭包只有一句，并且是返回，闭包格式可以省略，参数省略之后，可以使用0,1….以此替代原有的参数 </p><img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-7.png" width="400"></li><li><p>return 也可以省略 </p> <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-8.png" width="400"></li></ul></li></ul><h3 id="15-测试正则表达式"><a href="#15-测试正则表达式" class="headerlink" title="15.测试正则表达式"></a>15.测试正则表达式</h3><ul><li>匹配中间带【】的字符，任何字符都行</li><li>字符中 【】() 是正则表达式的关键字，如果参与匹配，需要转义</li><li>匹配所有项</li><li>for循环所有项，根据所有项所在的range，匹配出字符串 <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-9.png" width="400"></li></ul><h3 id="16-图片拉伸处理"><a href="#16-图片拉伸处理" class="headerlink" title="16.图片拉伸处理"></a>16.图片拉伸处理</h3><ul><li>根据图片的size，设置拉伸的rect</li><li><p>拉伸图片</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">image</span> = UIImage(named: <span class="string">"ceshiimage"</span>)</span><br><span class="line">let <span class="built_in">size</span>  = <span class="built_in">image</span>?.<span class="built_in">size</span> ?? CGSize()</span><br><span class="line">let inset = UIEdgeInsetsMake(<span class="built_in">size</span>.<span class="built_in">height</span>*<span class="number">0.5</span>, <span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">0.5</span>, <span class="built_in">size</span>.<span class="built_in">height</span>*<span class="number">0.5</span>, <span class="built_in">size</span>.<span class="built_in">width</span>*<span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">image</span> = <span class="built_in">image</span>?.resizableImage(withCapInsets: inset)</span><br></pre></td></tr></table></figure>  <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-10.png" width="400"></li></ul><h3 id="17-UIColor-16进制转RGB"><a href="#17-UIColor-16进制转RGB" class="headerlink" title="17.UIColor 16进制转RGB"></a>17.<code>UIColor</code> 16进制转RGB</h3><ul><li>写分类</li><li>根据16进制 位运算，有移得出相对应的RGB的数值</li><li><p>生成颜色</p>  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> func jy_colorWithHex(<span class="built_in">hex</span>:u_int)-&gt;UIColor&#123;</span><br><span class="line"></span><br><span class="line">    let <span class="built_in">red</span> = Float((<span class="built_in">hex</span> &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    let <span class="built_in">green</span> = Float((<span class="built_in">hex</span> &amp; <span class="number">0x00FF00</span>) &gt;&gt; <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    let <span class="built_in">blue</span> = Float(<span class="built_in">hex</span> &amp; <span class="number">0x0000FF</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> UIColor.init(colorLiteralRed: <span class="built_in">red</span>/<span class="number">255.0</span>, <span class="built_in">green</span>: <span class="built_in">green</span>/<span class="number">255.0</span>, <span class="built_in">blue</span>: <span class="built_in">blue</span>/<span class="number">255.0</span>, <span class="built_in">alpha</span>: <span class="number">1.0</span>);   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <img src="/2016/09/21/2016b/swift学习笔记《3》/swift学习笔记3-11.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift学习笔记《2》-swift语法</title>
      <link href="/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A2%E3%80%8B/"/>
      <url>/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A2%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-常量变量"><a href="#1-常量变量" class="headerlink" title="1.常量变量"></a>1.常量变量</h3><ul><li><code>let</code>  <code>var</code> </li></ul><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><ul><li>整型，浮点型，对象类型，结构体类型（swift中大部分类改为了结构体）</li><li><p>整型</p><ul><li><p><code>Int8</code> 有符号8位整型</p></li><li><p><code>Int16</code> 有符号16位整型</p></li><li><p><code>Int 32</code> 有符号32位整型</p></li><li><p><code>Int 64</code> 有符号64位整型</p></li><li><p><code>Int</code>  与平台有关，默认相当于OC中NSInteger</p></li><li><p><code>UInt8</code> 无符号8位整型</p></li><li><p><code>UInt16,UInt32,UInt64</code></p></li></ul></li><li><p>浮点型</p><ul><li><code>Float</code> 32位浮点型 <code>Double</code> 64位浮点型</li></ul></li><li><p>基本运算</p><ul><li>相同运算符之间才能参与运算，因为swift中没有隐式转换</li></ul></li></ul><h3 id="3-逻辑分支"><a href="#3-逻辑分支" class="headerlink" title="3.逻辑分支"></a>3.逻辑分支</h3><ul><li><p><code>if</code>   <code>switch</code>  <code>三目运算符</code> <code>等判断语句</code></p></li><li><p><code>guard</code>运算符(守护) </p><ul><li>当条件表达式位true的时候跳过else语句，继续向下执行</li><li>当条件表达式为false的时候进入else语句中，break，continue，return，throw等跳出<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> 条件表达式 <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条换语句</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">语句组</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>switch</code>语句</p><ul><li>switch 的case之后不必须加break  case不在只是Int，可以是浮点，字符串，区间(0..&lt;10,0…10)</li><li>一个case 可以判断多个值，用，隔开</li></ul></li></ul><h3 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h3><ul><li><code>for循环</code><ul><li>开区间(0..&lt;10)，闭区间(0…10)</li><li>for循环打印字典时可以使用元组</li></ul></li><li><code>while</code>，<code>do-while</code> 循环<ul><li>使用<code>repeat while</code>循环代替do-while循环</li><li>i++已经被弃用，使用i=i+1；</li></ul></li></ul><h3 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5.字符串"></a>5.字符串</h3><ul><li><p><code>String</code> 是结构体，性能比NSString 高</p></li><li><p>String的长度，astring.characters.count 字符串长度</p></li><li><p>str1 + str2 两个字符串相加</p></li><li><p>字符串的格式化输出</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String(forma<span class="variable">t:</span> <span class="string">"%02d:%02d"</span>, <span class="keyword">argument</span><span class="variable">s:</span> [<span class="built_in">min</span>, second])</span><br></pre></td></tr></table></figure></li><li><p>字符串的截取 暂时先转为NSString 进行截取</p>  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">let</span> myStr = <span class="string">"www.520it.com"</span></span><br><span class="line"><span class="symbol">var</span> <span class="keyword">subStr </span>= (myStr as NSString).<span class="keyword">substringFromIndex(4)</span></span><br><span class="line"><span class="keyword">subStr </span>= (myStr as NSString).<span class="keyword">substringToIndex(3)</span></span><br><span class="line"><span class="keyword">subStr </span>= (myStr as NSString).<span class="keyword">substringWithRange(NSRange(location: </span><span class="number">4</span>, length: <span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="6数组"><a href="#6数组" class="headerlink" title="6数组"></a>6数组</h3><ul><li><code>Array</code> 一个范型数组</li><li><p>数组声明方法</p>  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stuArray1:<span class="keyword">Array</span>&lt;<span class="keyword">String</span>&gt;</span><br><span class="line"><span class="keyword">var</span> stuArray2: [<span class="keyword">String</span>]</span><br></pre></td></tr></table></figure></li><li><p>数组的 增- 删- 改-  查</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line"><span class="built_in">array</span>.append(<span class="string">"yz"</span>)</span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line"><span class="built_in">array</span>.removeFirst()</span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = <span class="string">"why"</span></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="built_in">array</span>[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>数组的合并 同类型的两个数组可以直接相加</p>  <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 数组合并</span><br><span class="line">// 注意:只有相同类型的数组才能合并</span><br><span class="line">var<span class="built_in"> array </span>= [<span class="string">"why"</span>, <span class="string">"lmj"</span>,<span class="string">"lnj"</span>]</span><br><span class="line">var array1 = [<span class="string">"yz"</span>, <span class="string">"wsz"</span>]</span><br><span class="line">var array2 =<span class="built_in"> array </span>+ array1;</span><br><span class="line"></span><br><span class="line">// 不建议一个数组中存放多种类型的数据</span><br><span class="line">var array3 = [2, 3, <span class="string">"why"</span>]</span><br><span class="line">var array4 = [<span class="string">"yz"</span>, 23]</span><br><span class="line">array3 + array4</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-字典"><a href="#7-字典" class="headerlink" title="7.字典"></a>7.字典</h3><ul><li>Dictionary 是个范型集合</li><li><p>声明方式</p>  <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict1: <span class="type">Dictionary</span>&lt;<span class="keyword">Int</span>, <span class="keyword">String</span>&gt;</span><br><span class="line"><span class="keyword">var</span> dict2: <span class="type"></span>[<span class="keyword">Int</span>: <span class="type">String</span>]</span><br></pre></td></tr></table></figure></li><li><p>字典的增 -删- 改- 查</p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">dict[<span class="string">"height"</span>] = <span class="number">1.88</span></span><br><span class="line">dict[<span class="string">"weight"</span>] = <span class="number">70.0</span></span><br><span class="line"><span class="comment">// 删除字段</span></span><br><span class="line">dict.removeValueForKey(<span class="string">"height"</span>)</span><br><span class="line"><span class="comment">// 修改字典</span></span><br><span class="line">dict[<span class="string">"name"</span>] = <span class="string">"lmj"</span></span><br><span class="line"><span class="comment">// 查询字典</span></span><br><span class="line">dict[<span class="string">"name"</span>]</span><br></pre></td></tr></table></figure></li><li><p>字典的遍历 使用元组</p></li><li>字典的合并  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字典的合并</span></span><br><span class="line"><span class="keyword">var</span> dict1 = [<span class="string">"name"</span> : <span class="string">"yz"</span>, <span class="string">"age"</span> : <span class="number">20</span>]</span><br><span class="line"><span class="keyword">var</span> dict2 = [<span class="string">"height"</span> : <span class="number">1.87</span>, <span class="string">"phoneNum"</span> : <span class="string">"+86 110"</span>]</span><br><span class="line"><span class="comment">// 字典不可以相加合并</span></span><br><span class="line"><span class="keyword">for</span> (key, <span class="keyword">value</span>) <span class="keyword">in</span> dict1 &#123;</span><br><span class="line">    dict2[key] = <span class="keyword">value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-元组"><a href="#8-元组" class="headerlink" title="8.元组"></a>8.元组</h3><ul><li>是swift中特有的定义一组数据，类型可相同可不相同   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组:HTTP错误</span></span><br><span class="line"><span class="comment">// let array = [404, "Not Found"]</span></span><br><span class="line"><span class="comment">// 写法一:</span></span><br><span class="line">let error = (<span class="number">404</span>, <span class="string">"Not Found"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(error.<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(error.<span class="number">1</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二:</span></span><br><span class="line"></span><br><span class="line">let error = (errorCode : <span class="number">404</span>, errorInfo : <span class="string">"Not Found"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(error.errorCode)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(error.errorInfo)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三:</span></span><br><span class="line">let (errorCode, errorIno) = (<span class="number">404</span>, <span class="string">"Not Found"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(errorCode)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(errorIno)</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-可选类型"><a href="#9-可选类型" class="headerlink" title="9.可选类型"></a>9.可选类型</h3><ul><li><p>可选类型的取值，有值或者是空值</p></li><li><p>可选类型的使用</p></li><li><p>使用场景</p>  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方式利用类型推导</span></span><br><span class="line"><span class="keyword">let</span> url = NSURL(<span class="keyword">string</span>: <span class="string">"www.520it.com"</span>)</span><br><span class="line"><span class="comment">// 通过url来创建request对象:在使用可选类型前要先进行判断是否有值</span></span><br><span class="line"><span class="comment">// 该语法成为可选绑定(如果url有值就解包赋值给tempURL,并且执行&#123;&#125;)</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tempUrl = url &#123;</span><br><span class="line">    <span class="keyword">let</span> request = NSURLRequest(URL: tempUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h3><ul><li><p>函数的格式</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> -&gt; 返回值类型 &#123;</span><br><span class="line">    代码块</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数<span class="number">1</span>:参数<span class="number">1</span>类型，参数<span class="number">2</span>：参数<span class="number">2</span>类型)</span></span> -&gt; 返回值类型 &#123;</span><br><span class="line">    代码块</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数 外部参数和内部参数</p><ul><li><p>变量名前加标签就是外部参数</p></li><li><p>方法重写  子类重新调用父类方法是重写，override </p></li><li><p>方法重载 方法名相同但是参数不同，称为方法重载</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// num1和a是外部参数的名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ride</span><span class="params">(num1 num1 : Int, a num2 : Int, b num3 : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num2 * num3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = ride(num1: <span class="number">20</span>, a: <span class="number">4</span>, b: <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 方法的重载:方法名称相同,但是参数不同,可以称之为方法的重载(了解)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ride</span><span class="params">(num1: Int, <span class="number">_</span> num2 :Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result2 = ride(<span class="number">20</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>函数的默认参数</p><ul><li>不传的话有个默认值<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makecoffee</span><span class="params">(type :String = <span class="string">"卡布奇诺"</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"制作一杯\(type)咖啡。"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可变参数</p><ul><li>可以接受不确定数量的输入类型参数，但必须是相同类型，在参数类型后面拼接<strong>…</strong> 来实现<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">sum</span>(numbers:<span class="keyword">Double</span>...) -&gt; <span class="keyword">Double</span> &#123;</span><br><span class="line">    var total: <span class="keyword">Double</span> = <span class="number">0</span></span><br><span class="line">    for <span class="keyword">number</span> <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        total += <span class="keyword">number</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">100.0</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">30</span>, <span class="number">80</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>函数引用类型-指针传递</p><ul><li>默认是值传递，不改变外部变量的值，如果想改变，需要传地址</li><li>传入的地址必须是变量</li><li>swift提供inout 关键字实现</li></ul></li></ul><h3 id="11-swift中类的使用"><a href="#11-swift中类的使用" class="headerlink" title="11.swift中类的使用"></a>11.swift中类的使用</h3><ul><li>定义类的时候可以没有父类，需要父类的话大多可以使用NSObject 作为父类，非OC的NSObject</li><li><p>类的属性 分为 储值属性，算值属性，类属性</p><ul><li><p>储值属性</p></li><li><p>计算型属性 不存储实际值，提供getter 和可选的setter间接获取或设置其他属性，</p><ul><li>一般只提供getter 方法，如果只实现了getter 方法，则为只读属性，可以省略get{},直接return</li></ul></li><li><p>类属性  所有的类和类的实例都有一份类属性，如果在某一处更新后，该类属性就会被修改</p></li><li><p>类属性使用static 关键字修改，</p></li></ul></li><li><p>监听属性的修改</p><ul><li><p>在oc中使用set 方法监听</p></li><li><p>在swift中，使用属性观察者监听和相应属性值的变化</p></li><li><p>使用属性的will set 方法监测新值，在didset中监测旧值</p></li><li><p><code>willSet (new){ }</code>  <code>didSet(old){}</code></p></li><li><p>在didset中生成计算型属性的值</p></li><li><p>didSet 属性直接赋值不会调用didSet方法，而是在初始化之后再赋值才能调用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var</span> expires_in: NSTimeInterval = <span class="number">0</span> &#123;</span><br><span class="line">    <span class="section">didSet</span> &#123;</span><br><span class="line">        <span class="attribute">expiresDate</span> = NSDate(timeIntervalSinceNow: expires_in)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="12-类的构造函数"><a href="#12-类的构造函数" class="headerlink" title="12.类的构造函数"></a>12.类的构造函数</h3><ul><li><p>构造函数的基本使用</p><ul><li>类的属性必须有值，如果不是在初始化的时候复制，在构造方法中给类属性赋值，<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">NSObject &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> name : String</span><br><span class="line">    <span class="keyword">var</span> age : <span class="built_in">Int</span></span><br><span class="line">    <span class="comment">// 重写了NSObject(父类)的构造方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        name = <span class="string">""</span></span><br><span class="line">        age = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Person对象</span></span><br><span class="line">let p = Person()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>初始化的时候给属性赋值</p><ul><li>如果在自定义对象的时候给属性赋值，自定义init方法，会覆盖init方法，不会有默认的初始化方法<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person: NSObject &#123;</span><br><span class="line">    <span class="selector-tag">var</span> name : String</span><br><span class="line">    <span class="selector-tag">var</span> age : Int</span><br><span class="line">    <span class="comment">// 自定义构造函数,会覆盖init()函数</span></span><br><span class="line">    init(name : String, age : Int) &#123;</span><br><span class="line">        self<span class="selector-class">.name</span> = name</span><br><span class="line">        self<span class="selector-class">.age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个Person对象</span></span><br><span class="line">let <span class="selector-tag">p</span> = Person(name: <span class="string">"why"</span>, age: <span class="number">18</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="13-字典转模型-初始化时传入字典"><a href="#13-字典转模型-初始化时传入字典" class="headerlink" title="13 字典转模型 (初始化时传入字典)"></a>13 字典转模型 <strong>(初始化时传入字典)</strong></h3><ul><li>字典取值是NSObject  是任意类型</li><li>可以通过as转换之后再赋值，不同类型不能直接赋值 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="type">NSObject &#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> name : String</span><br><span class="line">    <span class="keyword">var</span> age : <span class="built_in">Int</span></span><br><span class="line">    <span class="comment">// 自定义构造函数,会覆盖init()函数</span></span><br><span class="line">    <span class="keyword">init</span>(dict : [String : NSObject]) &#123;</span><br><span class="line">        name = dict[<span class="string">"name"</span>] <span class="keyword">as</span>! String</span><br><span class="line">        age = dict[<span class="string">"age"</span>] <span class="keyword">as</span>! <span class="built_in">Int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Person对象</span></span><br><span class="line">let dict = [<span class="string">"name"</span> : <span class="string">"why"</span>, <span class="string">"age"</span> : <span class="number">18</span>]</span><br><span class="line">let p = Person(dict: dict)</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-字典转模型-KVC-转化"><a href="#14-字典转模型-KVC-转化" class="headerlink" title="14 字典转模型 (KVC 转化)"></a>14 字典转模型 <strong>(KVC 转化)</strong></h3><ul><li>kvc 不能保证全部复制，所以属性要有默认值，基本数据类型默认值是0，对象结构体定义为可选即可<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 结构体或者类的类型,必须是可选类型.因为不能保证一定会赋值</span></span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span>?</span><br><span class="line">    <span class="comment">// 基本数据类型不能是可选类型,否则KVC无法转化</span></span><br><span class="line">    <span class="keyword">var</span> age : <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义构造函数,会覆盖init()函数</span></span><br><span class="line">    <span class="keyword">init</span>(dict : [<span class="type">String</span> : <span class="type">NSObject</span>]) &#123;</span><br><span class="line">        <span class="comment">// 必须先初始化对象</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="comment">// 调用对象的KVC方法字典转模型</span></span><br><span class="line">        setValuesForKeysWithDictionary(dict)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个Person对象</span></span><br><span class="line"><span class="keyword">let</span> dict = [<span class="string">"name"</span> : <span class="string">"why"</span>, <span class="string">"age"</span> : <span class="number">18</span>]</span><br><span class="line"><span class="keyword">let</span> p = <span class="type">Person</span>(dict: dict)</span><br></pre></td></tr></table></figure></li></ul><h3 id="15闭包的介绍"><a href="#15闭包的介绍" class="headerlink" title="15闭包的介绍"></a>15闭包的介绍</h3><ul><li><p>闭包就是匿名函数</p></li><li><p><code>block</code> 的写法</p>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类型：</span><br><span class="line">返回值(^block的名称)(block的参数列表)</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">值：</span><br><span class="line">^(参数列表)&#123;</span><br><span class="line"><span class="code">    // 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>swift的写法</p><ul><li><p>定义网络请求的类</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func loadRequest<span class="function"><span class="params">(callBack:()-&gt;())</span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">callBack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用闭包</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">httpTool.loadRequest<span class="function"><span class="params">( &#123; ( )-&gt;( ) <span class="keyword">in</span> </span></span></span><br><span class="line"><span class="function"><span class="params">    tableView.reloadData</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br></pre></td></tr></table></figure></li><li><p>闭包总结</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">闭包的写法：</span><br><span class="line">类型：  （型参列表）<span class="function">-&gt;</span>( 返回值 )</span><br><span class="line"></span><br><span class="line">值：</span><br><span class="line">&#123;  <span class="function"><span class="params">( 型参列表 )</span> -&gt;</span> 返回值类型 <span class="keyword">in</span>  </span><br><span class="line"></span><br><span class="line"><span class="regexp">// 执行代码</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>尾随闭包</p><ul><li>如果闭包没有参数没有返回值，<code>( ) -&gt; ( )  in</code>可以省略</li><li>如果闭包是作为函数的最后一个参数，则可以将闭包写在（）后面</li><li><p>如果函数只有一个参数，且最后一个参数是闭包，那么（）也可以不写，直接在方法名后面拼接{}</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">省略前</span><br><span class="line">httpTool.loadRequest<span class="function"><span class="params">(&#123; ( ) -&gt; ( ) <span class="keyword">in</span> </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">print</span>(完全不省略)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">省略1</span></span><br><span class="line"><span class="function"><span class="title">httpTool</span>.<span class="title">loadRequest</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">print</span>(省略括号 <span class="keyword">in</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">省略2</span></span><br><span class="line"><span class="function"><span class="title">httpTool</span>.<span class="title">loadRequest</span><span class="params">( )</span>&#123; </span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(小括号前置)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">省略3</span></span><br><span class="line"><span class="function"><span class="title">httpTool</span>.<span class="title">loadRequest</span>&#123; </span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(终结版尾随闭包)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="16-闭包的循环引用"><a href="#16-闭包的循环引用" class="headerlink" title="16.闭包的循环引用"></a>16.闭包的循环引用</h3><ul><li><p><code>deinit{}</code>实现deinit 函数，检测一个对象是否销毁</p></li><li><p>swift 循环引用的三种方式</p><ul><li>使用<code>weak</code>，使用<code>【weak self】</code>，使用<code>unowned</code> 关键字</li></ul></li></ul><ul><li><p><code>使用weak</code> 关键字对控制器持有，weakself是可选类型，使用时强行解包，因为一定有值</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">weak <span class="selector-tag">var</span> weakSelf = self</span><br><span class="line">httpTool<span class="selector-class">.loadData</span> &#123;</span><br><span class="line">    print(<span class="string">"加载数据完成,更新界面:"</span>, NSThread.currentThread())</span><br><span class="line">    weakSelf!<span class="selector-class">.view</span><span class="selector-class">.backgroundColor</span> = UIColor.redColor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>使用 【weak self】</code> 【weak self 】写在闭包中，在闭包中使用的self 都是weak的</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">httpTool.loadData &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] () -&gt; () <span class="keyword">in</span></span><br><span class="line">    print(<span class="string">"加载数据完成,更新界面:"</span>, <span class="built_in">NSThread</span>.currentThread())</span><br><span class="line">    <span class="keyword">self</span>!.view.backgroundColor = <span class="built_in">UIColor</span>.redColor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>unowned 类似oc的unretain</code>  ,即使原来引用的对象释放了，也会对释放的对象，持有一个无效的引用，不是可选的，不可能指向nil</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">httpTool<span class="selector-class">.loadData</span> &#123;[unowned self] () -&gt; () <span class="keyword">in</span></span><br><span class="line">    print(<span class="string">"加载数据完成,更新界面:"</span>, NSThread.currentThread())</span><br><span class="line">    self<span class="selector-class">.view</span><span class="selector-class">.backgroundColor</span> = UIColor.redColor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="17-懒加载"><a href="#17-懒加载" class="headerlink" title="17.懒加载"></a>17.懒加载</h3><ul><li>希望所有的对象，只有加载的时候才能加入到内存中，</li><li><p><code>lazy</code> 关键字，是专门修饰懒加载属性的</p><ul><li><p>格式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> 变量名 = &#123; 创建变量代码 &#125;()</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 懒加载的本质是,在第一次使用的时候执行闭包,将闭包的返回值赋值给属性</span><br><span class="line">// lazy的作用是只会赋值一次</span><br><span class="line">lazy var<span class="built_in"> array </span>: [String] = &#123;</span><br><span class="line">    () -&gt; [String] in</span><br><span class="line">   <span class="built_in"> return </span>[<span class="string">"why"</span>, <span class="string">"lmj"</span>, <span class="string">"lnj"</span>]</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="18-便利构造函数"><a href="#18-便利构造函数" class="headerlink" title="18.便利构造函数"></a>18.便利构造函数</h3><ul><li><p>convenience : 便利,使用convenience修饰的构造函数叫做便利构造函数</p></li><li><p>便利构造函数通常用在对系统的类进行构造函数的扩充时使用</p></li><li><p>便利构造函数的特点</p><ul><li><p>便利构造函数，一般写在extension中</p></li><li><p>便利构造函数，在init前面添加convenience 关键字</p></li><li><p>在便利构造器中需要明确调用<code>self.init()</code>, 而且是先调用。</p></li><li><p>在继承中，重写父类的方法中，初始化自己的方法中，先初始化自己的属性，之后调用父类的super.init()</p></li></ul></li></ul><h3 id="19-Selector-事件监听"><a href="#19-Selector-事件监听" class="headerlink" title="19 #Selector() 事件监听"></a>19 <code>#Selector()</code> 事件监听</h3><ul><li><p>事件监听本质发送消息.但是发送消息是OC的特性</p></li><li><p>将方法包装成@SEL –&gt; 类中查找方法列表 –&gt; 根据@SEL找到imp指针(函数指针) –&gt; 执行函数</p></li><li><p>如果swift中将一个函数声明称private,那么该函数不会被添加到方法列表中</p></li><li><p>如果在private前面加上@objc,那么该方法依然会被添加到方法列表中</p></li></ul><h3 id="20-类型转换"><a href="#20-类型转换" class="headerlink" title="20.类型转换"></a>20.类型转换</h3><ul><li><p>类型转换在 Swift 中使用<code>is</code>和 <code>as</code>操作符实现 ，你也可以用它来检查一个类型是否实现了某个协议，就像在检验协议的一致性部分讲述的一样。</p></li><li><p>定一个类<code>MediaItem</code>，name 属性,init(name:)  方法</p></li><li><p>其2个子类<code>Movie</code>，<code>Song</code></p></li><li><p>检查类型</p><ul><li><code>is</code>判断是一个实例，是否属于特定子类 if item is Movie</li></ul></li><li><p>向下转型</p><ul><li>使用子类特有的属性和方法，使用<code>as</code> 转化为子类 as?和as!</li></ul></li></ul><h3 id="21-Any-和-AnyObject-的类型转换"><a href="#21-Any-和-AnyObject-的类型转换" class="headerlink" title="21.Any 和 AnyObject 的类型转换"></a>21.<code>Any 和 AnyObject</code> 的类型转换</h3><ul><li>Any 表示任何类型，包括函数类型</li><li>AnyObject表示任何类型的实例  <figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> thing in things &#123;</span><br><span class="line">    <span class="keyword">switch</span> thing &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">Int</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"zero as an Int"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">Double</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"zero as a Double"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> someInt <span class="keyword">as</span> <span class="keyword">Int</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"an integer value of \(someInt)"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> someDouble <span class="keyword">as</span> <span class="keyword">Double</span> where someDouble &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"a positive double value of \(someDouble)"</span>)</span><br><span class="line">    <span class="keyword">case</span> is <span class="keyword">Double</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"some other double value that I don't want to print"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> someString <span class="keyword">as</span> String:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"a string value of \"\(someString)\""</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">as</span> (<span class="keyword">Double</span>, <span class="keyword">Double</span>):</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"an (x, y) point at \(x), \(y)"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> movie <span class="keyword">as</span> Movie:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"a movie called '\(movie.name)', dir. \(movie.director)"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> stringConverter <span class="keyword">as</span> String -&gt; String:</span><br><span class="line">        <span class="keyword">print</span>(stringConverter(<span class="string">"Michael"</span>))</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"something else"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zero as an Int</span></span><br><span class="line"><span class="comment">// zero as a Double</span></span><br><span class="line"><span class="comment">// an integer value of 42</span></span><br><span class="line"><span class="comment">// a positive double value of 3.14159</span></span><br><span class="line"><span class="comment">// a string value of "hello"</span></span><br><span class="line"><span class="comment">// an (x, y) point at 3.0, 5.0</span></span><br><span class="line"><span class="comment">// a movie called 'Ghostbusters', dir. Ivan Reitman</span></span><br><span class="line"><span class="comment">// Hello, Michael</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="22-在一个类型中嵌套另外一个类型"><a href="#22-在一个类型中嵌套另外一个类型" class="headerlink" title="22.在一个类型中嵌套另外一个类型"></a>22.在一个类型中嵌套另外一个类型</h3><ul><li><p><code>BlackjackCard</code>（二十一点）,结构体中，嵌套<code>Suit</code>,<code>Rank</code> 两个枚举</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BlackjackCard</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嵌套的 Suit 枚举</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Suit</span>: <span class="title">Character</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Spades</span> = <span class="string">"♠"</span>,</span><br><span class="line">            <span class="type">Hearts</span> = <span class="string">"♡"</span>, </span><br><span class="line">            <span class="type">Diamonds</span> = <span class="string">"♢"</span>, </span><br><span class="line">            <span class="type">Clubs</span> = <span class="string">"♣"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嵌套的 Rank 枚举</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Rank</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Two</span> = <span class="number">2</span>, <span class="type">Three</span>, <span class="type">Four</span>, <span class="type">Five</span>, <span class="type">Six</span>, <span class="type">Seven</span>, <span class="type">Eight</span>, <span class="type">Nine</span>, <span class="type">Ten</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Jack</span>, <span class="type">Queen</span>, <span class="type">King</span>, <span class="type">Ace</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Values</span> </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> first: <span class="type">Int</span>, second: <span class="type">Int</span>?</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> values: <span class="type">Values</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> .<span class="type">Ace</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">Values</span>(first: <span class="number">1</span>, second: <span class="number">11</span>)</span><br><span class="line">                <span class="keyword">case</span> .<span class="type">Jack</span>, .<span class="type">Queen</span>, .<span class="type">King</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">Values</span>(first: <span class="number">10</span>, second: <span class="literal">nil</span>)</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">Values</span>(first: <span class="keyword">self</span>.rawValue, second: <span class="literal">nil</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BlackjackCard 的属性和方法</span></span><br><span class="line">    <span class="keyword">let</span> rank: <span class="type">Rank</span>, suit: <span class="type">Suit</span></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> output = <span class="string">"suit is \(suit.rawValue),"</span></span><br><span class="line">        output += <span class="string">" value is \(rank.values.first)"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> second = rank.values.second &#123;</span><br><span class="line">            output += <span class="string">" or \(second)"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 <code>let theAceOfSpades = BlackjackCard(rank: .Ace, suit: .Spades)</code> </p></li><li><p>使用：<code>let heartsSymbol = BlackjackCard.Suit.Hearts.rawValue</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift学习笔记《1》</title>
      <link href="/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A1%E3%80%8B/"/>
      <url>/2016/09/21/2016b/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A1%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-UIButton"><a href="#1-UIButton" class="headerlink" title="1.UIButton"></a>1.UIButton</h4><ul><li>button 的初始化，点击事件</li><li>button 传入参数，和不传入参数市一样的，好像只写方法名</li><li><p>button 的属性</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">view</span>.backgroundColor=UIColor.green</span><br><span class="line"><span class="keyword">let</span>  btn = UIButton(<span class="built_in">type</span>: .<span class="built_in">system</span>)</span><br><span class="line">btn.setTitle(<span class="string">"button"</span>, <span class="keyword">for</span>: .<span class="keyword">normal</span>)</span><br><span class="line">btn.frame=CGRect(<span class="keyword">x</span>: <span class="number">100</span>, <span class="keyword">y</span>: <span class="number">100</span>, width: <span class="number">100</span>, heigh<span class="variable">t:</span> <span class="number">100</span>)</span><br><span class="line">btn.addTarget(self, action: #selector(btnClick), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line"><span class="keyword">view</span>.addSubview(btn)</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">(buttt:UIButton)</span></span> &#123;</span><br><span class="line"><span class="built_in">print</span>(buttt)        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-UITableView"><a href="#2-UITableView" class="headerlink" title="2.UITableView"></a>2.UITableView</h4><ul><li>懒加载  l<strong>azy</strong> 关键字 + <strong>var</strong>  <strong>属性名</strong> ：<strong>[</strong>集合中的类型<strong>]</strong> <strong>=</strong> <strong>{</strong> 设置return 类型 <strong>}</strong> <strong>(</strong> <strong>)</strong></li><li><p>mark 的标记 <strong>// MARK:懒加载</strong></p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> dataSoure: [<span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"11"</span>,<span class="string">"22"</span>,<span class="string">"33"</span>,<span class="string">"44"</span>,<span class="string">"55"</span>]</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li><li><p>tableView的属性   跟OC类似，</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">UITableViewDelegate</span>,<span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tv = <span class="type">UITableView</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        tv.dataSource=<span class="keyword">self</span></span><br><span class="line">        tv.delegate=<span class="keyword">self</span></span><br><span class="line">        view=tv</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>tableView的代理设置  实现代理，是在类后面逗号隔开</p></li><li>tableView的代理方法实现   数据源方法写在extension 中，提高代码的可读性  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// extension 想当于 OC中的category</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span> : <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//MARK: -数据源方法</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"cell2"</span>)</span><br><span class="line">        <span class="keyword">if</span> cell==<span class="literal">nil</span> &#123;</span><br><span class="line">            cell=<span class="type">UITableViewCell</span>(style: .<span class="keyword">default</span>, reuseIdentifier: <span class="string">"cell2"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        cell?.textLabel?.text = dataSoure[indexPath.row]</span><br><span class="line">        <span class="keyword">return</span> cell!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-swift-TabBar"><a href="#3-swift-TabBar" class="headerlink" title="3.swift - TabBar"></a>3.swift - TabBar</h4><ul><li><p>结构是tabBar 包括四个navigationController </p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tabBar.tintColor=UIColor.orange</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addSelfChildViewController</span><span class="params">(childVC: BillListVC()</span></span>, title: <span class="string">"账单"</span>, imageString: <span class="string">"home_tabbar_zd"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addSelfChildViewController</span><span class="params">(childVC: StatementVC()</span></span>, title: <span class="string">"报表"</span>, imageString: <span class="string">"home_tabbar_bb"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addSelfChildViewController</span><span class="params">(childVC: InvoiceListVC()</span></span>, title: <span class="string">"发票"</span>, imageString: <span class="string">"home_tabbar_fp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addSelfChildViewController</span><span class="params">(childVC: PartnerVC()</span></span>, title: <span class="string">"伙伴"</span>, imageString: <span class="string">"home_tabbar_hb"</span>)</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addSelfChildViewController</span><span class="params">(childVC: UIViewController,title:String,imageString:String)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    childVC.tabBarItem.image=<span class="type">UIImage</span>(named: imageString)</span><br><span class="line"></span><br><span class="line">    childVC.tabBarItem.selectedImage=<span class="type">UIImage</span>(named: imageString.appending(<span class="string">"_h"</span>))</span><br><span class="line"></span><br><span class="line">    childVC.tabBarItem.title=title</span><br><span class="line"></span><br><span class="line">    childVC.title=title;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> nav = <span class="type">UINavigationController</span>(rootViewController: childVC)</span><br><span class="line"></span><br><span class="line">    addChildViewController(nav)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串用appdend ,拼接字符用<strong>+</strong>号</p></li><li><p>命名空间 可以被修改</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> nas = Bundle.main.infoDictionary! [<span class="string">"CFBundleExecutable"</span>] <span class="keyword">as</span>! <span class="built_in">String</span></span><br></pre></td></tr></table></figure></li><li><p>从plist 获取json  进行解析。  从本地加载转化位nsdata, 使用JSONSeriralation 转化为数组，打印数组中的字典</p></li><li><p><strong>contentsOfFile</strong> 方法是可选类型，调用 <strong>JSONSerialization.jsonObject</strong> 方法是需要强制解包，</p></li><li><p>打印 数组中的字典是时候，需要 声明数组中的数据类型</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"home.plist"</span>, ofType: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> filePath = path&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfFile: filePath)</span><br><span class="line">        <span class="keyword">let</span> diarry:<span class="type">Any</span> = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: data! <span class="keyword">as</span> <span class="type">Data</span>, options: <span class="type">JSONSerialization</span>.<span class="type">ReadingOptions</span>.mutableContainers)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> adic <span class="keyword">in</span> diarry <span class="keyword">as</span>! [[<span class="type">String</span>:<span class="type">String</span>]] &#123;</span><br><span class="line">            <span class="built_in">print</span>(adic)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(diarry)</span><br><span class="line">    &#125; <span class="keyword">catch</span>   &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"读取本地数据出现错误！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-swift-基类未登录界面"><a href="#4-swift-基类未登录界面" class="headerlink" title="4.swift-基类未登录界面"></a>4.swift-基类未登录界面</h4><blockquote><p> 抽取基类，控制器作为子类</p></blockquote><ul><li><p>判断登录状态，如果登录就加载子类视图，如果没有登录加载未登录界面</p></li><li><p>设置自定义视图，流出接口方法，进行切换图片和文字</p></li><li><p>首页转盘图片动画</p></li><li><p>登录注册的代理方法</p></li><li><p>app的<strong>appearance</strong> tabbar,navigaitionBar</p></li></ul><blockquote><p> 上代码</p></blockquote><ul><li><p>三目运算符 判断登录状态</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isHadLoggin :<span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> nologvvv : <span class="type">NoLogView</span> = <span class="type">NoLogView</span>.shareNoLogView()</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">    isHadLoggin ?  <span class="keyword">super</span>.loadView(): setNoLogView()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据控制器的不同，设置未登录页界面的图片和文字</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setUpNologViewInfo</span><span class="params">(imageString:String,title:String)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    rotationView.isHidden=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    iconImageView.image=<span class="type">UIImage</span>(named: imageString)</span><br><span class="line"></span><br><span class="line">    messageLable.text=title</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置首页转轮动画</p>  <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func addRotationAnimation()&#123;      </span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> <span class="built_in">animation</span> = CABasicAnimation(keyPath: <span class="string">"transform.rotation.z"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">animation</span>.fromValue = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">animation</span>.toValue = M_PI * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">animation</span>.repeatCount=MAXFLOAT</span><br><span class="line"></span><br><span class="line">    <span class="built_in">animation</span>.isRemovedOnCompletion = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">animation</span>.duration = <span class="number">10</span>   // 结束一次动画的时长</span><br><span class="line"></span><br><span class="line">    rotationView.layer.add(<span class="built_in">animation</span>, forKey: <span class="string">"homeRotation"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置代理 继承 NSObjectProtocol</p></li><li><p>设置代理属性 使用weak 关键字，可选类型</p></li><li><p>使用不用判断代理 直接使用</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span>  <span class="title">NoLogViewDelegate</span> :<span class="title">NSObjectProtocol</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">registButtonWillClick</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">logginButtonWillClick</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> delegate:<span class="type">NoLogViewDelegate</span>?</span><br><span class="line">delegate?.registButtonWillClick()</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-自定义转场动画"><a href="#5-自定义转场动画" class="headerlink" title="5.自定义转场动画"></a>5.自定义转场动画</h4><blockquote><p> 转场动画</p></blockquote><ul><li>需要两个VC，一个VC，弹出另外一个VC</li><li>需要一个Animator 工具类，遵守UIViewControllerTransitioningDelegate 负责处理动画，和告诉谁是处理展现的控制器</li><li>需要一个控制器，继承 UIPresentationController， 是Animator 工具类告诉代理，此控制器处理展现View</li></ul><blockquote><p>上代码</p></blockquote><ul><li>创建 HomePopOverAnimator，  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> homeAnimator : <span class="type">HomePopOverAnimator</span> = <span class="type">HomePopOverAnimator</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeAccoountBook</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> vc =  <span class="type">LeftChoseAccountBookVC</span>()</span><br><span class="line">    vc.modalPresentationStyle = .custom</span><br><span class="line">    vc.transitioningDelegate = homeAnimator</span><br><span class="line">    present(vc, animated: <span class="literal">true</span>, completion:<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>HomePopOverAnimator 处理</p></blockquote><ul><li>HomePopOverAnimator  遵守UIViewControllerTransitioningDelegate 协议，实现协议方法</li><li>在代理中创建负责展现view的HomeUIPresentationVC ，继承自UIPresentationController</li><li><p>HomePopOverAnimator负责处理开始，结束动画，需要遵守UIViewControllerAnimatedTransitioning 协议</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- 自定义转场代理的方法</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HomePopOverAnimator</span> : <span class="title">UIViewControllerTransitioningDelegate</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 告诉代理，谁是处理展示的VC</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">presentationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController?, source:                             UIViewController)</span></span> -&gt; <span class="type">UIPresentationController</span>?&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> homePrentVC = <span class="type">HomeUIPresentationVC</span>(presentedViewController: presented, presenting: presenting)</span><br><span class="line">        <span class="keyword">return</span>  homePrentVC</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉代理，谁处理开始动画</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController, source:                                     UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>?&#123;</span><br><span class="line"></span><br><span class="line">        isPresented = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉代理，谁处理结束动画</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forDismissed dismissed: UIViewController)</span></span> -&gt;<span class="type">UIViewControllerAnimatedTransitioning</span>?&#123;</span><br><span class="line">        isPresented = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UIViewControllerAnimatedTransitioning 代理 弹出和消失动画代理的方法，根据上下文处理动画形式</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- 弹出和消失动画代理的方法</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HomePopOverAnimator</span>:<span class="title">UIViewControllerAnimatedTransitioning</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">TimeInterval</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> isPresented &#123;</span><br><span class="line">            animationForStartAnimation(ransitionContext: transitionContext)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            animationForEndAnimation(ransitionContext: transitionContext)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>私有方法，开始动画，结束动画，transition 动画</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始动画</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">animationForStartAnimation</span><span class="params">(ransitionContext: UIViewControllerContextTransitioning)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取view，将view加到contenterView上，执行动画</span></span><br><span class="line">    <span class="keyword">let</span> containerView = ransitionContext.containerView</span><br><span class="line">    <span class="keyword">let</span> prentedView = ransitionContext.view(forKey: .to)</span><br><span class="line">    containerView.addSubview(prentedView!)</span><br><span class="line">    prentedView?.transform = <span class="type">CGAffineTransform</span>.<span class="keyword">init</span>(translationX: -containerView.bounds.size.width, y: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//        prentedView?.layer.anchorPoint = CGPoint(x: 0.5, y: 0)</span></span><br><span class="line">    <span class="type">UIView</span>.animate(withDuration: transitionDuration(using: ransitionContext), animations: &#123;</span><br><span class="line">        prentedView?.transform = <span class="type">CGAffineTransform</span>.identity</span><br><span class="line">    &#125;) &#123; (<span class="type">Bool</span>) <span class="keyword">in</span></span><br><span class="line">        ransitionContext.completeTransition(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束动画</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span>  <span class="title">animationForEndAnimation</span><span class="params">(ransitionContext: UIViewControllerContextTransitioning)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取view， 执行消失动画</span></span><br><span class="line">    <span class="keyword">let</span> containerView = ransitionContext.containerView</span><br><span class="line">    <span class="keyword">let</span> dismissView  = ransitionContext.view(forKey: .from)</span><br><span class="line">    <span class="type">UIView</span>.animate(withDuration: transitionDuration(using: ransitionContext), animations: &#123;</span><br><span class="line">        dismissView?.transform = <span class="type">CGAffineTransform</span>.<span class="keyword">init</span>(translationX: -containerView.bounds.size.width, y: <span class="number">0</span>)</span><br><span class="line">    &#125;) &#123; (<span class="type">Bool</span>) <span class="keyword">in</span></span><br><span class="line">        dismissView?.removeFromSuperview()</span><br><span class="line">        ransitionContext.completeTransition(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>HomeUIPresentationVC处理</p></blockquote><ul><li>负责显示的View ，左侧抽屉一半view，下面一层蒙版，能响应点击消失</li><li><p>设置需要展现视图的大小，设置遮盖为button，响应点击事件</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒加载控件</span></span><br><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> coverBGView :<span class="type">UIButton</span> = <span class="type">UIButton</span>()</span><br><span class="line"><span class="comment">// 重写layoutsubviews 设置弹出视图的大小</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.containerViewWillLayoutSubviews()</span><br><span class="line">    presentedView?.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">UIScreen</span>.main.bounds.size.width*<span class="number">0.6</span>, height:                <span class="type">UIScreen</span>.main.bounds.size.height)</span><br><span class="line">    setCoverbgViews()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置遮罩 frame和 响应方法</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">extension</span> <span class="title">HomeUIPresentationVC</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">setCoverbgViews</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 设置大小，插入到contenderView的最底层</span></span><br><span class="line">            coverBGView.titleLabel?.text=<span class="string">""</span></span><br><span class="line">            coverBGView.frame  = containerView!.bounds</span><br><span class="line">            coverBGView.backgroundColor = <span class="type">UIColor</span>.<span class="keyword">init</span>(white: <span class="number">0.8</span>, alpha: <span class="number">0.2</span>)</span><br><span class="line">            coverBGView.addTarget(<span class="keyword">self</span>, action: #selector(tapCoverBgView), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">            containerView?.insertSubview(coverBGView, at: <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">extension</span> <span class="title">HomeUIPresentationVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">tapCoverBgView</span><span class="params">(tap:UITapGestureRecognizer)</span></span>&#123;</span><br><span class="line">            presentedViewController.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line">#### <span class="number">6</span>.<span class="keyword">extension</span> 使用类扩展增加方法</span><br><span class="line"></span><br><span class="line">- swift 中<span class="class"><span class="keyword">extension</span> 相当于<span class="title">OC</span>中的<span class="title">category</span> 作为类的扩展</span></span><br><span class="line"><span class="class">- 单独创建文件做类的扩展</span></span><br><span class="line"><span class="class">- 在<span class="title">vc</span> 中使用<span class="title">extension</span> 作为 <span class="title">vc</span> 的方法分类 苹果推荐 代理等方法写在<span class="title">extension</span>里。</span></span><br><span class="line"><span class="class">- 上代码 <span class="title">command</span> + <span class="title">N</span> 创建<span class="title">Swift</span> 文件，名字为<span class="title">UIBarBarItem</span>+<span class="title">category</span></span></span><br><span class="line"><span class="class">- 为 <span class="title">UIBarButtonItem</span> 增加一个类方法， 创建<span class="title">item</span> 的<span class="title">titleLable</span></span></span><br></pre></td></tr></table></figure><p> extension UIBarButtonItem {<br> class func titleLableWithText(title:String)-&gt;UILabel{</p><pre><code>    let lable = UILabel()    lable.clipsToBounds = true    lable.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width*0.5, height: 30)    lable.font = UIFont.systemFont(ofSize: 16)    lable.textColor = UIColor.init(red: 51, green: 51, blue: 51, alpha: 1)    lable.text = title    return lable}</code></pre><p> }</p> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">7.</span>创建二维码</span><br><span class="line">- <span class="number">1.</span>创建滤镜</span><br><span class="line">- <span class="number">2.</span>还原滤镜设置</span><br><span class="line">- <span class="number">3.</span>设置数据存入数据</span><br><span class="line">- <span class="number">4.</span>取出图片</span><br><span class="line">- <span class="number">5.</span>增加中间的头像</span><br><span class="line">- <span class="number">6.</span>设置高清图像</span><br><span class="line"></span><br><span class="line">&gt; 上代码 如下</span><br><span class="line">  </span><br><span class="line">  - <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span> 步骤</span><br></pre></td></tr></table></figure><p> //1.创建滤镜<br> let filer = CIFilter.init(name: “CIQRCodeGenerator”)</p><p> // 2.还原滤镜的设置<br> filer?.setDefaults()</p><p> // 3.设置数据<br> filer?.setValue(astring.data(using: .utf8), forKey: “inputMessage”)</p><p> // 4.从滤镜中取出图片 CIImage<br> let fileCiImage = filer?.outputImage</p> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>增加中间的头像 UIGraphicsBegin</span><br></pre></td></tr></table></figure><p> // 开启图像上下文<br> UIGraphicsBeginImageContext(bgImage.size)</p><p> // 绘制背景大小<br> bgImage.drawInRect(CGRect(origin: CGPointZero, size: bgImage.size))</p><p> // 绘制头像<br> let width:CGFloat = 50<br> let height:CGFloat = width<br> let x = (bgImage.size.width - width) <em> 0.5<br> let y = (bgImage.size.height - height) </em> 0.5<br> iconImage.drawInRect(CGRect(x: x, y: y, width: width, height: height))</p><p> // 取出绘制好的图像<br> let newImage = UIGraphicsGetImageFromCurrentImageContext()</p><p> // 关闭上下文<br> UIGraphicsEndImageContext()</p><p> // 返回头像<br> return newImage</p> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>绘制高清图像</span><br></pre></td></tr></table></figure><p> /*<em><br> 根据CIImage生成指定大小的高清UIImage<br> :param: image 指定CIImage<br> :param: size    指定大小<br> :returns: 生成好的图片 </em>/<br> private func createNonInterpolatedUIImageFormCIImage(image: CIImage, size: CGFloat) -&gt; UIImage {</p><pre><code>let extent: CGRect = CGRectIntegral(image.extent)let scale: CGFloat = min(size/CGRectGetWidth(extent), size/CGRectGetHeight(extent))// 1.创建bitmap;let width = CGRectGetWidth(extent) * scalelet height = CGRectGetHeight(extent) * scalelet cs: CGColorSpaceRef = CGColorSpaceCreateDeviceGray()!let bitmapRef = CGBitmapContextCreate(nil, Int(width), Int(height), 8, 0, cs, 0)!        let context = CIContext(options: nil)let bitmapImage: CGImageRef = context.createCGImage(image, fromRect: extent)CGContextSetInterpolationQuality(bitmapRef,  CGInterpolationQuality.None)CGContextScaleCTM(bitmapRef, scale, scale);CGContextDrawImage(bitmapRef, extent, bitmapImage);// 2.保存bitmap到图片let scaledImage: CGImageRef = CGBitmapContextCreateImage(bitmapRef)! return UIImage(CGImage: scaledImage)</code></pre><p> }<br> <code>`</code></p></li></ul><h4 id="8-扫描二维码"><a href="#8-扫描二维码" class="headerlink" title="8.扫描二维码"></a>8.扫描二维码</h4><ul><li>懒加载会话，输入，输出</li><li>判断会话能不能添加输入输出 ，</li><li>会话添加输入输出</li><li>设置输出数据类型</li><li>设置输出对象代理</li><li>开始扫描</li><li>添加预览图层</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift高级运算符-读书笔记</title>
      <link href="/2016/09/20/2016b/swift%E9%AB%98%E7%BA%A7%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2016/09/20/2016b/swift%E9%AB%98%E7%BA%A7%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-高级运算符"><a href="#1-高级运算符" class="headerlink" title="1.高级运算符"></a>1.高级运算符</h3><ul><li>位运算符，移位运算符 ，溢出加法运算符，</li></ul><h3 id="2-位运算法"><a href="#2-位运算法" class="headerlink" title="2.位运算法"></a>2.位运算法</h3><ul><li><p>按位 <code>取反</code> 运算符 <code>～</code> </p></li><li><p>按位 <code>与</code> 运算符 <code>&amp;</code></p></li><li><p>按位 <code>或</code> 运算符 <code>|</code></p></li><li><p>按位 <code>异或</code> 运算符 <code>^</code></p></li><li><p>按位 <code>左移</code>，<code>右移</code> 运算符 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> </p></li><li><p>取反 ～0b00001111 = 0b11110000</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符1.png" width="400"></li><li><p>与 0b11111100 &amp; 0b00111111 = 00111100</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符2.png" width="400"></li><li><p>或 0b10110010 | 0b01011110 = 11111110</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符3.png" width="400"></li><li><p>异或  0b00010100 ^ 0b00000101 =  00010001</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符4.png" width="400"></li></ul><ul><li><p>无符号左移右移   逻辑移位</p><ul><li><p>无符号整数的移位运算 对无符号整数进行移位的规则如下：</p></li><li><p>已经存在的位按指定的位数进行左移和右移</p></li><li><p>任何因移动而超出整型存储范围的位都会被丢弃 </p></li><li><p>用 0 来填充移位后产生的空白位 </p><img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符5.png" width="400"></li></ul></li><li><p>颜色值16进制CC6699  转为10进制RGB（204，102，153）</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符6.png" width="400"></li></ul><ul><li><p>有符号的按位左移右移运算  算术移位</p><ul><li>符号为0为正，1为负</li><li><p>它存储的值的绝对值等于 2 的 n 次方减去它的实际值（也就是数值位表示的值），这里的 n 为数值位的比特位数。一个 8 比特位的数有 7 个比特位是数值位，所以是 2 的 7 次方，即 128</p><img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符7.png" width="400"></li><li><p>对有符号整数的右移有一个额外的规则</p></li><li>当对整数进行按位右移运算时，遵循与无符号整数相同的规则，但是对于移位产生的空白位使用符号位进行填充，而不是用 0</li></ul></li></ul><h3 id="3-溢出运算符"><a href="#3-溢出运算符" class="headerlink" title="3.溢出运算符"></a>3.溢出运算符</h3><ul><li>溢出加法（<code>&amp;+</code>）溢出减法（<code>&amp;-</code>），溢出乘法（<code>&amp;*</code>）</li><li><p>UInt8.max &amp;+ 1  = 0</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符8.png" width="400"></li><li><p>UInt8.min &amp;- 1 = 255</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符9.png" width="400"></li><li><p>在对有符号整型数值进行溢出加法或溢出减法运算时，符号位也需要参与计算</p></li><li><p>Int8.min &amp;- 1 = 127（-128 - 1 = 127）</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符10.png" width="400"></li><li><p>对于无符号与有符号整型数值来说，当出现上溢时，它们会从数值所能容纳的最大数变成最小的数。同样地，当发生下溢时，它们会从所能容纳的最小数变成最大的数。</p></li></ul><h3 id="4-运算符函数"><a href="#4-运算符函数" class="headerlink" title="4.运算符函数"></a>4.运算符函数</h3><ul><li><p>类和结构体可以为现有的运算符实现自定义的实现，成为运算符重载</p></li><li><p>双目中缀运算符的自定义实现  对加号的重载</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符11.png" width="400"></li><li><p>前缀和后缀运算符（-A）取反</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符12.png" width="400"></li><li><p>复合运算符 （+= ）</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符13.png" width="400"></li><li><p>等价运算符  （== ，!=）</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符14.png" width="400"></li></ul><h3 id="5-自定义运算符，自定义优先级"><a href="#5-自定义运算符，自定义优先级" class="headerlink" title="5.自定义运算符，自定义优先级"></a>5.自定义运算符，自定义优先级</h3><ul><li>“新的运算符要使用 <code>operator</code> 关键字在全局作用域内进行定义，同时还要指定 <code>prefix</code>、<code>infix</code>或者 <code>postfix</code> 修饰符：</li><li><p>+++ 实现，自增的正值</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符15.png" width="400"></li><li><p>优先级</p>  <img src="/2016/09/20/2016b/swift高级运算符/swift高级运算符16.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swift语法-读书笔记</title>
      <link href="/2016/09/20/2016b/swift%E8%AF%AD%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/09/20/2016b/swift%E8%AF%AD%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-字符串语法"><a href="#1-字符串语法" class="headerlink" title="1.字符串语法"></a>1.字符串语法</h3><ul><li><p>字符串的转移</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法1.png" width="400"></li><li><p>类型转换运算符</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法2.png" width="400"></li></ul><ul><li><p>字面量表达式</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法3.png" width="400"></li></ul><h3 id="2-语句"><a href="#2-语句" class="headerlink" title="2.语句"></a>2.语句</h3><ul><li><p>guard</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法4.png" width="400"></li><li><p>defer 语句</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法5.png" width="400"></li><li><p><code>#if endif</code></p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法6.png" width="400"></li></ul><ul><li><p>下标声明</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法7.png" width="400"></li><li><p>运算符声明</p><ul><li><p>infix operator</p><img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法8.png" width="400"></li></ul></li><li><p>优先级声明</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法9.png" width="400"></li><li><p>声明修饰符</p>  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法10.png" width="400">  <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法11.png" width="400"></li></ul><h3 id="3-特性"><a href="#3-特性" class="headerlink" title="3.特性"></a>3.特性</h3><ul><li>available iOS，iOSApplicationExtension   —- @available(iOS 10.0, macOS 10.12, *) </li><li>unavailable 在指定的平台上无效的</li><li>introduced =  版本号</li><li>deprecated =  版本号</li><li>obsoleted = 版本号</li><li>renamed  = 新名字</li><li>discardableResult  抑制编译器中 函数或方法的返回值被调而没有使用其结果的警告 </li><li>GKInspectable 暴露一个自定义GameplayKit组件属性给SpriteKit编辑器UI</li><li>objc </li><li>NSApplicationMain</li><li>NSCopying</li><li>NSManaged </li><li>testable</li><li>UIApplicationMain</li><li>autoclosure </li><li>escaping</li><li>convention</li></ul><h3 id="4-权限"><a href="#4-权限" class="headerlink" title="4.权限"></a>4.权限</h3><ul><li>下面的代码表示把变量UUID的赋值权限设为private，对整个app可读，但值只能在本文件里写入 <img src="/2016/09/20/2016b/swift语法-读书笔记/swift语法12.png" width="400"></li></ul><h3 id="5-值类型和引用类型"><a href="#5-值类型和引用类型" class="headerlink" title="5.值类型和引用类型"></a>5.值类型和引用类型</h3><ul><li>值类型：枚举，结构体，元组</li><li>引用类型：类</li><li>值类型复制，是全部复制；引用类型复制是指针复制，其实是同一个数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>笔记网站</title>
      <link href="/2016/09/06/2016b/%E7%AC%94%E8%AE%B0%E7%BD%91%E7%AB%99/"/>
      <url>/2016/09/06/2016b/%E7%AC%94%E8%AE%B0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="技术路线："><a href="#技术路线：" class="headerlink" title="技术路线："></a>技术路线：</h3><ul><li><a href="http://bbs.itheima.com/forum-589-1.html" target="_blank" rel="noopener">Java学习路线图 </a></li><li><a href="http://bbs.itheima.com/forum-581-1.html" target="_blank" rel="noopener">人工智能+Python学习路线图</a></li><li><a href="http://bbs.itheima.com/forum-586-1.html" target="_blank" rel="noopener">前端与移动开发学习路线图</a></li><li><a href="http://bbs.itheima.com/forum-585-1.html" target="_blank" rel="noopener">H5+全栈工程师学习路线图</a></li><li><a href="http://bbs.itheima.com/forum-601-1.html" target="_blank" rel="noopener">产品经理学习路线图</a></li><li><a href="http://bbs.itheima.com/forum-603-1.html" target="_blank" rel="noopener">云计算大数据学习路线图</a><h3 id="1-IT社区"><a href="#1-IT社区" class="headerlink" title="1.IT社区:"></a>1.IT社区:</h3></li><li>推荐<ul><li><a href="http://www.cnblogs.com/" target="_blank" rel="noopener">http://www.cnblogs.com/</a> </li><li><a href="http://www.csdn.net/" target="_blank" rel="noopener">http://www.csdn.net/</a> </li><li><a href="http://www.51cto.com/" target="_blank" rel="noopener">http://www.51cto.com/</a> </li><li><a href="http://www.cocoachina.com/" target="_blank" rel="noopener">http://www.cocoachina.com/</a>   </li><li><a href="http://www.techcn.com.cn/" target="_blank" rel="noopener">http://www.techcn.com.cn/</a> </li><li><a href="http://mobilehub.io/" target="_blank" rel="noopener">http://mobilehub.io/</a>  </li></ul></li></ul><h3 id="2-iOS-学习网站"><a href="#2-iOS-学习网站" class="headerlink" title="2.iOS 学习网站:"></a>2.iOS 学习网站:</h3><ul><li><p>iOS 学习网站</p><ul><li><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a>  </li><li><a href="http://objccn.io/" target="_blank" rel="noopener">http://objccn.io/</a>     </li><li><a href="http://github.ibireme.com/github/list/ios/" target="_blank" rel="noopener">http://github.ibireme.com/github/list/ios/</a>   github上ios第三方库集合 可以多看看</li><li><a href="https://github.com/chasseurmic/TWRProgressView" target="_blank" rel="noopener">https://github.com/chasseurmic/TWRProgressView</a></li></ul></li><li><p>Swift学习</p><ul><li><a href="https://github.com/CocoaChina-editors/Welcome-to-Swift" target="_blank" rel="noopener">https://github.com/CocoaChina-editors/Welcome-to-Swift</a>  </li><li><a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="noopener">https://github.com/numbbbbb/the-swift-programming-language-in-chinese</a>  </li><li><a href="http://www.infoq.com/cn" target="_blank" rel="noopener">http://www.infoq.com/cn</a>    软件开发领域:此网站里面有很多文章都是翻译国外的    里面有一些架构设计的文章很不错</li><li><a href="http://www.cnblogs.com/wendingding/" target="_blank" rel="noopener">http://www.cnblogs.com/wendingding/</a>  传智学员记录了学习ios</li></ul></li><li><p>安全:</p><ul><li><a href="http://blog.csdn.net/yiyaaixuexi" target="_blank" rel="noopener">http://blog.csdn.net/yiyaaixuexi</a>   好像是一位妹子好牛逼 </li><li><a href="http://nianxi.net/" target="_blank" rel="noopener">http://nianxi.net/</a>    她的新博客不过现在内容比较少</li><li><a href="http://bbs.pediy.com/" target="_blank" rel="noopener">http://bbs.pediy.com/</a>  开雪学院 国内重量级</li></ul></li><li><p>数据结构与算法</p><ul><li><a href="http://blog.csdn.net/v_july_v" target="_blank" rel="noopener">http://blog.csdn.net/v_july_v</a>  </li><li><a href="http://blog.csdn.net/itcastcpp?viewmode=contents" target="_blank" rel="noopener">http://blog.csdn.net/itcastcpp?viewmode=contents</a>     C++学院院长 尹成 </li></ul></li><li><p>blog:</p><ul><li><a href="http://blog.devtang.com/" target="_blank" rel="noopener">http://blog.devtang.com/</a>   唐巧  曾开发网易微博后台\ iOS:曾开发过 有道云笔记\粉笔网\猿题库</li><li><a href="http://onevcat.com/" target="_blank" rel="noopener">http://onevcat.com/</a>     王巍    就职Line  技术领域: ios+Unity3d</li><li><a href="http://beyondvincent.com/blog/archives/" target="_blank" rel="noopener">http://beyondvincent.com/blog/archives/</a>   </li><li><a href="http://esoftmobile.com/" target="_blank" rel="noopener">http://esoftmobile.com/</a>   </li><li><a href="http://blog.csdn.net/tonny_guan?viewmode=contents" target="_blank" rel="noopener">http://blog.csdn.net/tonny_guan?viewmode=contents</a> </li><li><a href="http://blog.csdn.net/opengl_es" target="_blank" rel="noopener">http://blog.csdn.net/opengl_es</a> </li></ul></li><li><p>游戏开发:</p><ul><li><a href="http://blog.codingnow.com/" target="_blank" rel="noopener">http://blog.codingnow.com/</a>   吴云洋( 云风)  很牛逼  网易研究中心总监  </li><li><a href="http://www.gameres.com/" target="_blank" rel="noopener">http://www.gameres.com/</a>   非常不错的一个 游戏资讯门户  </li><li><a href="http://game.ceeger.com/forum/" target="_blank" rel="noopener">http://game.ceeger.com/forum/</a>   Unity3D 学习论坛</li></ul></li><li><p>开源网站:</p><ul><li><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>  </li><li><a href="http://code4app.com/" target="_blank" rel="noopener">http://code4app.com/</a>  </li><li><a href="http://code.cocoachina.com/" target="_blank" rel="noopener">http://code.cocoachina.com/</a> </li></ul></li><li><p>推荐书籍:</p><ul><li>现代操作系统</li><li>iOS与OS X多线程和内存管理 </li><li>Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法 </li><li>Objective-C编程之道：iOS设计模式解析</li><li>iOS应用逆向工程：分析与实战 </li><li>重构：改善既有代码的设计</li><li>鸟哥的Linux私房菜</li></ul></li></ul><h4 id="3-学习资源"><a href="#3-学习资源" class="headerlink" title="3.学习资源"></a>3.学习资源</h4><ul><li>一个非常强大的mac retina高清壁纸网站  <a href="http://wallpaperswide.com" target="_blank" rel="noopener">http://wallpaperswide.com</a> </li><li><p>Quartz2D使用     <a href="http://www.cnblogs.com/wendingding/p/3778940.html" target="_blank" rel="noopener">http://www.cnblogs.com/wendingding/p/3778940.html</a></p><ul><li>Quartz2D简单介绍 </li><li>Quartz2D简单使用（一）</li><li>Quartz2D简单使用(二)</li><li>Quartz2D简单使用（三）</li><li>iOS开发UI篇—Quartz2D使用（绘制基本图形）</li><li>Quartz2D(自定义UIImageView控件)</li><li>Quartz2D使用（截屏）</li><li>Quartz2D使用(信纸条纹)</li><li>Quartz2D使用（绘图路径）</li><li>Quartz2D使用（图片剪切）</li><li>Quartz2D使用（矩阵操作）</li><li>Quartz2D使用（图形上下文栈）</li></ul></li><li><p>李明杰浅谈逆向  <a href="https://pan.baidu.com/s/1kVn1Nc7#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1kVn1Nc7#list/path=%2F</a> 密码: hq19 </p></li><li>自动化测试视频讲解  <a href="https://pan.baidu.com/s/1boQb6cZ#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1boQb6cZ#list/path=%2F</a></li><li>揭秘微博、微信刷fen平台内幕与实战吸粉 <a href="https://pan.baidu.com/s/1i5PzDpb#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1i5PzDpb#list/path=%2F</a>  密码: cgj6 </li><li>求职心态篇  <a href="https://pan.baidu.com/s/1nvC02ZB#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1nvC02ZB#list/path=%2F</a> 密码: wz8a </li><li>vue.js腾讯课堂百度云链接： <a href="https://pan.baidu.com/s/1nvPXGpj#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1nvPXGpj#list/path=%2F</a>   密码: v2vw</li><li>带你玩转github <a href="https://pan.baidu.com/s/1mi4uMhU#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1mi4uMhU#list/path=%2F</a>  密码: yg1t </li><li>微信朋友圈开发视频：（转给你需要的朋友） <a href="https://pan.baidu.com/s/1cKUb9c#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1cKUb9c#list/path=%2F</a></li><li>即时通常融云讲解视频： <a href="https://pan.baidu.com/s/1eRDehUi#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1eRDehUi#list/path=%2F</a></li><li>swiift项目实战视频： <a href="https://pan.baidu.com/s/1c1YgVoG#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1c1YgVoG#list/path=%2F</a></li><li>iOS面试官面试上百个iOS感受以及面试技巧 <a href="https://pan.baidu.com/s/1eSqtFlo#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1eSqtFlo#list/path=%2F</a><br>-1000套求职简历模板： <a href="https://pan.baidu.com/s/1jIHVLK6#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1jIHVLK6#list/path=%2F</a></li><li>lldb调试bug高级用法  <a href="https://pan.baidu.com/s/1o89Gb82#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1o89Gb82#list/path=%2F</a></li><li>支付宝生活圈开发视频：（仅限学习使用） <a href="https://pan.baidu.com/s/1nuZPSiH#list/path=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/1nuZPSiH#list/path=%2F</a></li></ul><h4 id="4-GitHub网址"><a href="#4-GitHub网址" class="headerlink" title="4.GitHub网址"></a>4.GitHub网址</h4><ul><li><a href="https://github.com/lihongli528628/HLBookReader" target="_blank" rel="noopener">https://github.com/lihongli528628/HLBookReader</a>   电子书+语音阅读</li><li><a href="https://github.com/GGGHub/Reader" target="_blank" rel="noopener">https://github.com/GGGHub/Reader</a> 电子书源码</li><li><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="noopener">https://github.com/Aufree/trip-to-iOS</a>   iOS学习资料列表，开源框架前100，</li><li><a href="https://github.com/nicklockwood/iCarousel" target="_blank" rel="noopener">https://github.com/nicklockwood/iCarousel</a>   动画 轮播动画，反转的类似</li><li><a href="https://github.com/zwaldowski/BlocksKit" target="_blank" rel="noopener">https://github.com/zwaldowski/BlocksKit</a>     改变系统的target+selector模式为 block模式。 带来紧凑的代码风格，高效率的回调执行  </li><li>objc.io</li><li>Swift Apprentice</li><li>objectManager</li></ul><h4 id="5-博客"><a href="#5-博客" class="headerlink" title="5.博客"></a>5.博客</h4><ul><li>iOS Provisioning Profile(Certificate)与Code Signing详解</li><li>基于 CoreText 的排版引擎：基础</li><li>iOS开发之网络编程篇六：AFNetworking3.0使用简介</li><li>RTImageAssets：自动生成全尺寸icon以及2x/3x图片</li><li>网易滚动导航栏——（第三方框架实现） HACursor</li><li>AMScrollingNavbar框架(自动隐藏导航栏)使用简介</li><li>3D Touch 使用：Quick Action（Short Cut）</li><li>3D Touch 使用：Peek 和 Pop</li><li>系统自带的iOS扫描二维码 AVMetadataObjec</li><li>友盟消息推送SDK集成</li><li>NSScanner类的基本用法</li></ul><h4 id="6-技巧网址"><a href="#6-技巧网址" class="headerlink" title="6.技巧网址"></a>6.技巧网址</h4><ul><li>iOS/mac开发的一些知名个人博客  <a href="http://www.cocoachina.com/bbs/read.php?tid=299721" target="_blank" rel="noopener">http://www.cocoachina.com/bbs/read.php?tid=299721</a></li><li>Windows 8.1正式版官方专业版原版iso镜像系统下载  <a href="http://www.wingod8.com/a/yuanbanxitong/win8/466.html" target="_blank" rel="noopener">http://www.wingod8.com/a/yuanbanxitong/win8/466.html</a></li><li>程序员如何优雅地使用 Mac？ <a href="http://www.zhihu.com/question/20873070" target="_blank" rel="noopener">http://www.zhihu.com/question/20873070</a></li><li>ios开发学习笔记 <a href="http://blog.csdn.net/mad1989/article/details/7972612" target="_blank" rel="noopener">http://blog.csdn.net/mad1989/article/details/7972612</a></li><li>苹果6Mac软件下载网址   <a href="http://www.pc6.com/mac/" target="_blank" rel="noopener">http://www.pc6.com/mac/</a></li><li>少数派 <a href="https://sspai.com/post/33493" target="_blank" rel="noopener">https://sspai.com/post/33493</a></li><li>Xcode插件优缺点对比（推荐20款插件） <a href="http://www.cnblogs.com/dsxniubility/p/5099191.html" target="_blank" rel="noopener">http://www.cnblogs.com/dsxniubility/p/5099191.html</a></li><li>CocoaChina 代码分类  ://code.cocoachina.com/</li><li>code4App</li></ul><h4 id="7-分享网址"><a href="#7-分享网址" class="headerlink" title="7.分享网址"></a>7.分享网址</h4><ul><li>仿新浪微博表情键盘  HMEmoticon <a href="https://github.com/itheima-developer/HMEmoticon" target="_blank" rel="noopener">https://github.com/itheima-developer/HMEmoticon</a></li><li>轻量级的上拉／下拉刷新控件 <a href="https://github.com/itheima-developer/HMRefresh" target="_blank" rel="noopener">https://github.com/itheima-developer/HMRefresh</a></li><li>轻量级图像选择框架 <a href="https://github.com/itheima-developer/HMImagePicker" target="_blank" rel="noopener">https://github.com/itheima-developer/HMImagePicker</a></li><li>Objective-C 语法糖 <a href="https://github.com/itheima-developer/HMObjcSugar" target="_blank" rel="noopener">https://github.com/itheima-developer/HMObjcSugar</a></li><li>轻量级图片浏览器  <a href="https://github.com/itheima-developer/HMPhotoBrowser" target="_blank" rel="noopener">https://github.com/itheima-developer/HMPhotoBrowser</a></li><li>swift二维码 <a href="https://github.com/liufan321/SwiftQRCode" target="_blank" rel="noopener">https://github.com/liufan321/SwiftQRCode</a></li><li>FFlable <a href="https://github.com/liufan321/FFLabel" target="_blank" rel="noopener">https://github.com/liufan321/FFLabel</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NSPropertyListSerialization 持久化字典与数组</title>
      <link href="/2016/06/19/2016b/NSPropertyListSerialization%20%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%97%E5%85%B8%E4%B8%8E%E6%95%B0%E7%BB%84/"/>
      <url>/2016/06/19/2016b/NSPropertyListSerialization%20%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%97%E5%85%B8%E4%B8%8E%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<ul><li><p><code>NSPropertyListSerialization</code> 持久化字典与数组</p></li><li><p>使用</p>  <img src="/2016/06/19/2016b/NSPropertyListSerialization%20持久化字典与数组/NSPropertyListSerialization1.png" width="300"></li><li><p>封装细节</p><ul><li>设置存储路径，方法1：根据字典路径存储  方法2： 根据路径返回字典，修改后存储<img src="/2016/06/19/2016b/NSPropertyListSerialization%20持久化字典与数组/NSPropertyListSerialization2.png"></li></ul></li><li><p><code>.m文件实现</code></p>  <img src="/2016/06/19/2016b/NSPropertyListSerialization%20持久化字典与数组/NSPropertyListSerialization3.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新浪微博分享不跳转</title>
      <link href="/2016/06/18/2016b/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%88%86%E4%BA%AB%E4%B8%8D%E8%B7%B3%E8%BD%AC/"/>
      <url>/2016/06/18/2016b/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%88%86%E4%BA%AB%E4%B8%8D%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="实际开发中遇到第三方分享分享微博不能跳转"><a href="#实际开发中遇到第三方分享分享微博不能跳转" class="headerlink" title="实际开发中遇到第三方分享分享微博不能跳转"></a>实际开发中遇到第三方分享分享微博不能跳转</h3><ul><li><p>1.在info.plist 中，设置白名单，少设置了后面2个，加上之后正常跳转</p>  <img src="/2016/06/18/2016b/新浪微博分享不跳转/新浪微博分享不跳转1.png" width="400">  <img src="/2016/06/18/2016b/新浪微博分享不跳转/新浪微博分享不跳转2.png" width="400"></li><li><p>2.新浪微博和其他分享不一样，只能分享图片和文字， </p></li><li>3.将网址和文字拼接在一块，在微信上显示网址，在微博上只显示链接，  <img src="/2016/06/18/2016b/新浪微博分享不跳转/新浪微博分享不跳转3.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 开发问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后台上传300张图片</title>
      <link href="/2016/06/18/2016b/%E5%90%8E%E5%8F%B0%E4%B8%8A%E4%BC%A0300%E5%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2016/06/18/2016b/%E5%90%8E%E5%8F%B0%E4%B8%8A%E4%BC%A0300%E5%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h3 id="后台上传300张图片"><a href="#后台上传300张图片" class="headerlink" title="后台上传300张图片"></a>后台上传300张图片</h3><ul><li><p>监听进入后台通知，执行后台方法。结束任务时结束后台任务task </p></li><li><p>参考简书： <a href="http://www.jianshu.com/p/9bf161a14725" target="_blank" rel="noopener">http://www.jianshu.com/p/9bf161a14725</a>   、</p></li><li><p>锁屏 或者进入后台能继续上传</p><ul><li><p>监听通知：</p> <img src="/2016/06/18/2016b/后台上传300张图片/后台上传300张图片1.png"></li><li><p>设置后台任务，设置自己的任务，完成时结束任务写在block里面</p> <img src="/2016/06/18/2016b/后台上传300张图片/后台上传300张图片2.png"></li></ul></li><li><p>执行耗时操作，如果所有的都上传完，就执行completionBlock(); 执行上面的代码，结束任务</p>   <img src="/2016/06/18/2016b/后台上传300张图片/后台上传300张图片3.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 开发问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS关于启动页自定义特殊处理 启动广告</title>
      <link href="/2016/06/17/2016b/iOS%E5%85%B3%E4%BA%8E%E5%90%AF%E5%8A%A8%E9%A1%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86%20%E5%90%AF%E5%8A%A8%E5%B9%BF%E5%91%8A/"/>
      <url>/2016/06/17/2016b/iOS%E5%85%B3%E4%BA%8E%E5%90%AF%E5%8A%A8%E9%A1%B5%E8%87%AA%E5%AE%9A%E4%B9%89%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86%20%E5%90%AF%E5%8A%A8%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实原理也是很简单，启动页还是运用Launch Images Source的内容，然后在做一个视图在最上层，视图的背景用启动项的那张图，让人误以为还在启动中，启动页加载完成后，就显示这层视图，在2秒后再把这层视图删除，产生一个过度的假启动页效果；而我们自定义的动作就可以在这层视图上进行；下面将通过Coding.net的APP讲解这个功能</p></blockquote><h4 id="一：创建一个视图EaseStartView"><a href="#一：创建一个视图EaseStartView" class="headerlink" title="一：创建一个视图EaseStartView"></a>一：创建一个视图EaseStartView</h4><ul><li><p>EaseStartView.h文件内容：</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EaseStartView</span> : <span class="title">UIView</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)startView;</span><br><span class="line">- (<span class="keyword">void</span>)startAnimationWithCompletionBlock:(<span class="keyword">void</span>(^)(EaseStartView *easeStartView))completionHandler;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>EaseStartView.m文件内容：</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"EaseStartView.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;NYXImagesKit/NYXImagesKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"StartImagesManager.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EaseStartView</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIImageView</span> *bgImageView, *logoIconView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UILabel</span> *descriptionStrLabel;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EaseStartView</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)startView&#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *logoIcon = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"logo_coding_top"</span>];</span><br><span class="line">    StartImage *st = [[StartImagesManager shareManager] randomImage];</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithBgImage:st.image logoIcon:logoIcon descriptionStr:st.descriptionStr];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithBgImage:(<span class="built_in">UIImage</span> *)bgImage logoIcon:(<span class="built_in">UIImage</span> *)logoIcon descriptionStr:(<span class="built_in">NSString</span> *)descriptionStr&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:kScreen_Bounds];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">//add custom code</span></span><br><span class="line">        <span class="built_in">UIColor</span> *blackColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">        <span class="keyword">self</span>.backgroundColor = blackColor;</span><br><span class="line">        </span><br><span class="line">        _bgImageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:kScreen_Bounds];</span><br><span class="line">        _bgImageView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</span><br><span class="line">        _bgImageView.alpha = <span class="number">0.0</span>;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_bgImageView];</span><br><span class="line">        [<span class="keyword">self</span> addGradientLayerWithColors:@[(<span class="keyword">id</span>)[blackColor colorWithAlphaComponent:<span class="number">0.4</span>].CGColor, (<span class="keyword">id</span>)[blackColor colorWithAlphaComponent:<span class="number">0.0</span>].CGColor] locations:<span class="literal">nil</span> startPoint:<span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.0</span>) endPoint:<span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.4</span>)];</span><br><span class="line">        _logoIconView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">        _logoIconView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFit</span>;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_logoIconView];</span><br><span class="line">        _descriptionStrLabel = [[<span class="built_in">UILabel</span> alloc] init];</span><br><span class="line">        _descriptionStrLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">10</span>];</span><br><span class="line">        _descriptionStrLabel.textColor = [<span class="built_in">UIColor</span> colorWithWhite:<span class="number">1.0</span> alpha:<span class="number">0.5</span>];</span><br><span class="line">        _descriptionStrLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">        _descriptionStrLabel.alpha = <span class="number">0.0</span>;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_descriptionStrLabel];</span><br><span class="line">        </span><br><span class="line">        [_descriptionStrLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make.centerX.equalTo(@[<span class="keyword">self</span>, _logoIconView]);</span><br><span class="line">            make.height.mas_equalTo(<span class="number">10</span>);</span><br><span class="line">            make.bottom.equalTo(<span class="keyword">self</span>.mas_bottom).offset(<span class="number">-15</span>);</span><br><span class="line">            make.left.equalTo(<span class="keyword">self</span>.mas_left).offset(<span class="number">20</span>);</span><br><span class="line">            make.right.equalTo(<span class="keyword">self</span>.mas_right).offset(<span class="number">-20</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        [_logoIconView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make.centerX.equalTo(<span class="keyword">self</span>);</span><br><span class="line">            make.top.mas_equalTo(kScreen_Height/<span class="number">7</span>);</span><br><span class="line">            make.width.mas_equalTo(kScreen_Width *<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line">            make.height.mas_equalTo(kScreen_Width/<span class="number">4</span> *<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span> configWithBgImage:bgImage logoIcon:logoIcon descriptionStr:descriptionStr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)configWithBgImage:(UIImage *)<span class="keyword">bgImage </span>logoIcon:(UIImage *)logoIcon descriptionStr:(NSString *)descriptionStr&#123;</span><br><span class="line"><span class="keyword">bgImage </span>= [<span class="keyword">bgImage </span><span class="keyword">scaleToSize:[_bgImageView </span>doubleSizeOfFrame] usingMode:NYXResizeModeAspectFill]<span class="comment">;</span></span><br><span class="line">self.<span class="keyword">bgImageView.image </span>= <span class="keyword">bgImage;</span></span><br><span class="line"><span class="keyword">self.logoIconView.image </span>= logoIcon<span class="comment">;</span></span><br><span class="line">self.descriptionStrLabel<span class="meta">.text</span> = descriptionStr<span class="comment">;</span></span><br><span class="line">[self updateConstraintsIfNeeded]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)startAnimationWithCompletionBlock:(<span class="keyword">void</span>(^)(EaseStartView *easeStartView))completionHandler&#123;</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication].keyWindow</span><br><span class="line">addSubview:<span class="keyword">self</span>];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication].keyWindow</span><br><span class="line">bringSubviewToFront:<span class="keyword">self</span>];</span><br><span class="line">    _bgImageView.alpha = <span class="number">0.0</span>;</span><br><span class="line">    _descriptionStrLabel.alpha = <span class="number">0.0</span>;</span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.0</span> animations:^&#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">self</span>.bgImageView.alpha = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">self</span>.descriptionStrLabel.alpha = <span class="number">1.0</span>;</span><br><span class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.6</span> delay:<span class="number">0.3</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseIn</span> animations:^&#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            [<span class="keyword">self</span> setX:-kScreen_Width];</span><br><span class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            [<span class="keyword">self</span> removeFromSuperview];</span><br><span class="line">            <span class="keyword">if</span> (completionHandler) &#123;</span><br><span class="line">                completionHandler(<span class="keyword">self</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>其实本实例中最为关键的内容在方法startAnimationWithCompletionBlock里</p></blockquote> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span><span class="selector-class">.keyWindow</span> <span class="selector-tag">addSubview</span><span class="selector-pseudo">:self</span>];</span><br><span class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span><span class="selector-class">.keyWindow</span> <span class="selector-tag">bringSubviewToFront</span><span class="selector-pseudo">:self</span>];</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>代码就是把这个视图设置成在最前的最上层，这样就可以盖住程序中的页面；</p></blockquote><pre><code><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">_bgImageView.alpha = <span class="number">0</span>.<span class="number">0</span><span class="comment">;</span></span><br><span class="line">_descriptionStrLabel.alpha = <span class="number">0</span>.<span class="number">0</span><span class="comment">;</span></span><br><span class="line">这个是为了下面的动画做准备，若是直接用背景图可以把这两个都设置成<span class="number">0</span>.<span class="number">99</span>这样就不会有一闪的错觉；</span><br><span class="line"></span><br><span class="line">@weakify(self)<span class="comment">;</span></span><br><span class="line">[UIView animateWithDuration:<span class="number">2</span>.<span class="number">0</span> animations:^&#123;</span><br><span class="line">    @strongify(self)<span class="comment">;</span></span><br><span class="line">    self.<span class="keyword">bgImageView.alpha </span>= <span class="number">1</span>.<span class="number">0</span><span class="comment">;</span></span><br><span class="line">    self.descriptionStrLabel.alpha = <span class="number">1</span>.<span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125; completion:^(<span class="keyword">BOOL </span>finished) &#123;</span><br><span class="line">    [UIView animateWithDuration:<span class="number">0</span>.<span class="number">6</span> delay:<span class="number">0</span>.<span class="number">3</span> options:UIViewAnimationOptionCurveEaseIn animations:^&#123;</span><br><span class="line">        @strongify(self)<span class="comment">;</span></span><br><span class="line">        [self setX:-kScreen_Width]<span class="comment">;</span></span><br><span class="line">    &#125; completion:^(<span class="keyword">BOOL </span>finished) &#123;</span><br><span class="line">        @strongify(self)<span class="comment">;</span></span><br><span class="line">        [self removeFromSuperview]<span class="comment">;</span></span><br><span class="line">        if (completionHandler) &#123;</span><br><span class="line">            completionHandler(self)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]<span class="comment">;</span></span><br><span class="line">&#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure></code></pre><blockquote><p>这边是动画效果，时间设置为2秒，因为这边第一个动画完还有一个缩放的效果；当动画结束后就可以  [self removeFromSuperview];</p></blockquote><h4 id="二：调用启动页视图"><a href="#二：调用启动页视图" class="headerlink" title="二：调用启动页视图"></a>二：调用启动页视图</h4><blockquote><p>在AppDelegate中的didFinishLaunchingWithOptions进行调用；</p></blockquote><pre><code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line"><span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen] bounds]];</span><br><span class="line"><span class="comment">// Override point for customization after application launch.</span></span><br><span class="line"><span class="keyword">self</span>.window.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络</span></span><br><span class="line">[[AFNetworkActivityIndicatorManager sharedManager] setEnabled:<span class="literal">YES</span>];</span><br><span class="line">[[AFNetworkReachabilityManager sharedManager] startMonitoring];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航条样式</span></span><br><span class="line">[<span class="keyword">self</span> customizeInterface];</span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">NO</span> withAnimation:<span class="built_in">UIStatusBarAnimationFade</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">    [<span class="keyword">self</span> setupTabViewController];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    [<span class="built_in">UIApplication</span> sharedApplication].applicationIconBadgeNumber = <span class="number">0</span>;</span><br><span class="line">    [<span class="keyword">self</span> setupIntroductionViewController];</span><br><span class="line">&#125;</span><br><span class="line">[<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">[FunctionIntroManager showIntroPage];</span><br><span class="line"></span><br><span class="line">EaseStartView *startView = [EaseStartView startView];</span><br><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line">[startView startAnimationWithCompletionBlock:^(EaseStartView *easeStartView) &#123;</span><br><span class="line">    @strongify(<span class="keyword">self</span>);</span><br><span class="line">    <span class="comment">//可以做其它事情</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>注意，EaseStartView代码的位置是要放在最后面，因为要让它盖在最上层，就要后面加载，这样就可以盖在登录页面上面或者主页上；到这就已经可以成功启动页的效果；</p></blockquote><h4 id="三：下面实例为项目中用到的动态加载版本号到启动页上"><a href="#三：下面实例为项目中用到的动态加载版本号到启动页上" class="headerlink" title="三：下面实例为项目中用到的动态加载版本号到启动页上"></a>三：下面实例为项目中用到的动态加载版本号到启动页上</h4><pre><code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"StartUpView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">StartUpView</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIImageView</span> *bgImageView;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UILabel</span> *descriptionStrLabel;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">StartUpView</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)startView &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *bgImage=kshamLaunchImage;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithBgImage:bgImage];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithBgImage:(<span class="built_in">UIImage</span> *)bgImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:Main_Screen_Bounds];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        _bgImageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:Main_Screen_Bounds];</span><br><span class="line">        _bgImageView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</span><br><span class="line">        _bgImageView.alpha = <span class="number">0</span>;</span><br><span class="line">        _bgImageView.image=bgImage;</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_bgImageView];</span><br><span class="line">        </span><br><span class="line">        _descriptionStrLabel = [[<span class="built_in">UILabel</span> alloc] init];</span><br><span class="line">        _descriptionStrLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">15</span>];</span><br><span class="line">        _descriptionStrLabel.textColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">        _descriptionStrLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">        _descriptionStrLabel.alpha = <span class="number">0</span>;</span><br><span class="line">        _descriptionStrLabel.text=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"版本号为:%@"</span>,appVersion];</span><br><span class="line">        [<span class="keyword">self</span> addSubview:_descriptionStrLabel];</span><br><span class="line">        </span><br><span class="line">        [_descriptionStrLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">            make.height.mas_equalTo(<span class="number">50</span>);</span><br><span class="line">            make.bottom.equalTo(<span class="keyword">self</span>.mas_bottom).offset(<span class="number">-15</span>);</span><br><span class="line">            make.left.equalTo(<span class="keyword">self</span>.mas_left).offset(<span class="number">20</span>);</span><br><span class="line">            make.right.equalTo(<span class="keyword">self</span>.mas_right).offset(<span class="number">-20</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startAnimationWithCompletionBlock:(<span class="keyword">void</span>(^)(StartUpView *easeStartView))completionHandler&#123;</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication].keyWindow addSubview:<span class="keyword">self</span>];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication].keyWindow bringSubviewToFront:<span class="keyword">self</span>];</span><br><span class="line">    _bgImageView.alpha = <span class="number">0.99</span>;</span><br><span class="line">    _descriptionStrLabel.alpha = <span class="number">0.99</span>;</span><br><span class="line">    </span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.0</span> animations:^&#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">self</span>.bgImageView.alpha = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">self</span>.descriptionStrLabel.alpha = <span class="number">1.0</span>;</span><br><span class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeFromSuperview];</span><br><span class="line">        <span class="keyword">if</span> (completionHandler) &#123;</span><br><span class="line">            completionHandler(<span class="keyword">self</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新特性界面</title>
      <link href="/2016/06/16/2016b/%E6%96%B0%E7%89%B9%E6%80%A7%E7%95%8C%E9%9D%A2/"/>
      <url>/2016/06/16/2016b/%E6%96%B0%E7%89%B9%E6%80%A7%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li><p>使用collectionView</p></li><li><p>UIcollectionViewlayout  自定义prepared 调用顺序，1.count，2.准备布局，3.返回cell</p></li><li><p>重写init 方法，设置外部参数照片的数组，</p></li></ul><ul><li><p>一个文件中可以创建多个class ，创建类flowLyout. newFertureCell</p></li><li><p><strong>NewfeatureLayout</strong>  中<strong>prepareLayout()</strong> 方法 设置layout的参数，和collectionView的参数</p></li><li><p>什么时候调用? 1.先调用一个有多少行cell 2.调用准备布局 3.调用返回cell</p>  <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">override func prepareLayout() &#123;</span><br><span class="line"></span><br><span class="line">// <span class="number">1</span>.设置layout布局</span><br><span class="line"></span><br><span class="line"><span class="attr">itemSize</span> = UIScreen.mainScreen().bounds.size</span><br><span class="line"></span><br><span class="line"><span class="attr">minimumInteritemSpacing</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">minimumLineSpacing</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrollDirection</span> = UICollectionViewScrollDirection.Horizontal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>.设置collectionView的属性</span><br><span class="line"></span><br><span class="line">collectionView?.<span class="attr">showsHorizontalScrollIndicator</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">collectionView?.<span class="attr">bounces</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">collectionView?.<span class="attr">pagingEnabled</span> = <span class="literal">true</span>    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>cell 中设置button 显示的动画，设置button的点击发送通知</p></li><li><p>设置<strong> transform</strong> 动画，完成之后 transform 设置 CGAffineTransform.identity ，归位初始值</p></li><li><p>usingSpringWithDamping 为（0-1）， 数值越小，弹力越大</p></li><li><p>initialSpringVelocity 速度 5,10,15</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// button的动画</span></span><br><span class="line"></span><br><span class="line">func buttonStartAnimation()&#123;</span><br><span class="line"></span><br><span class="line">    cellButton.isHidden = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    cellButton.transform = CGAffineTransform(<span class="string">scaleX:</span> <span class="number">0</span>, <span class="string">y:</span> <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cellButton.isUserInteractionEnabled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    UIView.animate(<span class="string">withDuration:</span> <span class="number">2</span>, <span class="string">delay:</span> <span class="number">0</span>, <span class="string">usingSpringWithDamping:</span> <span class="number">0.8</span>, <span class="string">initialSpringVelocity:</span> <span class="number">10</span>, <span class="string">options:</span> UIViewAnimationOptions.init(<span class="string">rawValue:</span> <span class="number">0</span>), <span class="string">animations:</span> &#123;</span><br><span class="line"></span><br><span class="line">        self.cellButton.transform = CGAffineTransform.identity        </span><br><span class="line"></span><br><span class="line">    &#125;) &#123; (_) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">        self.cellButton.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>swift 3.0 之发送通知</p></li><li><p>创建一个swift文件，存储常量，</p></li><li><p>通知变化为 NSNotification.Name(rawValue:””） </p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送通知</span></span><br><span class="line">let SwitchRootVCNotification = NSNotification.Name(rawValue:<span class="string">"SwitchRootViewControllerKey"</span>)</span><br><span class="line"></span><br><span class="line">NotificationCenter<span class="selector-class">.default</span><span class="selector-class">.post</span>(name:SwitchRootVCNotification, <span class="selector-tag">object</span>: nil)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收通知</span></span><br><span class="line"></span><br><span class="line">NotificationCenter<span class="selector-class">.default</span><span class="selector-class">.addObserver</span>(self, selector: #selector(changeRoot), name: SwitchRootVCNotification, <span class="selector-tag">object</span>: nil)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FRDLiveLyButton</title>
      <link href="/2016/05/05/2016b/FRDLiveLyButton/"/>
      <url>/2016/05/05/2016b/FRDLiveLyButton/</url>
      
        <content type="html"><![CDATA[<h4 id="1-FRDLiveLyButton"><a href="#1-FRDLiveLyButton" class="headerlink" title="1.FRDLiveLyButton"></a>1.FRDLiveLyButton</h4><blockquote><p>使用FRDLiveLyButton  有动画的button，<a href="https://github.com/sebastienwindal/FRDLivelyButton" target="_blank" rel="noopener">FRDLiveLyButton</a></p></blockquote><img src="/2016/05/05/2016b/FRDLiveLyButton/image2.png" width="200" height="50"><blockquote><p>实用方法</p></blockquote><img src="/2016/05/05/2016b/FRDLiveLyButton/image1.png"><ul><li>1.设置style</li><li>2: setOptions方法，设置外观</li></ul><h4 id="2-基于FMDB的keyValue"><a href="#2-基于FMDB的keyValue" class="headerlink" title="2.基于FMDB的keyValue"></a>2.基于FMDB的keyValue</h4><blockquote><p>唐巧基于FMDB的keyValue模式存储，value是json格式活着是字典数组模型可以考虑存储</p></blockquote><h4 id="3-LazyFadeInView"><a href="#3-LazyFadeInView" class="headerlink" title="3.LazyFadeInView"></a>3.LazyFadeInView</h4><blockquote><p>说明LazyFadeInView 非常酷，以一种动画的形式来显示一个label。</p></blockquote><blockquote><p>使用<a href="https://github.com/itouch2/LazyFadeInView" target="_blank" rel="noopener">LazyFadeInView</a>，创建一个LazyFadeInView，然后添加到你的view中。它会自动的用动画的形式显示出来。</p></blockquote><blockquote><p>代码</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LazyFadeInView *fadeInView = [[LazyFadeInView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">120</span>, <span class="number">280</span>, <span class="number">200</span>)];</span><br><span class="line"><span class="keyword">self</span>.fadeInView.text = <span class="string">@"Stray birds of summer come to my window to sing and fly away."</span>;</span><br><span class="line"><span class="keyword">self</span>.fadeInView.textColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.fadeInView];</span><br></pre></td></tr></table></figure><h4 id="4-YLGIFImage"><a href="#4-YLGIFImage" class="headerlink" title="4.YLGIFImage"></a>4.YLGIFImage</h4><blockquote><p>异步加载GIF图片的类，支持GIF图片的播放与暂停。 它用的内存很少，完全解码GIF通常会消耗600MB的内存（800x600x389x4 Bytes），但是如果你用了YLGIFImage，它只占用30MB内存。</p></blockquote><blockquote><p>上面这张GIF图片。iOS加载时会直接崩溃，而使用了<a href="https://github.com/liyong03/YLGIFImage" target="_blank" rel="noopener">YLGIFImage</a>，那就不会。</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">YLImageView</span>* imageView = [[<span class="symbol">YLImageView</span> alloc] initWithFrame:<span class="symbol">CGRectMake</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">240</span>)];</span><br><span class="line">[self.view addSubview:imageView];</span><br><span class="line">imageView.image = [<span class="symbol">YLGIFImage</span> imageNamed:@<span class="string">"joy.gif"</span>];</span><br></pre></td></tr></table></figure><h4 id="5-SDCycleScrollView-轮播图的使用"><a href="#5-SDCycleScrollView-轮播图的使用" class="headerlink" title="5.SDCycleScrollView 轮播图的使用"></a>5.SDCycleScrollView 轮播图的使用</h4><ul><li>SDCycleScrollView 轮播图的使用：</li><li>初始化的方法，给定位置，何数据源，图片网址</li><li>若是顶部出现空白区域：设置 self.automaticallyAdjustsScrollViewInsets = NO</li><li>pagecontrol的小圆点自定义接口改为：currentPageDotColor、pageDotColor、currentPageDotImage、pageDotImage</li><li>设置定义的标题，代理，时间间隔</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络加载图片的轮播器</span></span><br><span class="line"> SDCycleScrollView *cycleScrollView = [<span class="string">cycleScrollViewWithFrame:</span>frame <span class="string">delegate:</span>delegate <span class="string">placeholderImage:</span>placeholderImage];</span><br><span class="line"> cycleScrollView.imageURLStringsGroup = imagesURLStrings;</span><br><span class="line"> <span class="comment">// 本地加载图片的轮播器</span></span><br><span class="line"> SDCycleScrollView *cycleScrollView = [SDCycleScrollView <span class="string">cycleScrollViewWithFrame:</span> <span class="string">imagesGroup:</span>图片数组];</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置pageControl居右，默认居中</span></span><br><span class="line">cycleScrollView.pageControlAliment = SDCycleScrollViewPageContolAlimentRight; </span><br><span class="line"><span class="comment">// 如果设置title数组，则会在图片下面添加标题</span></span><br><span class="line">cycleScrollView.titlesGroup = 标题数组（数组元素个数必须和图片数组元素个数保持一致）; </span><br><span class="line"> <span class="comment">// 如需监听图片点击，请设置代理，实现代理方法</span></span><br><span class="line">cycleScrollView.<span class="keyword">delegate</span> = ;</span><br><span class="line"><span class="comment">// 自定义轮播时间间隔</span></span><br><span class="line">cycleScrollView.autoScrollTimeInterval = ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用cocoapods中遇到的问题</title>
      <link href="/2016/03/21/2016b/%E4%BD%BF%E7%94%A8cocoapods/"/>
      <url>/2016/03/21/2016b/%E4%BD%BF%E7%94%A8cocoapods/</url>
      
        <content type="html"><![CDATA[<h3 id="1-使用cocoapods"><a href="#1-使用cocoapods" class="headerlink" title="1.使用cocoapods"></a>1.使用cocoapods</h3><ul><li>使用时需要新建一个名为 Podfile 的文件，以如下格式，将依赖的库名字依次列在 文件中即可  </li><li>然后你将编辑好的 Podfile 文件放到你的项目根目录中，执行如下命令即可：</li><li><p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下 2 点即可：</p><ul><li>使用 CocoaPods 生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li><li>每次更改了 Podfile 文件，你需要重新执行一次pod update命令。</li></ul></li><li><p>进行搜索第三方框架的时候，终端命令输入 <code>pod search json</code></p></li><li>找到做多版本更新最多的，粘贴复制到podfile文件中，这个文件在项目的根目录下，一个项目使用一个podfile，</li></ul><h3 id="2-使用pod时"><a href="#2-使用pod时" class="headerlink" title="2.使用pod时"></a>2.使用pod时</h3><ul><li>pod search 第三方框架 </li><li>复制 版本更新最多的，将podfile 文件复制到项目跟路径下，修改podfile文件内容， 保存，</li><li>执行pod install命令，执行成功之后，是已经加入到workspace中。 </li></ul><h3 id="3-使用第三方有cocoapods时，进行pod-update"><a href="#3-使用第三方有cocoapods时，进行pod-update" class="headerlink" title="3.使用第三方有cocoapods时，进行pod update:"></a>3.使用第三方有cocoapods时，进行pod update:</h3><ul><li><p>用这时候，打开终端，进入UAAppReviewManagerExample所在的目录，也就是和Podfile在同一目录下，和场景1一样，输入以下命令（由于已经有Podfile，所以不需要再创建Podfile）：   </p></li><li><p>下载的第三方中间有podfile和podlock,直接切换到根目录下进行更新。 <code>$ pod update</code> </p></li><li><p>pod setup 等待时间过上</p><ul><li>从GitHub上下载文件，下载，详情请看Alamofire4.4.0 安装</li><li><p>或替换下载源</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod repo remove <span class="literal">master</span></span><br><span class="line">pod repo add <span class="keyword">master</span> <span class="title">https</span>://gitcafe.com/akuandev/Specs.git</span><br><span class="line">pod repo update</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-问题："><a href="#4-问题：" class="headerlink" title="4.问题："></a>4.问题：</h3><ul><li><p>cocoapoadss的出现问题，pod Install 也不行，</p>  <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build diff: /../Podfile.lock: <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure></li><li><p>开始的时候用pod install/update各种都没有用。后来试了这种方法，重新build就ok。</p></li><li>在工程设置中的<code>Build Phases</code>下删除Check Pods Manifest.lock及Copy Pods Resources</li></ul><h3 id="5-删除cocoapads"><a href="#5-删除cocoapads" class="headerlink" title="5.删除cocoapads"></a>5.删除cocoapads</h3><ul><li>删除下载资源库   直接删除改行就行</li><li><p>cd到当前项目目录下，重新执行pod install命令</p>  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.打开Podfile文件，删除JSONKit该行，即：</span><br><span class="line"><span class="keyword">platform</span>:ios, <span class="string">'7.0'</span>  </span><br><span class="line">pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 2.1.0'</span></span><br><span class="line">pod <span class="string">'JSONKit'</span>, <span class="string">'~&gt; 1.5pre'</span>（删除该行）</span><br><span class="line">pod <span class="string">'MBProgressHUD'</span>, <span class="string">'~&gt; 0.8'</span></span><br></pre></td></tr></table></figure></li><li><p>删除整个cocoapods </p></li><li>删除工程文件夹下的Podfile、Podfile.lock和Pods文件夹</li><li>删除xcworkspace文件。</li><li>打开xcodeproj文件，删除项目中的libpods.a和Pods.xcconfig引用：</li><li>打开Build Phases选项，删除Check Pods Manifest.lock和Copy Pods Resources  <img src="/2016/03/21/2016b/使用cocoapods/50227702.png" width="200" height="50"></li></ul><h3 id="6-cocoaPods-Alamofire4-4-0"><a href="#6-cocoaPods-Alamofire4-4-0" class="headerlink" title="6.cocoaPods - Alamofire4.4.0"></a>6.cocoaPods - Alamofire4.4.0</h3><ul><li>安装cocoaPods</li><li><p>开始： -&gt; 打开Terminal</p></li><li><p>移走原有的ruby源</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -<span class="built_in">remove</span> https:<span class="comment">//rubygems.org/</span></span><br></pre></td></tr></table></figure></li><li><p>指定添加国内最新镜像源 <code>gem sources -a https://gems.ruby-china.org/</code></p></li><li><p>查看结果 <code>gem sources -l</code></p>  <img src="/2016/03/21/2016b/使用cocoapods/54382047.png" width="200" height="50"></li><li><p>检查更新ruby环境 <code>sudo gem update --system</code></p>  <img src="/2016/03/21/2016b/使用cocoapods/54521212.png" width="240"></li><li><p>最新安装cocoapods的路径 <code>sudo gem install -n /usr/local/bin cocoapods</code></p>  <img src="/2016/03/21/2016b/使用cocoapods/54846893.png" width="260"></li><li><p>直接敲 <code>pod setup</code> </p>  <img src="/2016/03/21/2016b/使用cocoapods/54859475.png" width="260"></li><li>检查是否安装成功  <img src="/2016/03/21/2016b/使用cocoapods/54905630.png" width="260"></li><li>cd 项目目录下 <code>cd ~/Path/To/Folder/Containing/IceCreamShop</code></li><li><p>创建podFile</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="keyword">init</span></span><br><span class="line"><span class="keyword">open</span> -a <span class="type">Xcode</span> <span class="type">Podfile</span></span><br></pre></td></tr></table></figure></li><li><p>编辑podFile</p>  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*#* Uncomment this line <span class="keyword">to</span> define a <span class="keyword">global</span> <span class="keyword">platform</span> <span class="keyword">for</span> your project</span><br><span class="line">*#* <span class="keyword">platform</span> :ios, <span class="string">'6.0'</span> </span><br><span class="line">target <span class="string">'IceCreamShop'</span> <span class="keyword">do</span> </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">target <span class="string">'IceCreamShopTests'</span> <span class="keyword">do</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>将注释的内容替换成下面的两行：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">platform</span> <span class="selector-pseudo">:ios</span>, "8<span class="selector-class">.0</span>"</span><br><span class="line"><span class="selector-tag">use_frameworks</span>!</span><br></pre></td></tr></table></figure></li><li><p><code>pod install</code> 完成</p></li><li><p>有坑</p><ul><li>pod install 中由于网络原因下载不动</li><li><p>最终解决方案：<br>在GitHub上找到Specs 后fork到自己的工程,然后使用工具GitHub Desktop工具把Specs下载下来，更名成master ，替换路径~/.cocoapods/repos目录下的master。就可以正常使用了</p><img src="/2016/03/21/2016b/使用cocoapods/55924845.png" width="260"></li><li><p>master 中.git .gitignore 是隐藏文件，直接覆盖的话会出错 </p><img src="/2016/03/21/2016b/使用cocoapods/55994711.png" width="260"></li></ul></li></ul><h3 id="7-cocoaPods-Alamofire4-4-0"><a href="#7-cocoaPods-Alamofire4-4-0" class="headerlink" title="7.cocoaPods - Alamofire4.4.0"></a>7.cocoaPods - Alamofire4.4.0</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocoapods </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修正iOS从照相机和相册中获取的图片方向</title>
      <link href="/2016/03/11/2016b/%E4%BF%AE%E6%AD%A3iOS%E4%BB%8E%E7%85%A7%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9B%B8%E5%86%8C%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%9A%84%E5%9B%BE%E7%89%87%E6%96%B9%E5%90%91/"/>
      <url>/2016/03/11/2016b/%E4%BF%AE%E6%AD%A3iOS%E4%BB%8E%E7%85%A7%E7%9B%B8%E6%9C%BA%E5%92%8C%E7%9B%B8%E5%86%8C%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%9A%84%E5%9B%BE%E7%89%87%E6%96%B9%E5%90%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用系统相机拍照得到的图片的默认方向有时不是ImageOrientationDown，而是ImageOrientationLeft，在使用的时候会出现图片顺时针偏转90°。使用fixOrientation方法修正这个问题。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)fixOrientation</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">// No-op if the orientation is already correct</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.imageOrientation == <span class="built_in">UIImageOrientationUp</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// We need to calculate the proper transformation to make the image upright.</span></span><br><span class="line">    <span class="comment">// We do it in 2 steps: Rotate if Left/Right/Down, and then flip if Mirrored.</span></span><br><span class="line">    <span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.imageOrientation) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDown</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDownMirrored</span>:</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span>.size.width, <span class="keyword">self</span>.size.height);</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformRotate</span>(transform, M_PI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeft</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeftMirrored</span>:</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span>.size.width, <span class="number">0</span>);</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformRotate</span>(transform, M_PI_2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRight</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRightMirrored</span>:</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="number">0</span>, <span class="keyword">self</span>.size.height);</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformRotate</span>(transform, -M_PI_2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.imageOrientation) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationUpMirrored</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDownMirrored</span>:</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span>.size.width, <span class="number">0</span>);</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformScale</span>(transform, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeftMirrored</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRightMirrored</span>:</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span>.size.height, <span class="number">0</span>);</span><br><span class="line">            transform = <span class="built_in">CGAffineTransformScale</span>(transform, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Now we draw the underlying CGImage into a new context, applying the transform</span></span><br><span class="line">    <span class="comment">// calculated above.</span></span><br><span class="line">    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, <span class="keyword">self</span>.size.width, <span class="keyword">self</span>.size.height,</span><br><span class="line">                                             <span class="built_in">CGImageGetBitsPerComponent</span>(<span class="keyword">self</span>.CGImage), <span class="number">0</span>,</span><br><span class="line">                                             <span class="built_in">CGImageGetColorSpace</span>(<span class="keyword">self</span>.CGImage),</span><br><span class="line">                                             <span class="built_in">CGImageGetBitmapInfo</span>(<span class="keyword">self</span>.CGImage));</span><br><span class="line">    <span class="built_in">CGContextConcatCTM</span>(ctx, transform);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.imageOrientation) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeft</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeftMirrored</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRight</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRightMirrored</span>:</span><br><span class="line">            <span class="comment">// Grr...</span></span><br><span class="line">            <span class="built_in">CGContextDrawImage</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">self</span>.size.height,<span class="keyword">self</span>.size.width), <span class="keyword">self</span>.CGImage);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">CGContextDrawImage</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">self</span>.size.width,<span class="keyword">self</span>.size.height), <span class="keyword">self</span>.CGImage);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// And now we just create a new UIImage from the drawing context</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> cgimg = <span class="built_in">CGBitmapContextCreateImage</span>(ctx);</span><br><span class="line">    <span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageWithCGImage:cgimg];</span><br><span class="line">    <span class="built_in">CGContextRelease</span>(ctx);</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(cgimg);</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>KVC/KVO的内部实现</title>
      <link href="/2016/03/11/2016b/KVC%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2016/03/11/2016b/KVC%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="KVC的内部实现"><a href="#KVC的内部实现" class="headerlink" title="KVC的内部实现"></a>KVC的内部实现</h4><blockquote><p>KVC运用了isa-swizzing技术。isa-swizzing就是类型混合指针机制。KVC通过isa-swizzing实现其内部查找定位。</p></blockquote><blockquote><p>isa指针（is kind of 的意思）指向维护分发表的对象的类，该分发表实际上包含了指向实现类中的方法的指针和其他数据。</p></blockquote><p>　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　[site <span class="string">setValue:</span>@<span class="string">"sitename"</span> <span class="string">forKey:</span>@<span class="string">"name"</span>]</span><br><span class="line"><span class="comment">//会被编译器处理成</span></span><br><span class="line">SEL sel = sel_get_uid(<span class="string">setValue:</span>forKey);</span><br><span class="line">IMP method = objc_msg_loopup(site-&gt;isa,sel);</span><br><span class="line">method(site,sel,@<span class="string">"sitename"</span>,@<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure></p><ul><li>每个类都有一张方法表，是一个hash表，值是还书指针IMP，SEL的名称就是查表时所用的键。</li><li>SEL数据类型：查找方法表时所用的键。定义成char*，实质上可以理解成int值。</li><li>IMP数据类型：他其实就是一个编译器内部实现时候的函数指针。当Objective-C编译器去处理实现一个方法的时候，就会指向一个IMP对象，这个对象是C语言表述的类型。</li></ul><h4 id="KVC的内部机制："><a href="#KVC的内部机制：" class="headerlink" title="KVC的内部机制："></a>KVC的内部机制：</h4><blockquote><p>一个对象在调用setValue的时候进行了如下操作：</p></blockquote><ul><li>根据方法名找到运行方法的时候需要的环境参数</li><li>他会从自己的isa指针结合环境参数，找到具体的方法实现接口。</li><li>再直接查找得来的具体的实现方法</li></ul><h4 id="KVO概述"><a href="#KVO概述" class="headerlink" title="KVO概述"></a>KVO概述</h4><blockquote><p>键值观察Key-Value-Observer就是观察者模式。</p></blockquote><ul><li>观察者模式的定义：一个目标对象管理所有依赖于它的观察者对象，并在它自身的状态改变时主动通知观察者对象。这个主动通知通常是通过调用各观察者对象所提供的接口方法来实现的。观察者模式较完美地将目标对象与观察者对象解耦。<br>当需要检测其他类的属性值变化，但又不想被观察的类知道，有点像FBI监视嫌疑人，这个时候就可以使用KVO了。</li></ul><blockquote><p>KVO同KVC一样都依赖于Runtime的动态机制</p></blockquote><ul><li><p>注册：<br>　<br>　<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 -(<span class="keyword">void</span>)<span class="string">addobserver:</span>(nsobject*)anobserer <span class="string">forkeypath:</span>(nsstrig*)keypath <span class="string">options:</span>(nskeyValueObservingOptions)options  <span class="string">context:</span>(<span class="keyword">void</span>*)context&#123;&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>实现方法：</p><figure class="highlight plain"><figcaption><span>ofOject:(id)object change:(nsdictionary*)change context:(void*)context ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 移除：</span><br><span class="line">``` －(void)removeObsever:(nsobject)observer forkeypath:(nsnsting*)keypath;</span><br></pre></td></tr></table></figure></li></ul><h4 id="KVO实现步骤"><a href="#KVO实现步骤" class="headerlink" title="KVO实现步骤"></a>KVO实现步骤</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 注册</span><br><span class="line"><span class="comment">//keyPath就是要观察的属性值</span></span><br><span class="line"><span class="comment">//options给你观察键值变化的选择</span></span><br><span class="line"><span class="comment">//context方便传输你需要的数据</span></span><br><span class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">addObserver</span><span class="selector-pseudo">:(NSObject</span> *)<span class="selector-tag">anObserver</span> </span><br><span class="line">        <span class="selector-tag">forKeyPath</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">keyPath</span> </span><br><span class="line">           <span class="selector-tag">options</span><span class="selector-pseudo">:(NSKeyValueObservingOptions)options</span> </span><br><span class="line">           <span class="selector-tag">context</span><span class="selector-pseudo">:(void</span> *)<span class="selector-tag">context</span></span><br><span class="line">    实现方法</span><br><span class="line"><span class="comment">//change里存储了一些变化的数据，比如变化前的数据，变化后的数据；如果注册时context不为空，这里context就能接收到。</span></span><br><span class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">observeValueForKeyPath</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">keyPath</span> </span><br><span class="line">                     <span class="selector-tag">ofObject</span><span class="selector-pseudo">:(id)object</span></span><br><span class="line">                       <span class="selector-tag">change</span><span class="selector-pseudo">:(NSDictionary</span> *)<span class="selector-tag">change</span> </span><br><span class="line">                      <span class="selector-tag">context</span><span class="selector-pseudo">:(void</span> *)<span class="selector-tag">context</span></span><br><span class="line">    移除</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">removeObserver</span><span class="selector-pseudo">:(NSObject</span> *)<span class="selector-tag">observer</span> <span class="selector-tag">forKeyPath</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">keyPath</span>;</span><br></pre></td></tr></table></figure><h4 id="系统实现KVO有以下几个步骤："><a href="#系统实现KVO有以下几个步骤：" class="headerlink" title="系统实现KVO有以下几个步骤："></a>系统实现KVO有以下几个步骤：</h4><ul><li>当类A的对象第一次被观察的时候，系统会在运行期动态创建类A的派生类。我们称为B。</li><li>在派生类B中重写类A的setter方法，B类在被重写的setter方法中实现通知机制。<br>类B重写会 class方法，将自己伪装成类A。类B还会重写dealloc方法释放资源。</li><li>系统将所有指向类A对象的isa指针指向类B的对象。</li><li>KVO同KVC一样，通过 isa-swizzling 技术来实现。当观察者被注册为一个对象的属性的观察对象的isa指针被修改，指向一个中间类，而不是在真实的类。其结果是，isa指针的值并不一定反映实例的实际类。</li></ul><p>所以不能依靠isa指针来确定对象是否是一个类的成员。应该使用class方法来确定对象实例的类。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KVC/KVO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>StoryBoard</title>
      <link href="/2016/03/10/2016b/StoryBoard/"/>
      <url>/2016/03/10/2016b/StoryBoard/</url>
      
        <content type="html"><![CDATA[<h3 id="1-UIStoryboard"><a href="#1-UIStoryboard" class="headerlink" title="1.UIStoryboard"></a>1.UIStoryboard</h3><ul><li><p>通过<code>xib</code> 加载控制器的View</p><ul><li><code>initWithName:bundle:</code>  如果指定了特定的名称的xib,会去加载指定的xib</li><li>如果指定是nil,</li><li>判断有没有当前控制器相同的xib,如果有，自动加载跟它相同名称的xib(aTextViewController.xib)</li><li>r如果没有和它相同名称的xib，自动加载和它相同名称并且是去掉Controller的xib(aTextView.xib)<img src="/2016/03/10/2016b/StoryBoard/StoryBoard2.png" width="400"></li></ul></li><li><p>使用storyboard 界面跳转</p><ul><li><p>使用<code>UIStoryboardSegue</code>   的destinationViewController和sourceViewController进行控制亲间传值</p><img src="/2016/03/10/2016b/StoryBoard/StoryBoard3.png" width="400"></li></ul></li></ul><h3 id="2-loadView-方法"><a href="#2-loadView-方法" class="headerlink" title="2.loadView 方法"></a>2.loadView 方法</h3><ul><li>loadView 作用是用来创建控制器的view</li><li>什么时候调用，当控制器的view，第一次使用的时候调用</li><li>load view的底层u 原理<ul><li>先判断当前控制器是不是从storyBoard当中加载的，如果是从中加载的控制器，那么它会就会从storyBoard当中加载的控制器的view，设置当前控制器的view</li><li>当前控制器是不是从xib当中加载的，如果是从xib当中加载的话，把xib当中指定的view，设置当前控制器的view</li><li>如果也不是从xib加载的，会创建空白的view</li></ul></li></ul><h3 id="3-load-方法"><a href="#3-load-方法" class="headerlink" title="3.load  方法"></a>3.load  方法</h3><ul><li>程序一运行，就创建对象</li><li>load 方法：当类被加载到内存中就会调用</li><li><p>使用shareInstance 禁止不能使用alloc 方法：如果调用，抛出异常</p>  <img src="/2016/03/10/2016b/StoryBoard/StoryBoard4.png" width="400"></li><li><p>view 的实现原理</p>  <img src="/2016/03/10/2016b/StoryBoard/StoryBoard5.png" width="400"> </li><li><p>1.设置角标，首先设注册用户通知，才能设置提醒值：</p>  <img src="/2016/03/10/2016b/StoryBoard/StoryBoard1.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Swift学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 单元测试</title>
      <link href="/2016/03/09/2016b/iOS%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2016/03/09/2016b/iOS%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1.单元测试"></a>1.单元测试</h4><ul><li>测试性能，测试消耗时间</li><li><p>相同的代码重复执行10次，统计计算时间，平均时间</p>  <img src="/2016/03/09/2016b/iOS%20单元测试/iOS单元测试1.png" width="400"></li><li><p>测试异步的耗时操作，使用<code>Expection</code> </p>  <img src="/2016/03/09/2016b/iOS%20单元测试/iOS单元测试2.png" width="400"></li></ul><h4 id="2-猴子测试"><a href="#2-猴子测试" class="headerlink" title="2.猴子测试"></a>2.猴子测试</h4><ul><li>猴子测试不能和UI测试共存  <a href="https://github.com/jonathanpenn/ui-auto-monkey" target="_blank" rel="noopener">https://github.com/jonathanpenn/ui-auto-monkey</a>  <img src="/2016/03/09/2016b/iOS%20单元测试/iOS单元测试3.png" width="400"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>svn常用到操作指令</title>
      <link href="/2016/03/08/2016b/svn%E5%B8%B8%E7%94%A8%E5%88%B0%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
      <url>/2016/03/08/2016b/svn%E5%B8%B8%E7%94%A8%E5%88%B0%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="1-显示隐藏的文件夹"><a href="#1-显示隐藏的文件夹" class="headerlink" title="1.显示隐藏的文件夹"></a>1.显示隐藏的文件夹</h4><ul><li>打开“终端”，根据自己的版本选择命令</li><li><p>早期的OS X（10.6~10.8）系统可以使用如下两条命令来开始或者关闭系统隐藏文件的显示：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.Finder</span> AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment">//显示隐藏文件</span></span><br><span class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.Finder</span> AppleShowAllFiles No &amp;&amp; killall Finder <span class="comment">//不显示隐藏文件</span></span><br></pre></td></tr></table></figure></li><li><p>当升级到OS X 10.9 Mavericks版本之后，这两条命令需要做一些修改，变成了如下命令：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.finder</span> AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment">//显示隐藏文件</span></span><br><span class="line">defaults write com<span class="selector-class">.apple</span><span class="selector-class">.finder</span> AppleShowAllFiles No &amp;&amp; killall Finder <span class="comment">//不显示隐藏文件</span></span><br></pre></td></tr></table></figure></li><li><p>快捷键：</p></li><li>在 macOS Sierra，我们可以使用快捷键<code>⌘⇧.(Command + Shift + .)</code> 来快速（在 <code>Finder</code> 中）显示和隐藏隐藏文件了。</li></ul><h4 id="2-查看-svn-所在文件下的文件状态，"><a href="#2-查看-svn-所在文件下的文件状态，" class="headerlink" title="2.查看 svn 所在文件下的文件状态，"></a>2.查看 svn 所在文件下的文件状态，</h4><ul><li><p><code>svn status / svn st</code></p>  <img src="/2016/03/08/2016b/svn常用到操作指令/svn常用到操作指令1.png" width="400"></li></ul><h4 id="3-unix-下的命令行"><a href="#3-unix-下的命令行" class="headerlink" title="3.unix 下的命令行"></a>3.unix 下的命令行</h4><ul><li><p><code>unix</code> 下的命令行</p>  <img src="/2016/03/08/2016b/svn常用到操作指令/svn常用到操作指令2.png" width="400"></li></ul><h3 id="4-svn的客户端命令行"><a href="#4-svn的客户端命令行" class="headerlink" title="4.svn的客户端命令行"></a>4.svn的客户端命令行</h3><ul><li>svn checkout 拉取服务器代码创建本地仓库</li><li>svn commit 提交到服务器</li><li>svn update 拉取服务器代码同步本地/会有本地冲突 </li><li>svn add 将创建的文件添加到本地版本控制中</li><li>svn delete 删除本地文件 </li><li>svn remove 移除本地文件 </li><li>svn move 移动本地文件 </li><li>svn mkdir 创建本地管理新目录 </li><li>svn revert 撤销之前的修改</li><li>svn merge 合并某一个版本的代码 </li></ul><h4 id="5-svn-常用到操作指令。"><a href="#5-svn-常用到操作指令。" class="headerlink" title="5.svn 常用到操作指令。"></a>5.svn 常用到操作指令。</h4><ul><li><p>svn checkout  拉取服务器代码创建本地仓库</p></li><li><p>svn commit 提交到服务器</p></li><li><p>svn add - &gt; svn commit  将新创建的文件 添加到服务器上</p></li><li><p>svn delete -&gt; svn commit 删除本地文件，同步到服务器上 </p></li><li><p>svn update 拉取服务器代码同步本地/会有本地冲突 </p></li></ul><p> // 124881677</p>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>判断银行卡-识别银行卡所在银行</title>
      <link href="/2015/09/23/2015b/%E5%88%A4%E6%96%AD%E9%93%B6%E8%A1%8C%E5%8D%A1-%E8%AF%86%E5%88%AB%E9%93%B6%E8%A1%8C%E5%8D%A1%E6%89%80%E5%9C%A8%E9%93%B6%E8%A1%8C/"/>
      <url>/2015/09/23/2015b/%E5%88%A4%E6%96%AD%E9%93%B6%E8%A1%8C%E5%8D%A1-%E8%AF%86%E5%88%AB%E9%93%B6%E8%A1%8C%E5%8D%A1%E6%89%80%E5%9C%A8%E9%93%B6%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<ul><li>获取<a href="https://github.com/sunshine94/JPBankNamePro" target="_blank" rel="noopener">bank.infoPlist</a></li></ul><ul><li><p>根据银行卡号的前6位，或者前8位进行识别</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">NSString</span> *)returnBankName:(<span class="type">NSString</span>*) idCard&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(idCard==<span class="literal">nil</span> || idCard.length&lt;<span class="number">16</span> || idCard.length&gt;<span class="number">19</span>)&#123;</span><br><span class="line">        _resultLabel.text = @<span class="string">"卡号不合法"</span>;</span><br><span class="line">        <span class="keyword">return</span> @<span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">NSString</span> *plistPath = [[<span class="type">NSBundle</span> mainBundle] pathForResource:@<span class="string">"bank"</span> ofType:@<span class="string">"plist"</span>];</span><br><span class="line">    <span class="type">NSDictionary</span>* resultDic = [<span class="type">NSDictionary</span> dictionaryWithContentsOfFile:plistPath];</span><br><span class="line">    <span class="type">NSArray</span> *bankBin = resultDic.allKeys;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6位Bin号</span></span><br><span class="line">    <span class="type">NSString</span>* cardbin_6 = [idCard substringWithRange:<span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">6</span>)];</span><br><span class="line">    <span class="comment">//8位Bin号</span></span><br><span class="line">    <span class="type">NSString</span>* cardbin_8 = [idCard substringWithRange:<span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">8</span>)];</span><br><span class="line">    <span class="keyword">if</span> ([bankBin containsObject:cardbin_6]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [resultDic objectForKey:cardbin_6];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([bankBin containsObject:cardbin_8])&#123;</span><br><span class="line">        <span class="keyword">return</span> [resultDic objectForKey:cardbin_8];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        _resultLabel.text = @<span class="string">"plist文件中不存在请自行添加对应卡种"</span>;</span><br><span class="line">        <span class="keyword">return</span> @<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> @<span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2015/09/23/2015b/判断银行卡-识别银行卡所在银行/判断银行卡1.png"></li><li><p>在输入的过程中控制4位1控制，使用uitext的代理：</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="type">BOOL</span>)textField:(<span class="type">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="type">NSRange</span>)range replacementString:(<span class="type">NSString</span> *)string&#123;</span><br><span class="line">        <span class="type">NSString</span> *text = [<span class="keyword">self</span>.textField text];</span><br><span class="line">        <span class="type">NSCharacterSet</span> *characterSet = [<span class="type">NSCharacterSet</span> characterSetWithCharactersInString:@<span class="string">"0123456789\b"</span>];</span><br><span class="line">        string = [string stringByReplacingOccurrencesOfString:@<span class="string">" "</span> withString:@<span class="string">""</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([string rangeOfCharacterFromSet:[characterSet invertedSet]].location != <span class="type">NSNotFound</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        text = [text stringByReplacingCharactersInRange:range withString:string];</span><br><span class="line">        text = [text stringByReplacingOccurrencesOfString:@<span class="string">" "</span> withString:@<span class="string">""</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="type">NSString</span> *newString = @<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (text.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">NSString</span> *subString = [text substringToIndex:<span class="type">MIN</span>(text.length, <span class="number">4</span>)];</span><br><span class="line">            newString = [newString stringByAppendingString:subString];</span><br><span class="line">            <span class="keyword">if</span> (subString.length == <span class="number">4</span>) &#123;</span><br><span class="line">                newString = [newString stringByAppendingString:@<span class="string">" "</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            text = [text substringFromIndex:<span class="type">MIN</span>(text.length, <span class="number">4</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newString = [newString stringByTrimmingCharactersInSet:[characterSet invertedSet]];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 限制长度</span></span><br><span class="line">        <span class="keyword">if</span> (newString.length &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span>.textField setText:newString];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="/2015/09/23/2015b/判断银行卡-识别银行卡所在银行/判断银行卡2.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试题《三》</title>
      <link href="/2015/09/22/2015b/%E9%9D%A2%E8%AF%95%E9%A2%983/"/>
      <url>/2015/09/22/2015b/%E9%9D%A2%E8%AF%95%E9%A2%983/</url>
      
        <content type="html"><![CDATA[<h4 id="100道面试题"><a href="#100道面试题" class="headerlink" title="100道面试题"></a>100道面试题</h4><p>1.__weak什么时候用？<br>2.是否使用过coreImage和coreText?如果使用过，说说你的体验<br>3.数据结构、写一个顺序排列<br>4.什么是TCP、DUP等协议？他们分别属于第几层？<br>5.写一个单项链表逆序<br>6.在iPhone中怎么写入C++程序，详细写下来<br>7.写一个快速排序<br>8.autorelease的对象是在什么时候被release的？<br>11.什么是OpenGL?具体使用<br>12.开发过程中应用程序内存泄露了该怎么办<br>13.ios开发中有什么方式支持多继承？（obj-c有多重继承么?不是的话有什么替代方法?）<br>14.从1-n个五序列的数字中排序的算法有哪些，简单代码实现一个并写出时间复杂度<br>15.开启一个其他线程来计算1+1 并且把结果用主线程显示在label上更新UI<br>16.ios7中navigationBar的背景如何设置成透明的吗？需求是这样的：viewController的背景是蓝色的，然后让navigationbar的背景是透明的，就 这样navigationbar也变成蓝色的了<br>18.用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）<br>19.写一个委托的 interface<br>20.写一个NSString类的实现<br>21.obj-c有私有方法么?私有变量呢<br>22.关键字const有什么含意？修饰类呢?static的作用,用于类呢?还有extern c的作用<br>23.为什么标准头文件都有类似以下的结构？  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __INCvxWorksh  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __INCvxWorksh  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line"><span class="comment">/*...*/</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __INCvxWorksh */</span></span></span><br></pre></td></tr></table></figure><p>25.列举几种进程的同步机制，并比较其优缺点。</p><p>26.什么是键-值,键路径是什么</p><p>27.c和obj-c如何混用</p><p>28.cocoa touch框架</p><p>29.自动释放池是什么,如何工作</p><p>30.objc优点和objc缺点？</p><p>31.sprintf,strcpy,memcpy使用上有什么要注意的地方</p><p>32..http和scoket通信的区别。</p><p>35.什么是push。</p><p>36.静态链接库</p><p>37.fmmpeg框架</p><p>38.fmdb框架</p><p>39.320框架</p><p>40.什么是沙箱模型？哪些操作是属于私有api范畴?</p><p>41.你在开发项目中时，用到了哪些数据存储方式，iphone中常见的方式有哪些，各有什么区别？</p><p>43..init和initwithobject区别（语法）？</p><p>44.你连接服务器用的是什么方法，如果请求过程中，网络出了问题这么办？</p><p>47.协议是什么，有什么作用.？</p><p>49.分线程回调主线程方法是什么，有什么作用？ </p><p>50.iphone阅读器，如果要读取一个文本文件，请问你是如何处理编码问题的？另外像pdf格式的文件，你如何读取。?</p><p>51.你在开发大型项目的时候，如何进行内存泄露检测的?</p><p>52.你做iphone开发时候，有哪些传值方式，view和view之间是如何传值的？</p><p>53.让一个物体从界面中的一点运动到另外一点，有哪些方法？</p><p>54.你了解哪些加密方式？</p><p>55.地图定位</p><p>56.http网络通信</p><p>57.图片浏览</p><p>58.对像序列化</p><p>59.线程 ？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a. 线程的创建和使用规则?</span><br><span class="line">b. 主分线程</span><br><span class="line"><span class="built_in">c</span>.线程锁</span><br></pre></td></tr></table></figure><p>60.各种 排序算法？<br>61.通信底层原理<br>62.为什么很多内置类如UITableViewController的delegate属性都是assign而不是retain的？</p><ol start="63"><li>以下每行代码执行后，person对象的retain count分别是多少？</li></ol><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Person</span> *<span class="keyword">person</span> = <span class="comment">[<span class="comment">[Person alloc]</span> init]</span>; count 1</span><br><span class="line"><span class="comment">[person retain]</span>; </span><br><span class="line"><span class="comment">[person release]</span>;</span><br><span class="line"><span class="comment">[person release]</span>;</span><br></pre></td></tr></table></figure><p>64.在一个对象的方法里面:self.name = “object”;和name ＝”object”有什么不同吗?<br>67.请写出obj-c的内存管理代码<br>68.什么是OOP？<br>69.类变量的@protected, @private,@public, @package声明各有什么含义<br>71.什么是序列化或者Archiving?可以用来作什么？怎么跟copy结合？<br>74.KVO是同步还是异步？notification是同步还是异步？<br>75.ios对象的生命周期？<br>78.为NSString扩展一个方法，方法能判断字符串是否是Url地址（即判断字符串是否以“http://”），放回BOOL值类型</p><p>85.写一个简单的Objective C中的类的继承示例<br>86.这段代码的意义，有没有问题</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(void) <span class="built_in">setName</span> : (NSString*)<span class="built_in">name</span>&#123;</span><br><span class="line">[myname release];</span><br><span class="line">[<span class="built_in">name</span> retain];</span><br><span class="line">myname = <span class="built_in">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>87.上机题 写一个iphone程序，有2屏，可以通过滑动切换，第二屏有一个webview，读取本地的html文件，Html文件中会加载一个本地xml文件，获取xml文件中的数据内容并显示。（可选：html中加载的js文件）</p><p>88.协议？<br>89.TCP、HTTP、UDP<br>90.什么是协议？分几层？<br>91.UIView从出现到销毁的过程<br>92.认证<br>93.drawRect方法什么时候调用<br>94.js和webview如何交互、<br>95.框架phonegap<br>96.地图中怎么计算两点间的曲线距离<br>97.定位不准如何优化<br>98.TCP和DUP的区别<br>这两包的字节内容有啥不同<br>答  ：TCP多了一些纠错码包装，DUP纠错和校验码<br>99.简单的顺序列表<br>100.如何避免json解析出现内存泄露，内存泄露后怎么解决</p><hr><h4 id="iOS性能优化技巧"><a href="#iOS性能优化技巧" class="headerlink" title="iOS性能优化技巧"></a>iOS性能优化技巧</h4><blockquote><p>通过静态 Analyze 工具，以及运行时 Profile 工具分析性能瓶颈，并进行性能优化。结合本人在开发中遇到的问题，可以从以下几个方面进行性能优化。</p></blockquote><ul><li>view优化<ul><li>透明，懒加载，不要使用layoutsubViews，尽量使用drawRect，不要直接调用，使用替代setneedsdisplayinrect,layoutifneeded,</li></ul></li><li><p>UITableView优化</p><ul><li>重用cell，透明。复杂的cell使用drawrect, 不要使用cellforrowatinddexpatn,cache尽可能高的东西，包括行高。</li></ul></li><li><p>缓存优化</p><ul><li>缓存，尽量缓存使用率高。但改变比较少的，服务器的相应，图片，计算结果</li></ul></li><li>线程优化<ul><li>线程，耗时操作放到子线程中。同步使用串行队列，代替同步锁</li></ul></li><li>内存优化<ul><li>内存优化，使用autoreleasepoll　实现减少　内存峰值。</li></ul></li><li>代码细节优化</li><li><p>图片优化</p><ul><li><p>对图片数据进行decode。在子线程中设置image的大小后，在imageview中使用缩放后的image。原因：由于UIImage的 imageWithData函数是每次画图的时候才将Data解压成ARGB的图像，所以在每次画图的时候，会有一个解压操作，UIImage初始化后仅 仅是把图片加载到内存中，而实际的解码和重采样是在图片需要显示时才进行。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片重采样，在子线程中进行</span></span><br><span class="line"><span class="built_in">CGSize</span> itemSize = <span class="built_in">CGSizeMake</span>(width, height);<span class="comment">//实际要缩放的大小</span></span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContext</span>(itemSize);</span><br><span class="line"><span class="built_in">CGRect</span> imageRect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, itemSize.width, itemSize.height);</span><br><span class="line">[image drawInRect:imageRect];</span><br><span class="line"><span class="built_in">UIImage</span> newImage = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>(); <span class="comment">//重采样后的图片</span></span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>７、代码的优化，viewappear中不进行耗时操作，关键代码使用c效率更高。</p>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>有用的UI组件</title>
      <link href="/2015/09/22/2015b/%E6%9C%89%E7%94%A8%E7%9A%84UI%E7%BB%84%E4%BB%B6/"/>
      <url>/2015/09/22/2015b/%E6%9C%89%E7%94%A8%E7%9A%84UI%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Xcode 快捷键<br>倒计时闪烁问题<br>可视化编程中—-cell的自适应高度<br>iOS 关闭图片渲染<br>setValue 和setObject 的区别<br>IOS如何让实现国际化的相关配置<br>UITextView的点击链接<br>collecton的长按编辑的代码实现<br>NSAttributedString.h 中属性的定义，key<br>使用openURL实现程序间带参数跳转详解</p></blockquote><h3 id="1-子类父类class-superclass判断"><a href="#1-子类父类class-superclass判断" class="headerlink" title="1.子类父类class/superclass判断"></a>1.子类父类class/superclass判断</h3><ul><li><p>子类调用子类自己的方法，判断如下</p><img src="/2015/09/22/2015b/有用的UI组件/42426171.png" width="200" height="50"><p><img src="/2015/09/22/2015b/有用的UI组件/42426171.png" alt="image"></p></li><li><p>子类调用父类的方法，结果如下</p><img src="/2015/09/22/2015b/有用的UI组件/42456045.png" width="200" height="50"><p><img src="/2015/09/22/2015b/有用的UI组件/42456045.png" alt="image"></p></li></ul><h3 id="2-倒计时闪烁问题"><a href="#2-倒计时闪烁问题" class="headerlink" title="2.倒计时闪烁问题"></a>2.倒计时闪烁问题</h3><ul><li>UIButton+countDown.h，点击获取验证码后进行倒计时，效果挺好，但会闪烁，</li><li>解决办法:将UIButton的类型由system改为custom就OK。</li></ul><h3 id="3-Xcode-快捷键"><a href="#3-Xcode-快捷键" class="headerlink" title="3.Xcode 快捷键"></a>3.Xcode 快捷键</h3><ul><li>快捷键 <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、command <span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>/<span class="number">4</span>/<span class="number">5</span> 左侧的不同栏目</span><br><span class="line"><span class="number">2</span>、commad + e 搜索当前词  在本文件中搜索 </span><br><span class="line"><span class="number">3</span>、command +g  结合上面，选中搜索，然后下一个</span><br><span class="line"><span class="number">4</span>、 Command + [   左缩进    Command + ]  右缩进</span><br><span class="line"><span class="number">5</span>、 <span class="section">control</span> +<span class="number">6</span> 搜索本文件的方法显示出方法列表</span><br><span class="line"><span class="number">6</span>、command option + j  跳到目录搜索</span><br><span class="line"><span class="number">7</span>、command option +  [   当前行上下移动</span><br><span class="line"><span class="number">8</span>、command option ＋ Left/Right 折叠、展开当前代码段</span><br><span class="line"><span class="number">9</span>、command <span class="section">control</span>   + Up/Down  .h 和.m 之间的切换</span><br><span class="line"><span class="number">10</span>、command <span class="section">control</span> ＋  Left/Right浏览历史的前进后退</span><br><span class="line"><span class="number">11</span>、command shift o  文件、方法全局搜索</span><br><span class="line"><span class="number">12</span>、command shift ＋f  全局搜索   </span><br><span class="line"><span class="number">13</span>、 command shift +J 左侧栏显示当前所在文件</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-Xcode描述文件问题"><a href="#4-Xcode描述文件问题" class="headerlink" title="4.Xcode描述文件问题"></a>4.Xcode描述文件问题</h3><ul><li>No matching provisioning profile found: Your build settings specify a provis</li><li>解决办法~/Library/MobileDevice/Provisioning Profiles  全部删除，之后重新安装描述文件即可</li></ul><h3 id="5-可视化编程中—-cell的自适应高度"><a href="#5-可视化编程中—-cell的自适应高度" class="headerlink" title="5.可视化编程中—-cell的自适应高度"></a>5.可视化编程中—-cell的自适应高度</h3><ul><li>可视化编程中—-cell的自适应高度  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">Joke *joke = <span class="keyword">self</span>.dataArray[indexPath.row];</span><br><span class="line"><span class="built_in">NSString</span> *content = joke.joke;</span><br><span class="line"><span class="keyword">self</span>.customCell.contentLabel.text = content;</span><br><span class="line"><span class="keyword">self</span>.customCell.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.size.width, <span class="keyword">self</span>.customCell.frame.size.height);</span><br><span class="line">[<span class="keyword">self</span>.customCell updateConstraintsIfNeeded];</span><br><span class="line">[<span class="keyword">self</span>.customCell layoutIfNeeded];</span><br><span class="line"><span class="built_in">CGFloat</span> height = [<span class="keyword">self</span>.customCell systemLayoutSizeFittingSize: <span class="built_in">UILayoutFittingCompressedSize</span>].height + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-iOS-关闭图片渲染"><a href="#6-iOS-关闭图片渲染" class="headerlink" title="6.iOS 关闭图片渲染"></a>6.iOS 关闭图片渲染</h3><ul><li><p>在为Button 设置背景图片的时候, 会发现显示的效果和UI给的图片不一样, 往往是把图片显示成为蓝色, 这是因为在新版的iOS中, 会自动对图片渲染.<br>我们只要把图片渲染关掉就OK了</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)imageWithRenderingMode:(<span class="built_in">UIImageRenderingMode</span>)renderingMode</span><br><span class="line">这个方法就是用来设置图片的渲染模式的</span><br><span class="line"><span class="built_in">UIImageRenderingModeAlwaysOriginal</span>这个枚举值是声明这张图片要按照原来的样子显示，不需要渲染成其他颜色</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIImage</span> *playImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"luzhi"</span>];</span><br><span class="line">playImage = [playImage imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</span><br><span class="line">[_playBtn setImage:playImage forState:<span class="built_in">UIControlStateNormal</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-setValue-和setObject-的区别"><a href="#7-setValue-和setObject-的区别" class="headerlink" title="7.setValue 和setObject 的区别"></a>7.setValue 和setObject 的区别</h3><ul><li>setObject：forkey：中value是不能够为nil的，不然会报错。</li><li>setValue：forKey：中value能够为nil，但是当value为nil的时候，会自动调用removeObject：forKey方法</li><li>setValue：forKey：中key的参数只能够是NSString类型，而setObject：forKey：的可以是任何类型</li></ul><h3 id="8-IOS如何让实现国际化的相关配置"><a href="#8-IOS如何让实现国际化的相关配置" class="headerlink" title="8.IOS如何让实现国际化的相关配置"></a>8.IOS如何让实现国际化的相关配置</h3><ul><li>iOS中国际化需要做相关的配置：</li><li>选中应用程序对应的project，然后添加所需要国际化的语言。</li><li>新建Localizable.strings文件，作为多语言对应的词典，存储多种语言，点击右侧Localization，勾选国际化对应的语言。</li><li>添加一个字段，设置你想要国际化的字段<ul><li>在English中，添加：SUBMIT_BTN_TITLE = Go; </li><li>在Chinese中，添加：SUBMIT_BTN_TITLE = 开始;</li></ul></li></ul><h3 id="9-UITextView的点击链接"><a href="#9-UITextView的点击链接" class="headerlink" title="9.UITextView的点击链接"></a>9.UITextView的点击链接</h3><ul><li><p>UITextView的链接创建一个NSAttributedString然后增加给它增加一个NSLinkAttributeName 属性，见以下：</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableAttributedString</span> *attributedString = </span><br><span class="line">    [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:<span class="string">@"This is an example by @marcelofabri_"</span>];</span><br><span class="line">[attributedString addAttribute:<span class="built_in">NSLinkAttributeName</span>   </span><br><span class="line">                        value:<span class="string">@"username://marcelofabri_"</span></span><br><span class="line">                        range:[[attributedString string] rangeOfString:<span class="string">@"@marcelofabri_"</span>]]; </span><br><span class="line"><span class="built_in">NSDictionary</span> *linkAttributes = </span><br><span class="line">@&#123;<span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">UIColor</span> greenColor],                                 </span><br><span class="line"><span class="built_in">NSUnderlineColorAttributeName</span>: [<span class="built_in">UIColor</span> lightGrayColor],                                </span><br><span class="line"><span class="built_in">NSUnderlineStyleAttributeName</span>: @(<span class="built_in">NSUnderlinePatternSolid</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">textView.linkTextAttributes = linkAttributes; <span class="comment">// customizes the appearance of links</span></span><br><span class="line">textView.attributedText = attributedString;</span><br><span class="line">textView.delegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure></li><li><p>这样就可以让链接在文本中显示。然而，你也可以控制当链接被点击的时候会发生什么，实现这个可以使用UITextViewDelegate协议的新的shouldInteractWithURL方法，就像这样：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)textView:(<span class="built_in">UITextView</span> *)textView shouldInteractWithURL:(<span class="built_in">NSURL</span> *)URL inRange:(<span class="built_in">NSRange</span>)characterRange &#123;</span><br><span class="line">    <span class="keyword">if</span> ([[URL scheme] isEqualToString:<span class="string">@"username"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *username = [URL host];</span><br><span class="line">        <span class="comment">// do something with this username</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>; <span class="comment">// let the system open this URL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-table下面滑不下去，是table的高度超出了屏幕宽度"><a href="#10-table下面滑不下去，是table的高度超出了屏幕宽度" class="headerlink" title="10.table下面滑不下去，是table的高度超出了屏幕宽度"></a>10.table下面滑不下去，是table的高度超出了屏幕宽度</h3><ul><li><p>高度超过了屏幕宽度，高度设置的不对</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[weakSelf.currentVC.view setFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, ScreenW, ScreenH<span class="number">-64</span>)]; </span><br><span class="line"> <span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeNone</span>; <span class="comment">//也是个方法，是上方多处一块64时</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="11-气泡图片中间拉伸"><a href="#11-气泡图片中间拉伸" class="headerlink" title="11.气泡图片中间拉伸"></a>11.气泡图片中间拉伸</h3><ul><li><p>把一张小的图片做背景保持四周不变，拉伸中间，则用如下属性。UIEdgeInsets是拉伸的区域，一般取最中间的一个点</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *meBgNor=[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"chat_send_nor"</span>];</span><br><span class="line"><span class="built_in">UIEdgeInsets</span> edge1=<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">28</span>, <span class="number">32</span>, <span class="number">28</span>, <span class="number">32</span>);</span><br><span class="line">meBgNor=[meBgNor resizableImageWithCapInsets:edge1 resizingMode:<span class="built_in">UIImageResizingModeStretch</span>];</span><br><span class="line">[<span class="keyword">self</span>.textView setBackgroundImage:meBgNor forState:<span class="built_in">UIControlStateNormal</span>];</span><br></pre></td></tr></table></figure></li><li><p>背景气泡图</p> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UIImage *<span class="keyword">normal;</span></span><br><span class="line"><span class="keyword">if </span>(message.from == UUMessageFromMe) &#123;</span><br><span class="line">    <span class="keyword">normal </span>= [UIImage imageNamed:@<span class="string">"chatto_bg_normal"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">normal </span>= [<span class="keyword">normal </span>resizableImageWithCapInsets:UIEdgeInsetsMake(<span class="number">35</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">22</span>)]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    <span class="keyword">normal </span>= [UIImage imageNamed:@<span class="string">"chatfrom_bg_normal"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">normal </span>= [<span class="keyword">normal </span>resizableImageWithCapInsets:UIEdgeInsetsMake(<span class="number">35</span>, <span class="number">22</span>, <span class="number">10</span>, <span class="number">10</span>)]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">[self.<span class="keyword">btnContent </span>setBackgroundImage:<span class="keyword">normal </span>forState:UIControlStateNormal]<span class="comment">;</span></span><br><span class="line">[self.<span class="keyword">btnContent </span>setBackgroundImage:<span class="keyword">normal </span>forState:UIControlStateHighlighted]<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="12-collecton的长按编辑的代码实现"><a href="#12-collecton的长按编辑的代码实现" class="headerlink" title="12.collecton的长按编辑的代码实现"></a>12.collecton的长按编辑的代码实现</h3><ul><li><p>（1） 对collectionView的处理</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)handlelongGesture:(<span class="built_in">UILongPressGestureRecognizer</span> *)longGesture &#123;</span><br><span class="line"><span class="comment">//判断手势状态</span></span><br><span class="line"><span class="keyword">switch</span> (longGesture.state) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>: &#123;</span><br><span class="line">    <span class="comment">//判断手势落点位置是否在路径上</span></span><br><span class="line">    <span class="built_in">NSIndexPath</span> *indexPath = [<span class="keyword">self</span>.theCollectionView</span><br><span class="line">        indexPathForItemAtPoint:[longGesture</span><br><span class="line">                                    locationInView:<span class="keyword">self</span>.theCollectionView]];</span><br><span class="line">    <span class="keyword">if</span> (indexPath == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在路径上则开始移动该路径上的cell</span></span><br><span class="line">    [<span class="keyword">self</span>.theCollectionView</span><br><span class="line">        beginInteractiveMovementForItemAtIndexPath:indexPath];</span><br><span class="line">    &#125; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>:</span><br><span class="line">    <span class="comment">//移动过程当中随时更新cell位置</span></span><br><span class="line">    [<span class="keyword">self</span>.theCollectionView</span><br><span class="line">        updateInteractiveMovementTargetPosition:</span><br><span class="line">            [longGesture locationInView:<span class="keyword">self</span>.theCollectionView]];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:</span><br><span class="line">    <span class="comment">//移动结束后关闭cell移动</span></span><br><span class="line">    [<span class="keyword">self</span>.theCollectionView endInteractiveMovement];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    [<span class="keyword">self</span>.theCollectionView cancelInteractiveMovement];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(2) 代理方法能否编辑返回yes, </p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView</span><br><span class="line">canMoveItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(3) 对数据源数据的处理：</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">collectionView:</span>(UICollectionView *)collectionView</span><br><span class="line"><span class="string">moveItemAtIndexPath:</span>(NSIndexPath *)sourceIndexPath</span><br><span class="line"><span class="symbol">        toIndexPath:</span>(NSIndexPath *)destinationIndexPath &#123;</span><br><span class="line"><span class="comment">//取出源item数据</span></span><br><span class="line">id objc1 = [_titleMuarray <span class="string">objectAtIndex:</span>sourceIndexPath.row];</span><br><span class="line">id objc2 = [_imageNameMuarray <span class="string">objectAtIndex:</span>sourceIndexPath.row];</span><br><span class="line"><span class="comment">//从资源数组中移除该数据</span></span><br><span class="line">[_titleMuarray <span class="string">removeObject:</span>objc1];</span><br><span class="line">[_imageNameMuarray <span class="string">removeObject:</span>objc2];</span><br><span class="line"><span class="comment">//将数据插入到资源数组中的目标位置上</span></span><br><span class="line">[_titleMuarray <span class="string">insertObject:</span>objc1 <span class="string">atIndex:</span>destinationIndexPath.row];</span><br><span class="line">[_imageNameMuarray <span class="string">insertObject:</span>objc2 <span class="string">atIndex:</span>destinationIndexPath.row];</span><br><span class="line">WorkStore *workStoreInfomation1 = [WorkStore MR_findFirst];</span><br><span class="line">workStoreInfomation1.sortOrder = _titleMuarray;</span><br><span class="line">workStoreInfomation1.imageName = _imageNameMuarray;</span><br><span class="line">[[NSManagedObjectContext MR_defaultContext] MR_saveToPersistentStoreAndWait];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-项目中使用多个storyBoard之间的跳转"><a href="#13-项目中使用多个storyBoard之间的跳转" class="headerlink" title="13.项目中使用多个storyBoard之间的跳转"></a>13.项目中使用多个storyBoard之间的跳转</h3><ul><li><p>使用代码进行2个storyboard之间的跳转： 另外创建的storyboard的名字自己定义，之后在将要跳转的controller中取出storyboard，然后再取出其中需要的controller，进行跳转</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIStoryboard</span> *secondStroyBoard=[<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Storyboard2"</span> bundle:<span class="literal">nil</span>];    </span><br><span class="line"><span class="built_in">UIViewController</span> *test2obj=[secondStroyBoard instantiateViewControllerWithIdentifier:<span class="string">@"test2"</span>];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:test2obj animated:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li>如何从多个storyboard中取出控制器实例。不用管控制在哪个storyboard文件里，只要 控制器设置identifier为类名就OK。</li></ul><h3 id="14-NSAttributedString-h-中属性的定义，key"><a href="#14-NSAttributedString-h-中属性的定义，key" class="headerlink" title="14.NSAttributedString.h 中属性的定义，key"></a>14.NSAttributedString.h 中属性的定义，key</h3><ul><li><p>如何使用NSString在 drawInRect中居中</p></li><li><p>drewRect属性， withAttributes:参数是属性字典，该字典的key在NSAttributedString.h中获得，</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableParagraphStyle</span> style = [[<span class="built_in">NSMutableParagraphStyle</span> alloc] init];</span><br><span class="line">    [style setAlignment:<span class="built_in">UITextAlignmentCenter</span>];</span><br><span class="line">    style.lineBreakMode =<span class="built_in">NSLineBreakByCharWrapping</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> attr = @&#123;</span><br><span class="line">    <span class="built_in">NSParagraphStyleAttributeName</span>:style,  </span><br><span class="line">    <span class="built_in">NSFontAttributeName</span>: [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">10</span>], </span><br><span class="line">    <span class="built_in">NSForegroundColorAttributeName</span>:[<span class="built_in">UIColor</span> colorWithHexString:<span class="string">@"333333"</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>NSAttributedString.h 中属性的定义，key </p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">字符属性</span><br><span class="line">字符属性可以应用于 attributed string 的文本中。</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSFontAttributeName</span>;(字体)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSParagraphStyleAttributeName</span>;(段落)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSForegroundColorAttributeName</span>;(字体颜色)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSBackgroundColorAttributeName</span>;(字体背景色)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSLigatureAttributeName</span>;(连字符)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSKernAttributeName</span>;(字间距)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSStrikethroughStyleAttributeName</span>;(删除线)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSUnderlineStyleAttributeName</span>;(下划线)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSStrokeColorAttributeName</span>;(边线颜色)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSStrokeWidthAttributeName</span>;(边线宽度)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSShadowAttributeName</span>;(阴影)(横竖排版)</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">NSVerticalGlyphFormAttributeName</span>;</span><br></pre></td></tr></table></figure></li><li><p>详细解释</p> <figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">常量</span><br><span class="line"><span class="meta">1&gt; </span>NSFontAttributeName(字体)</span><br><span class="line">该属性所对应的值是一个 UIFont 对象。该属性用于改变一段文本的字体。如果不指定该属性，则默认为<span class="number">12</span>-point Helvetica(Neue)。</span><br><span class="line"></span><br><span class="line"><span class="meta">2&gt; </span>NSParagraphStyleAttributeName(段落)</span><br><span class="line">该属性所对应的值是一个 NSParagraphStyle 对象。该属性在一段文本上应用多个属性。如果不指定该属性，则默认为 NSParagraphStyle 的defaultParagraphStyle 方法返回的默认段落属性。</span><br><span class="line"></span><br><span class="line"><span class="meta">3&gt; </span>NSForegroundColorAttributeName(字体颜色)</span><br><span class="line">该属性所对应的值是一个 UIColor 对象。该属性用于指定一段文本的字体颜色。如果不指定该属性，则默认为黑色。</span><br><span class="line"></span><br><span class="line"><span class="meta">4&gt; </span>NSBackgroundColorAttributeName(字体背景色)</span><br><span class="line">该属性所对应的值是一个 UIColor 对象。该属性用于指定一段文本的背景颜色。如果不指定该属性，则默认无背景色。</span><br><span class="line"></span><br><span class="line"><span class="meta">5&gt; </span>NSLigatureAttributeName(连字符)</span><br><span class="line">该属性所对应的值是一个 NSNumber 对象(整数)。连体字符是指某些连在一起的字符，它们采用单个的图元符号。<span class="number">0</span> 表示没有连体字符。<span class="number">1</span> 表示使用默认的连体字符。<span class="number">2</span>表示使用所有连体符号。默认值为 <span class="number">1</span>（注意，iOS 不支持值为 <span class="number">2</span>）。</span><br><span class="line"></span><br><span class="line"><span class="meta">6&gt; </span>NSKernAttributeName(字间距)</span><br><span class="line">该属性所对应的值是一个 NSNumber 对象(整数)。字母紧排指定了用于调整字距的像素点数。字母紧排的效果依赖于字体。值为 <span class="number">0</span> 表示不使用字母紧排。默认值为<span class="number">0</span>。</span><br><span class="line"></span><br><span class="line"><span class="meta">7&gt; </span>NSStrikethroughStyleAttributeName(删除线)</span><br><span class="line">该属性所对应的值是一个 NSNumber 对象(整数)。该值指定是否在文字上加上删除线，该值参考“Underline Style Attributes”。默认值是NSUnderlineStyleNone。</span><br><span class="line"></span><br><span class="line"><span class="meta">8&gt; </span>NSUnderlineStyleAttributeName(下划线)</span><br><span class="line">该属性所对应的值是一个 NSNumber 对象(整数)。该值指定是否在文字上加上下划线，该值参考“Underline Style Attributes”。默认值是NSUnderlineStyleNone。</span><br><span class="line"></span><br><span class="line"><span class="meta">9&gt; </span>NSStrokeColorAttributeName(边线颜色)</span><br><span class="line">该属性所对应的值是一个 UIColor 对象。如果该属性不指定（默认），则等同于 NSForegroundColorAttributeName。否则，指定为删除线或下划线颜色。更多细节见“Drawing attributedstrings that are both filled and stroked”。</span><br><span class="line"></span><br><span class="line"><span class="meta">10&gt; </span>NSStrokeWidthAttributeName(边线宽度)</span><br><span class="line">该属性所对应的值是一个 NSNumber 对象(小数)。该值改变描边宽度（相对于字体size 的百分比）。默认为 <span class="number">0</span>，即不改变。正数只改变描边宽度。负数同时改变文字的描边和填充宽度。例如，对于常见的空心字，这个值通常为<span class="number">3.0</span>。</span><br><span class="line"></span><br><span class="line"><span class="meta">11&gt; </span>NSShadowAttributeName(阴影)</span><br><span class="line">该属性所对应的值是一个 NSShadow 对象。默认为 nil。</span><br><span class="line"></span><br><span class="line"><span class="meta">12&gt; </span>NSVerticalGlyphFormAttributeName(横竖排版)</span><br><span class="line">该属性所对应的值是一个 NSNumber 对象(整数)。<span class="number">0</span> 表示横排文本。<span class="number">1</span> 表示竖排文本。在 iOS 中，总是使用横排文本，<span class="number">0</span> 以外的值都未定义。</span><br></pre></td></tr></table></figure></li></ul><h3 id="15-清除所有的NSUserDefault"><a href="#15-清除所有的NSUserDefault" class="headerlink" title="15.清除所有的NSUserDefault"></a>15.清除所有的NSUserDefault</h3><ul><li><p>清除所有的NSUserDefault</p> <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)clearAllUserDefaultsData&#123;</span><br><span class="line">    NSString *appDomain = <span class="comment">[<span class="comment">[NSBundle mainBundle]</span> bundleIdentifier]</span>;</span><br><span class="line">    <span class="comment">[<span class="comment">[NSUserDefaults standardUserDefaults]</span> removePersistentDomainForName:appDomain]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="16-使用openURL实现程序间带参数跳转详解"><a href="#16-使用openURL实现程序间带参数跳转详解" class="headerlink" title="16.使用openURL实现程序间带参数跳转详解"></a>16.使用openURL实现程序间带参数跳转详解</h3><ul><li><p>(1) target -&gt; info -&gt; url scheme 添加URL</p></li><li><p>(2) 正常跳转</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"B://com.YouXianMing"</span>];</span><br><span class="line"><span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:url])&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"跳转并打开"</span>);</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"打开失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(3) 带参数跳转</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他应用的 URL Schemes --&gt; B</span></span><br><span class="line"><span class="comment">// 其他应用的 Identifier  --&gt; com.xinguan</span></span><br><span class="line"><span class="comment">// values?              --&gt; 要传递的参数,方便解析</span></span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:\</span><br><span class="line">                <span class="string">@"B://com.xinguan/values?username=WT&amp;password=123456&amp;callback=invoking"</span>];</span><br><span class="line"><span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:url])&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"跳转并打开"</span>);</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"打开失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(4) 接收到参数解析</p> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation&#123;</span><br><span class="line">    <span class="keyword">if</span> ([[url scheme] isEqualToString:<span class="string">@"B"</span>])&#123;</span><br><span class="line">        <span class="keyword">if</span> ([[url host] isEqualToString:<span class="string">@"com.xinguan"</span>])&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            query用法</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            The query string from the URL. </span></span><br><span class="line"><span class="comment">            If the receiver does not conform to RFC 1808, returns nil. For example, </span></span><br><span class="line"><span class="comment">            in the URL http://www.example.com/index.php?key1=value1&amp;key2=value2, </span></span><br><span class="line"><span class="comment">            the query string is key1=value1&amp;key2=value2.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="built_in">NSString</span> *query = [url query];</span><br><span class="line">            <span class="comment">// 分割&amp;</span></span><br><span class="line">            <span class="built_in">NSArray</span> *array = [query componentsSeparatedByString:<span class="string">@"&amp;"</span>];</span><br><span class="line">        <span class="comment">// 显示数据</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, array);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="17-在view上的window问题"><a href="#17-在view上的window问题" class="headerlink" title="17.在view上的window问题"></a>17.在view上的window问题</h3><ul><li><p>在view上的window问题：</p><ul><li>当在一个XIB上添加一个window，拖线出来，默认是显示的，就是不写任何代码，也是在当前窗口上覆盖，影响交互，</li><li><p>先设置hidden，后在<code>makeKeyAndVisible</code></p><img src="/2015/09/22/2015b/有用的UI组件/有用的UI组件3.png" width="400"></li></ul></li></ul><ul><li>当取消key window的时候，注意hidden调</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实用软件工具</title>
      <link href="/2015/09/22/2015b/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2015/09/22/2015b/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="1-突破百度网盘下载速度现在，使用-Aria2下载"><a href="#1-突破百度网盘下载速度现在，使用-Aria2下载" class="headerlink" title="1.突破百度网盘下载速度现在，使用 Aria2下载"></a>1.突破百度网盘下载速度现在，使用 <code>Aria2</code>下载</h3><ul><li><a href="https://www.jianshu.com/p/bb9490ea1c4d" target="_blank" rel="noopener">Aria2-不限速全平台下载利器</a></li><li><em>但是百度网盘账号会被限速 ，冲会员解除正常限制网速</em></li></ul><h3 id="2-Safari-预览，将网页转化为自定义尺寸-PDF"><a href="#2-Safari-预览，将网页转化为自定义尺寸-PDF" class="headerlink" title="2.Safari + 预览，将网页转化为自定义尺寸 PDF"></a>2.<a href="https://sspai.com/post/39132" target="_blank" rel="noopener">Safari + 预览，将网页转化为自定义尺寸 PDF</a></h3><h3 id="3-清除Xcode-缓存"><a href="#3-清除Xcode-缓存" class="headerlink" title="3.清除Xcode 缓存"></a>3.清除Xcode 缓存</h3><ul><li><p>删除模拟器运行缓存，找到Developer-&gt;Devices,打开后可以看到是哪个项目，自行决定删除</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span>Developer<span class="regexp">/Xcode/</span>CoreSimulator <span class="regexp">/Devices</span></span><br></pre></td></tr></table></figure></li><li><p>清除 Xcode 的打包数据缓存</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span>Developer<span class="regexp">/Xcode/</span>Archives</span><br></pre></td></tr></table></figure></li><li><p>清除 Xcode 支持的真机系统文件 每次连接新的真机，Xcode都会拷贝设备系统</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/Library/</span>Developer<span class="regexp">/Xcode/i</span>OS DeviceSupport</span><br></pre></td></tr></table></figure></li><li><p>删除Xcode运行缓存。不同版本会有不同的缓存，尽量删除不必要的。 <code>Xcode-&gt;DerivedData</code></p></li><li><p>路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Xcode证书路径：</span><br><span class="line"><span class="regexp">~/Library/</span>MobileDevice/Provisioning Profiles</span><br><span class="line"><span class="number">2.</span>Jenkines共享证书路径：</span><br><span class="line"><span class="regexp">/用户/</span>共享<span class="regexp">/Jenkins/</span>Library<span class="regexp">/MobileDevice/</span>Provisioning Profiles</span><br><span class="line"><span class="number">3.</span>Xcode编译项目缓存垃圾的目录：</span><br><span class="line"><span class="regexp">~/Library/</span>Developer<span class="regexp">/Xcode/</span>DerivedData</span><br><span class="line"><span class="number">4.</span>Xcode PCH 根文件路径：</span><br><span class="line">$(PROJECT_DIR)<span class="regexp">/$(PROJECT_NAME)/</span></span><br><span class="line"><span class="number">5.</span>Xcode插件路径：</span><br><span class="line"><span class="regexp">~/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins -name</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-表格优化模拟器技巧"><a href="#4-表格优化模拟器技巧" class="headerlink" title="4.表格优化模拟器技巧"></a>4.表格优化模拟器技巧</h3><ul><li><p>1).代码评审</p><ul><li>代码评审工具phabricator 评审之后上传SVN 或git</li></ul></li><li><p>2).awakefromnib 中布局，子视图还没有bounds，取宽度为0</p></li><li><p>3).图像的优化，设置圆角的优化</p><ul><li>模拟器技巧 </li><li><p>使用 color Misaligned Images  <strong>对齐</strong> 如果图片拉伸使用CPU 拉伸图片，如果显示黄色，是拉伸的，需要编程绿色，或者不变色</p><img src="/2015/09/22/2015b/实用软件工具/实用工具1.png" width="200" height="50"></li><li><p>使用Color Blended Layers <strong>混合</strong> </p><img src="/2015/09/22/2015b/实用软件工具/实用工具2.png" width="200" height="50"></li></ul></li><li><p>4).模拟器常用性能测试工具</p><img src="/2015/09/22/2015b/实用软件工具/实用工具3.png" width="200" height="50"></li></ul><h3 id="5-表格视图优化"><a href="#5-表格视图优化" class="headerlink" title="5.表格视图优化"></a>5.表格视图优化</h3><ul><li><p><strong>缓存行高</strong>，是解决性能的最佳途径，</p></li><li><p>尽量少计算，所需要的素材是提前计算好，使用ViewModel中计算，再赋值给cell</p></li><li><p>控件上不要设置圆角半径，所有图像渲染的属性，都要注意</p></li><li><p>不要动态创建控件，所需要的控件，都要提前准备好，在显示的时候，根据数据隐藏</p></li><li><p>cell 中的控件曾是越少越好，数量越少越好</p></li><li><p>离屏渲染 ,需要在CPU和GPU之间快速切换，耗电增加</p><ul><li>layer 异步加载，<code>self.layer.drawsAsynchronously = true</code></li></ul></li><li><p>栅格化</p><ul><li><p>异步绘制的时候会生成一张独立的图像，滚动的是一张图像，停下来会切换CPU，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self<span class="selector-class">.layer</span><span class="selector-class">.shouldRasterize</span> = true</span><br><span class="line">self<span class="selector-class">.layer</span><span class="selector-class">.rasterizationScale</span> = UIScreen.main().scale</span><br></pre></td></tr></table></figure><img src="/2015/09/22/2015b/实用软件工具/表格视图优化1.png" width="200" height="50"><img src="/2015/09/22/2015b/实用软件工具/表格视图优化2.png" width="200" height="50"><img src="/2015/09/22/2015b/实用软件工具/表格视图优化3.png" width="200" height="50"></li></ul></li></ul><h3 id="6-使用instrument-工具分析"><a href="#6-使用instrument-工具分析" class="headerlink" title="6.使用instrument 工具分析"></a>6.使用instrument 工具分析</h3><ul><li>Leaks  找到引发内存泄漏的起点</li><li>Core Animation 测试核心动画屏幕刷新帧率</li><li>time Profiler 分析代码的执行时间，找出导致程序变慢原因</li><li>Allocation 监测内存使用／分配情况</li><li><p>Zombiles 僵尸对象，（MRC 开发必备）</p><img src="/2015/09/22/2015b/实用软件工具/表格视图优化4.png" width="200" height="50"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>有用的开发记录&lt;1&gt;</title>
      <link href="/2015/09/21/2015b/%E6%9C%89%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%3C1%3E/"/>
      <url>/2015/09/21/2015b/%E6%9C%89%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%3C1%3E/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字符串GB2312编码"><a href="#1-字符串GB2312编码" class="headerlink" title="1.字符串GB2312编码"></a>1.字符串GB2312编码</h4><ul><li><p>字符串GB2312编码</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *arrr = <span class="string">@"测试"</span>;</span><br><span class="line"><span class="built_in">NSStringEncoding</span> gbkEncoding =<span class="built_in">CFStringConvertEncodingToNSStringEncoding</span>(kCFStringEncodingGB_18030_2000);</span><br><span class="line"><span class="built_in">NSData</span> *adata = [arrr dataUsingEncoding:gbkEncoding];</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-UIView独占响应事件"><a href="#2-UIView独占响应事件" class="headerlink" title="2.UIView独占响应事件"></a>2.UIView独占响应事件</h4><ul><li><p>一个布尔值,用来标示一个view独占触摸事件. 当把一个view中的exclusiveTouch设置成YES时,会致使这个window屏蔽掉其他的view触发响应事件.默认值是NO.</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">_button1.exclusiveTouch</span> <span class="string">=</span> <span class="literal">YES</span><span class="string">;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-设置导航栏"><a href="#3-设置导航栏" class="headerlink" title="3.设置导航栏"></a>3.设置导航栏</h4><ul><li><p>设置隐藏导航栏</p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">viewWillAppear:</span>(BOOL)animated &#123;</span><br><span class="line">[<span class="keyword">super</span> <span class="string">viewWillAppear:</span>animated]; </span><br><span class="line">[self.navigationController <span class="string">setNavigationBarHidden:</span>YES <span class="string">animated:</span>YES]; </span><br><span class="line">&#125; </span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">viewWillDisappear:</span>(BOOL)animated &#123;</span><br><span class="line">[<span class="keyword">super</span> <span class="string">viewWillDisappear:</span>animated]; </span><br><span class="line">[self.navigationController <span class="string">setNavigationBarHidden:</span>NO <span class="string">animated:</span>YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置导航栏为白色：</p><ul><li><p>在plist中设置 <code>View controller-based status bar appearance</code></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、plist View controller-<span class="keyword">based </span>status <span class="keyword">bar </span>appearance 设置为 NO</span><br></pre></td></tr></table></figure></li><li><p>在appdelegate 代码设置</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[UIApplication <span class="keyword">sharedApplication].statusBarStyle </span>= UIStatusBarStyleLightContent<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-OC中block作为函数参数传递"><a href="#4-OC中block作为函数参数传递" class="headerlink" title="4.OC中block作为函数参数传递"></a>4.OC中block作为函数参数传递</h4><ul><li>使用枚举 <code>typedef void (^OnFoolCallback)(NSString *name);</code></li><li><p>定义方法 <code>- (void)productFool:(OnFoolCallback)callback;</code></p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^OnFoolCallback)(<span class="built_in">NSString</span> *name);  </span><br><span class="line">- (<span class="keyword">void</span>)productFool:(OnFoolCallback)callback;  </span><br><span class="line">    </span><br><span class="line">[fb productFool:^(<span class="built_in">NSString</span> *name) &#123;  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"name = %@"</span>, name);  </span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-collectionView的section刷新的时候有动画会闪一下解决"><a href="#4-collectionView的section刷新的时候有动画会闪一下解决" class="headerlink" title="4.collectionView的section刷新的时候有动画会闪一下解决"></a>4.collectionView的section刷新的时候有动画会闪一下解决</h4><ul><li>解决办法：停止动画：  <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">UIView</span> setAnimationsEnabled:NO]<span class="comment">;</span></span><br><span class="line">[<span class="name">self.homeCollectionView</span> performBatchUpdates:^&#123;</span><br><span class="line">    [<span class="name">self.homeCollectionView</span> reloadSections:[<span class="name">NSIndexSet</span> indexSetWithIndex:index]]<span class="comment">;</span></span><br><span class="line">&#125; completion:^(<span class="name">BOOL</span> finished) &#123;</span><br><span class="line">     [<span class="name">UIView</span> setAnimationsEnabled:YES]<span class="comment">;</span></span><br><span class="line"> &#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-控制数据越界崩溃"><a href="#5-控制数据越界崩溃" class="headerlink" title="5.控制数据越界崩溃"></a>5.控制数据越界崩溃</h4><ul><li><p>数组越界控制</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+(<span class="keyword">void</span>)load&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        SEL safeSel=<span class="keyword">@selector</span>(safeObjectAtIndex:);</span><br><span class="line">        SEL unsafeSel=<span class="keyword">@selector</span>(objectAtIndex:);</span><br><span class="line">        Class myClass = <span class="built_in">NSClassFromString</span>(<span class="string">@"__NSArrayI"</span>);</span><br><span class="line">        Method safeMethod=class_getInstanceMethod (myClass, safeSel);</span><br><span class="line">        Method unsafeMethod=class_getInstanceMethod (myClass, unsafeSel);</span><br><span class="line">        Method_exchangeImplementations(unsafeMethod, safeMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">id</span>)safeObjectAtIndex:(<span class="built_in">NSUInteger</span>)index&#123;</span><br><span class="line">    <span class="keyword">if</span> (index&gt;(<span class="keyword">self</span>.count<span class="number">-1</span>)) &#123;</span><br><span class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"beyond the boundary"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> safeObjectAtIndex:index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-Pt与Px-相互转换关系"><a href="#6-Pt与Px-相互转换关系" class="headerlink" title="6.Pt与Px 相互转换关系"></a>6.Pt与Px 相互转换关系</h4><ul><li>Pt与Px  相互转换关系。<code>Pt＝（Px／96.0)＊72.0   Pixel   Point</code></li></ul><h4 id="7-设置声音静音：soundname-推送通知禁止声音"><a href="#7-设置声音静音：soundname-推送通知禁止声音" class="headerlink" title="7.设置声音静音：soundname 推送通知禁止声音"></a>7.设置声音静音：soundname 推送通知禁止声音</h4><ul><li>设置声音静音：soundname ，震动也是一个souond：<code>kSystemSoundID_Vibrate</code></li><li><p>后台的代码设置推送内容</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PushNotificationPayload</span> payLoad =  <span class="type">PushNotificationPayload</span>.fromJSON(message);  </span><br><span class="line">payLoad.addAlert(<span class="string">"iphone推送测试 www.baidu.com"</span>); <span class="comment">// 消息内容           </span></span><br><span class="line">payLoad.addBadge(<span class="built_in">count</span>); <span class="comment">// iphone应用图标上小红圈上的数值   </span></span><br><span class="line">payLoad.addSound(<span class="string">"default"</span>); <span class="comment">// 铃音 默认</span></span><br></pre></td></tr></table></figure></li><li><p>2:程序内代码</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;AudioToolbox/AudioToolbox.h&gt;</span> </span></span><br><span class="line">AudioServicesPlaySystemSound(kSystemSoundID_Vibrate); </span><br><span class="line">AudioServicesPlaySystemSound(<span class="number">1007</span>);其中<span class="number">1007</span>是系统声音的编号，其他的可用编号：</span><br><span class="line"></span><br><span class="line"><span class="comment">//音效文件路径  </span></span><br><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"message"</span> ofType:<span class="string">@"wav"</span>]; </span><br><span class="line"><span class="comment">//组装并播放音效  </span></span><br><span class="line">SystemSoundID soundID; </span><br><span class="line"><span class="built_in">NSURL</span> *filePath = [<span class="built_in">NSURL</span> fileURLWithPath:path isDirectory:<span class="literal">NO</span>]; </span><br><span class="line">AudioServicesCreateSystemSoundID((__bridge <span class="built_in">CFURLRef</span>)filePath, &amp;soundID); </span><br><span class="line">AudioServicesPlaySystemSound(soundID); </span><br><span class="line"><span class="comment">//声音停止  </span></span><br><span class="line">AudioServicesDisposeSystemSoundID(soundID);</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-编辑键盘问题-gt-键盘下缩"><a href="#8-编辑键盘问题-gt-键盘下缩" class="headerlink" title="8.编辑键盘问题-&gt;键盘下缩"></a>8.编辑键盘问题-&gt;键盘下缩</h4><ul><li><p>有键盘，点击保存，或者编辑等时候点击键盘下缩，出现如下bug</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“[App] <span class="keyword">if</span> we<span class="string">'re in the real pre-commit handler we can'</span>t actually <span class="built_in">add</span> <span class="keyword">any</span> <span class="built_in">new</span> fences due <span class="built_in">to</span> CA restriction”</span><br></pre></td></tr></table></figure></li><li><p>解决办法： <code>[self layoutSubviews]</code>;</p></li></ul><h4 id="9-UI-View相对位置"><a href="#9-UI-View相对位置" class="headerlink" title="9.UI View相对位置"></a>9.UI View相对位置</h4><ul><li><p>获取点击事件的点相对于屏幕的位置</p><ul><li><p>如果点击事件是如下这个方法（将UIEvent当做参数传回来）</p>   <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)<span class="string">expandButtonClicked:</span>(id)sender <span class="string">withEvent:</span>(UIEvent*)event</span><br><span class="line">那么点击的位置相对于屏幕的坐标就是：</span><br><span class="line">UITouch* touch = [[event <span class="string">touchesForView:</span>btn] anyObject];</span><br><span class="line">CGPoint rootViewLocation = [touch <span class="string">locationInView:</span>[FtAppDelegate shareAppDelegate].rootViewCtrl.view];</span><br></pre></td></tr></table></figure></li><li><p>如果想知道一个view相对于屏幕或者另外一个view 的坐标，那么可以通过如下的方法得到： </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIWindow * window=[[[UIApplication <span class="keyword">sharedApplication] </span>delegate] window]<span class="comment">;</span></span><br><span class="line">CGRect rect=[<span class="keyword">bView </span>convertRect: <span class="keyword">bView.bounds </span>toView:window]<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="10-UI-View-移除子视图"><a href="#10-UI-View-移除子视图" class="headerlink" title="10.UI View 移除子视图"></a>10.UI View 移除子视图</h4><ul><li>移除所有子视图，无需循环只需要一句代码  <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">view.subviews</span> makeObjectsPerformSelector:@selector(<span class="name">removeFromSuperview</span>)]<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="11-虚拟机安装之后隔一段时间不能实用了修复-VirtualBox"><a href="#11-虚拟机安装之后隔一段时间不能实用了修复-VirtualBox" class="headerlink" title="11.虚拟机安装之后隔一段时间不能实用了修复 VirtualBox"></a>11.虚拟机安装之后隔一段时间不能实用了修复 <code>VirtualBox</code></h4><ul><li><p>打开虚拟机，报如下错误</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shjyytxnj </span><br><span class="line">Implementation <span class="keyword">of</span> <span class="keyword">the</span> USB <span class="number">2.0</span> controller <span class="keyword">not</span> found!</span><br><span class="line"></span><br><span class="line">Because <span class="keyword">the</span> USB <span class="number">2.0</span> controller state is part <span class="keyword">of</span> <span class="keyword">the</span> saved VM state, <span class="keyword">the</span> VM cannot be started. To fix this problem, either install <span class="keyword">the</span> <span class="string">'Oracle VM VirtualBox Extension Pack'</span> <span class="keyword">or</span> disable USB <span class="number">2.0</span> support <span class="keyword">in</span> <span class="keyword">the</span> VM settings.</span><br><span class="line"></span><br><span class="line">Note! This error could also mean that <span class="keyword">an</span> incompatible <span class="built_in">version</span> <span class="keyword">of</span> <span class="keyword">the</span> <span class="string">'Oracle VM VirtualBox Extension Pack'</span> is installed (VERR_NOT_FOUND).</span><br></pre></td></tr></table></figure></li><li><p>安装了不兼容版本的“Oracle VM VirtualBox Extension Pack” </p> <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">重新下载 最新版的</span><br><span class="line">（<span class="number">1</span>）VirtualBox <span class="number">5.1</span>.<span class="number">12</span> <span class="keyword">platform</span> packages.\</span><br><span class="line">（<span class="number">2</span>）VirtualBox <span class="number">5.1</span>.<span class="number">12</span> Oracle VM VirtualBox <span class="keyword">Extension</span> Pack  https:<span class="comment">//www.virtualbox.org/wiki/Downloads</span></span><br><span class="line">找到相匹配的版本和插件 重新札幌</span><br></pre></td></tr></table></figure></li></ul><h4 id="12-设置textField-的placeholder的颜色"><a href="#12-设置textField-的placeholder的颜色" class="headerlink" title="12.设置textField 的placeholder的颜色"></a>12.设置textField 的placeholder的颜色</h4><ul><li>设置textField 的placeholder的颜色  <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">self.searchtextField</span> setValue:RGB(<span class="name">156</span>, <span class="number">86</span>, <span class="number">49</span>) forKeyPath:@<span class="string">"_placeholderLabel.textColor"</span>]<span class="comment">;</span></span><br><span class="line">[<span class="name">self.searchtextField</span> setValue:[<span class="name">UIFont</span> boldSystemFontOfSize:14] forKeyPath:@<span class="string">"_placeholderLabel.font"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="13-navbarhiddern-消失之后的显示隐藏的缺一部分bug"><a href="#13-navbarhiddern-消失之后的显示隐藏的缺一部分bug" class="headerlink" title="13.navbarhiddern ,消失之后的显示隐藏的缺一部分bug,"></a>13.navbarhiddern ,消失之后的显示隐藏的缺一部分bug,</h4><ul><li>Hidden动画问题   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> closeNavBarAnimating;</span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(chageBool:)</span><br><span class="line">                                                name:<span class="string">@"closeBarAnimationing"</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.closeNavBarAnimating) &#123;</span><br><span class="line">        animated = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">YES</span> animated:animated];</span><br><span class="line">｝</span><br><span class="line">-(<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">NO</span> animated:animated];</span><br><span class="line">    <span class="keyword">self</span>.closeNavBarAnimating = <span class="literal">NO</span>;    </span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)chageBool:(<span class="keyword">id</span>)sedner&#123;</span><br><span class="line">    <span class="keyword">self</span>.closeNavBarAnimating = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="14-APP启动GIF动画"><a href="#14-APP启动GIF动画" class="headerlink" title="14.APP启动GIF动画"></a>14.APP启动GIF动画</h4><ul><li>UIImageView和UIImage都不支持GIF动画，使用UIWebView 加载GIF启动动画  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIWebView</span> *webViewBG;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *regBtn;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *loginBtn;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span> </span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化UIWebView对象，添加GIF文件</span></span><br><span class="line">    <span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"bg"</span> ofType:<span class="string">@"gif"</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *gif =[<span class="built_in">NSData</span> dataWithContentsOfFile:filePath];</span><br><span class="line">    [<span class="keyword">self</span>.webViewBG loadData:gif MIMEType:<span class="string">@"image/gif"</span> textEncodingName:<span class="literal">nil</span> baseURL:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">self</span>.webViewBG.userInteractionEnabled = <span class="literal">NO</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个灰色的蒙版，提升效果（可选）</span></span><br><span class="line">    <span class="built_in">UIView</span> *filter = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">    filter.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">    filter.alpha = <span class="number">0.5</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:filter];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改登录按钮和注册按钮的显示层级</span></span><br><span class="line">    [<span class="keyword">self</span>.view bringSubviewToFront:<span class="keyword">self</span>.loginBtn];</span><br><span class="line">    [<span class="keyword">self</span>.view bringSubviewToFront:<span class="keyword">self</span>.regBtn];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="15-QQ聊天气泡样式界面"><a href="#15-QQ聊天气泡样式界面" class="headerlink" title="15.QQ聊天气泡样式界面"></a>15.QQ聊天气泡样式界面</h4><ul><li><p>定义枚举区别是自己还是别人</p>  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    WPMessageTypeMe=<span class="number">0</span>,</span><br><span class="line">    WPMessageTypeOther=<span class="number">1</span></span><br><span class="line">&#125;WPMessageType;</span><br></pre></td></tr></table></figure></li><li><p>计算一段文字所占据的宽和高</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGSize</span> textMaxSize=<span class="built_in">CGSizeMake</span>(<span class="number">200</span>, MAXFLOAT);</span><br><span class="line"><span class="built_in">NSDictionary</span> *attr1=@&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14</span>]&#125;;</span><br><span class="line"><span class="built_in">CGSize</span> textSize=[message.text boundingRectWithSize:textMaxSize options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span> attributes:attr1 context:<span class="literal">nil</span>].size;</span><br></pre></td></tr></table></figure></li><li><p>把一张小的图片做背景保持四周不变，拉伸中间，则用如下属性。UIEdgeInsets是拉伸的区域，一般取最中间的一个点</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *meBgNor=[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"chat_send_nor"</span>];</span><br><span class="line"><span class="built_in">UIEdgeInsets</span> edge1=<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">28</span>, <span class="number">32</span>, <span class="number">28</span>, <span class="number">32</span>);</span><br><span class="line">meBgNor=[meBgNor resizableImageWithCapInsets:edge1 resizingMode:<span class="built_in">UIImageResizingModeStretch</span>];</span><br><span class="line">[<span class="keyword">self</span>.textView setBackgroundImage:meBgNor forState:<span class="built_in">UIControlStateNormal</span>];</span><br></pre></td></tr></table></figure></li><li><p>监听键盘的弹出隐藏</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter]addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(changeFrame:) name:<span class="built_in">UIKeyboardDidChangeFrameNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">-(<span class="keyword">void</span>)changeFrame:(<span class="built_in">NSNotification</span> *)note&#123;</span><br><span class="line">    <span class="keyword">self</span>.view.superview.backgroundColor=[<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.9</span> green:<span class="number">0.9</span> blue:<span class="number">0.9</span> alpha:<span class="number">0.9</span>];</span><br><span class="line">    <span class="built_in">CGFloat</span> duration=[note.userInfo[<span class="built_in">UIKeyboardAnimationDurationUserInfoKey</span>] doubleValue];</span><br><span class="line">    <span class="built_in">CGFloat</span> keyboardY=[note.userInfo[<span class="built_in">UIKeyboardFrameEndUserInfoKey</span>] <span class="built_in">CGRectValue</span>].origin.y;</span><br><span class="line">    <span class="built_in">CGFloat</span> screenH=[<span class="built_in">UIScreen</span> mainScreen].bounds.size.height;</span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration animations:^&#123;</span><br><span class="line">        <span class="keyword">self</span>.view.transform=<span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>, keyboardY-screenH);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入框不是键盘的inputView没有键盘的时候也是悬浮在视图上，弹出键盘的时候控制view的frame就行，底部对齐</p></li><li>lable自适应  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">label</span>.<span class="bash">adjustsFontSizeToFitWidth = YES;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="16-使用CAShapeLayer实现一个音量大小动态改变的控件-类似微信的语音"><a href="#16-使用CAShapeLayer实现一个音量大小动态改变的控件-类似微信的语音" class="headerlink" title="16.使用CAShapeLayer实现一个音量大小动态改变的控件  类似微信的语音"></a>16.使用CAShapeLayer实现一个音量大小动态改变的控件  类似微信的语音</h4><ul><li>思路，外界轮廓是有圆角的图像类似椭圆，layer是个矩形，maskToBounds 为yes,</li><li>_dynamicView 表示外部轮廓的View。  _indicateLayer 表示内容动态显示的Layer  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)refreshUIWithVoicePower : (<span class="built_in">NSInteger</span>)voicePower&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> height = (voicePower)*(<span class="built_in">CGRectGetHeight</span>(_dynamicView.frame)/TOTAL_NUM);</span><br><span class="line">    [_indicateLayer removeFromSuperlayer];</span><br><span class="line">    _indicateLayer = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="built_in">CGRectGetHeight</span>(_dynamicView.frame)-height, <span class="built_in">CGRectGetWidth</span>(_dynamicView.frame), height) cornerRadius:<span class="number">0</span>];</span><br><span class="line">    _indicateLayer = [<span class="built_in">CAShapeLayer</span> layer];</span><br><span class="line">    _indicateLayer.path = path.CGPath;</span><br><span class="line">    _indicateLayer.fillColor = [<span class="built_in">UIColor</span> whiteColor].CGColor;</span><br><span class="line">    [_dynamicView.layer addSublayer:_indicateLayer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="17-比较UIimageView的image是哪张图片"><a href="#17-比较UIimageView的image是哪张图片" class="headerlink" title="17.比较UIimageView的image是哪张图片"></a>17.比较UIimageView的image是哪张图片</h4><ul><li>实现手势引导页根据图片名字的不通切换下一张，最后一张的时候移除UIimageView  </li><li>根据imageData判断是哪一个图片，也可以为imageView增加tag   <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSData</span> *data = <span class="built_in">UIImagePNGRepresentation</span>(<span class="keyword">self</span>.guidImageView.image);</span><br><span class="line">    <span class="built_in">NSData</span> *data1 = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"home_bj_yd1"</span>]);</span><br><span class="line">    <span class="built_in">NSData</span> *data2 = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"home_bj_yd2"</span>]);</span><br><span class="line">    <span class="built_in">NSData</span> *data3 = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"home_bj_yd3"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( [data isEqual:data1]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.guidImageView.image=[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"home_bj_yd2"</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="18-APP开发注意的手机尺寸"><a href="#18-APP开发注意的手机尺寸" class="headerlink" title="18.APP开发注意的手机尺寸"></a>18.APP开发注意的手机尺寸</h4><ul><li>启动页 尺寸</li><li>引导页尺寸</li><li>AppStore商店的介绍图尺寸  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name: %@"</span>, [[<span class="built_in">UIDevice</span> currentDevice] name]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"systemName: %@"</span>, [[<span class="built_in">UIDevice</span> currentDevice] systemName]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"systemVersion: %@"</span>, [[<span class="built_in">UIDevice</span> currentDevice] systemVersion]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"model: %@"</span>, [[<span class="built_in">UIDevice</span> currentDevice] model]);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"localizedModel: %@"</span>, [[<span class="built_in">UIDevice</span> currentDevice] localizedModel]);</span><br></pre></td></tr></table></figure></li></ul><h4 id="19-点击顶部通知消息报错："><a href="#19-点击顶部通知消息报错：" class="headerlink" title="19.点击顶部通知消息报错："></a>19.点击顶部通知消息报错：</h4><ul><li>在点击事件中，如果我们不写completionHandler（）这个方法，可能会报一下的错误，希望大家注意下~  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Warning: UNUserNotificationCenter delegate received <span class="keyword">call</span> <span class="keyword">to</span> -</span><br><span class="line">userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler: but the completion <span class="keyword">handler</span> was <span class="keyword">never</span> called.</span><br><span class="line"></span><br><span class="line"><span class="number">2017</span><span class="number">-01</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">00</span>:<span class="number">36.045772</span> JYYinYongBao[<span class="number">1006</span>:<span class="number">326459</span>] <span class="keyword">Warning</span>: UNUserNotificationCenter <span class="keyword">delegate</span> received <span class="keyword">call</span> <span class="keyword">to</span> -userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler: but the completion <span class="keyword">handler</span> was <span class="keyword">never</span> called.</span><br></pre></td></tr></table></figure></li></ul><h4 id="20-Xcode-文件夹-文件夹拖拽注意点"><a href="#20-Xcode-文件夹-文件夹拖拽注意点" class="headerlink" title="20.Xcode 文件夹 文件夹拖拽注意点"></a>20.Xcode 文件夹 文件夹拖拽注意点</h4><ul><li>黄色的文件夹，打包的时候，不会建立目录，主要保存程序文件<ul><li>素材不允许重名</li></ul></li><li>蓝色的文件夹，打包的时候，会建立目录，可以分目录的存储素材文件<ul><li>素材可以重名</li><li>游戏的场景，background.png 【草地／雪地／高山／坟墓】</li><li>手机应用的皮肤，／白天／夜间模式</li><li>切记：不能把程序文件放在蓝色文件夹内，程序会暴漏`</li></ul></li><li>Bundle：<ul><li>通常在第三方框架素材</li><li>可以按照黄色文件夹的方式拖拽，同时保留目录结构</li><li>可以避免文件重名</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试题《二》</title>
      <link href="/2015/09/21/2015b/%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
      <url>/2015/09/21/2015b/%E9%9D%A2%E8%AF%95%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一个区分度很大的面试题</p></li><li><p>考察一个面试者基础咋样，基本上问一个 @property 就够了：</p><ul><li>1.@property 后面可以有哪些修饰符？</li><li>2.什么情况使用 weak 关键字，相比 assign 有什么不同？</li><li>3.怎么用 copy 关键字？</li><li>4.这个写法会出什么问题： @property (copy) NSMutableArray *array;</li><li>5.如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</li></ul></li><li><p>这一套问题区分度比较大，如果上面的问题都能回答正确，可以延伸问更深入点的：</p><ul><li>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</li><li>@protocol 和 category 中如何使用 @property</li><li>runtime 如何实现 weak 属性</li></ul></li></ul><blockquote><p>每个人擅长的领域不一样，我们一般会从简历上找自己写擅长的技术聊，假如自己并不是很熟，最好别写出来或扯出来，万一面试官刚好非常精通这里就露馅了。</p></blockquote><blockquote><p>总结过些面试题，没坚持下去，后来把这些当 checklist，面试的时候实在没话聊的时候做个提醒，语言、框架、运行机制性质的：</p></blockquote><ul><li>@property中有哪些属性关键字？</li><li>weak属性需要在dealloc中置nil么？</li><li>@synthesize和@dynamic分别有什么作用？</li><li>ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？</li><li>用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</li><li>@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？</li><li>在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？</li><li>objc中向一个nil对象发送消息将会发生什么？</li><li>objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？</li><li>什么时候会报unrecognized selector的异常？</li><li>一个objc对象如何进行内存布局？（考虑有父类的情况）</li><li>一个objc对象的isa的指针指向什么？有什么作用？</li></ul><blockquote><p>runtime | runloop</p></blockquote><ul><li>runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）<ul><li>使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？</li></ul></li><li>objc中的类方法和实例方法有什么本质区别和联系？<ul><li>_objc_msgForward函数是做什么的，直接调用它将会发生什么？</li><li>runtime如何实现weak变量的自动置nil？</li><li>能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</li><li>runloop和线程有什么关系？</li><li>runloop的mode作用是什么？</li><li>以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？</li><li>猜想runloop内部是如何实现的？</li><li>objc使用什么机制管理对象内存？</li><li>ARC通过什么方式帮助开发者管理内存？</li><li>不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）</li><li>BAD_ACCESS在什么情况下出现？</li><li>苹果是如何实现autoreleasepool的？</li><li>使用block时什么情况会发生引用循环，如何解决？</li><li>在block内如何修改block外部变量？</li><li>使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</li><li>GCD的队列（dispatch_queue_t）分哪两种类型？</li><li>如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）</li><li>dispatch_barrier_async的作用是什么？</li><li>苹果为什么要废弃dispatch_get_current_queue？</li><li>以下代码运行结果如何？</li></ul></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad&#123;</span><br><span class="line">    [super viewDidLoad]<span class="comment">; </span></span><br><span class="line">     NSLog(@<span class="string">"1"</span>)<span class="comment">;   </span></span><br><span class="line">      <span class="keyword">dispatch_sync(dispatch_get_main_queue(),^&#123; </span></span><br><span class="line">         NSLog(@<span class="string">"2"</span>)<span class="comment">;</span></span><br><span class="line">      &#125;)<span class="comment">;</span></span><br><span class="line">       NSLog(@<span class="string">"3"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？</li><li>如何手动触发一个value的KVO</li><li>若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？</li><li>KVC的keyPath中的集合运算符如何使用？</li><li>KVC和KVO的keyPath一定是属性么？</li><li>如何关闭默认的KVO的默认实现，并进入自定义的KVO实现？</li><li>apple用什么方式实现对一个对象的KVO？</li><li>IBOutlet连出来的视图属性为什么可以被设置成weak?</li><li>IB中User Defined Runtime Attributes如何使用？</li><li>如何调试BAD_ACCESS错误</li><li>lldb（gdb）常用的调试命令？</li></ul><blockquote><p>这些小题可以做为讨论的入口，根据面试者的回答再继续聊下去。其中一些题比较底层，是留给屌屌的面试者或者试探评级用的，一般情况并不是重点的考察内容。</p></blockquote><ul><li>业务能力</li></ul><blockquote><p>毕竟平常的工作内容不是 runtime、runloop，不怎么会用到底层的黑魔法，80% 的时间都是和搭建页面、写业务逻辑、网络请求打交道。<br>要求面试者能够熟练构建 UI，我会找一个面试者做过的页面让他分析下页面结构、约束或者 frame 布局的连法和计算方法；有时也会让面试者说说 UITableView 常用的几个 delegate 和 data source 代理方法，动态 Cell 高度计算什么的；接下来，在手机里随便找一个 App 的页面，让面试者当场说说如果是他写应该用哪些 UI 组件和布局方式等。问几个问题后就能大概了解业务能力了，我们这边重度使用 IB 和 AutoLayout，假如面试者依然使用代码码 UI 也到没关系，有“从良”意愿就很好~</p></blockquote><blockquote><p>程序架构和一些设计模式如果面试者自己觉得还不错的话也会聊聊，但跪求别说 Singleton 了，用的越多对水平就越表示怀疑。对设计模式自信的我一般问一个问题，抽象工厂模式在 Cocoa SDK 中哪些类中体现？<br>架构上 MVC 还是 MVVM 还是 MVP 神马的到是可以聊聊各自的见解，反正也没有正确答案，只要别搞的太离谱就行，比如有的人说网络请求和数据库的操作最好放到 UIView 的子类里面干。</p></blockquote><blockquote><p>网络请求、数据库等各家都有成熟的封装，基本知道咋用就行。除此之外，我们还会顺带的问下除了 iOS 开发外，还会什么其他编程语言、或者熟悉哪种脚本语言和 Terminal 操作等，甚至还问问是如何翻墙- -，相信这些技能都是很重要的。</p></blockquote><ul><li>性格</li></ul><blockquote><p>大家都是写程序的，没啥必要用奇怪的、很难的问题难为对方，更关键的还是性格，和 Team 的风格是不是和的来。一个心态良好的面试者需要有个平常心，不傲娇也不跪舔，表达要正常，经常遇到问一个问题后一两分钟一直处于沉思状态，一句话不说，交流像挤牙膏一样，很是憋屈；还有非常屌屌的，明明不懂仍然强行据理力争，镇得住面试官也罢，撞枪口上就别怪不客气了- - 。决定要不要一个人基本上聊 5 分钟就可以确定了，喜欢水到渠成的感觉，看对眼了挡都挡不住。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试题《一》</title>
      <link href="/2015/08/21/2015b/%E9%9D%A2%E8%AF%95%E9%A2%981/"/>
      <url>/2015/08/21/2015b/%E9%9D%A2%E8%AF%95%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章来自转载<br>上面的答案都比较“抽象”，下面是我面试iOS程序员的问题列表（私人珍藏），能准确答对一半以上的人非常少（其实这些问题真的不难）。。有兴趣的可以试试。。</p></blockquote><ol><li>什么是arc？（arc是为了解决什么问题诞生的？）</li><li>请解释以下keywords的区别： assign vs weak,   <strong>block vs </strong>weak</li><li>__block在arc和非arc下含义一样吗？</li><li>使用atomic一定是线程安全的吗？</li></ol><ol start="5"><li>描述一个你遇到过的retain cycle例子。(别撒谎，你肯定遇到过)</li><li>+(void)load;   +(void)initialize；有什么用处？</li><li>为什么其他语言里叫函数调用， objective c里则是给对象发消息（或者谈下对runtime的理解）</li><li>什么是method swizzling?</li><li>UIView和CALayer是啥关系？</li><li>如何高性能的给UIImageView加个圆角？（不准说layer.cornerRadius!）</li><li>使用drawRect有什么影响？（这个可深可浅，你至少得用过。。）</li><li>ASIHttpRequest或者SDWebImage里面给UIImageView加载图片的逻辑是什么样的？（把UIImageView放到UITableViewCell里面问更赞）</li><li>麻烦你设计个简单的图片内存缓存器（移除策略是一定要说的）</li><li>讲讲你用Instrument优化动画性能的经历吧（别问我什么是Instrument）</li><li>loadView是干嘛用的？</li><li>viewWillLayoutSubView你总是知道的。。</li><li>GCD里面有哪几种Queue？你自己建立过串行queue吗？背后的线程模型是什么样的？</li><li>用过coredata或者sqlite吗？读写是分线程的吗？遇到过死锁没？咋解决的？</li><li>http的post和get啥区别？（区别挺多的，麻烦多说点）</li><li>我知道你大学毕业过后就没接触过算法数据结构了，但是请你一定告诉我什么是Binary search tree?  search的时间复杂度是多少？我很想知道！</li></ol><blockquote><p>技术层面：</p></blockquote><p>1、对面向对象的理解，不好也可以写程序，但是写不好大程序<br>2、对内存的理解<br>3、调试的能力<br>4、调优的能力</p><blockquote><p>产品层面：</p></blockquote><p>1、对基本商业模式的了解<br>2、对流行产品和产品流行趋势的了解<br>3、对app store营销基础知识的了解<br>4、对SNS的了</p><blockquote><p>其他技能</p></blockquote><p>1.通用编程技能，例如：一道小算法，数据结构的实现方式，网络，多线程。<br>2.开发语言，例如：语言特性，重新实现语言提供的功能，是否深入研究过这门语言的某部分。<br>3.开发平台，例如：该平台的内部消息，内存，线程等机制。<br>4.工具，例如：调试技巧，是否熟练使用，代码管理工具，项目管理工具，效率工具。<br>5.行业视角，例如：用什么，知道什么。<br>6.其他能力，例如：网络上解决问题的能力，是否有持续学习的意识。</p><blockquote><p>有经验的，1-6都会问到，刚毕业的，只要重点面1和6   </p></blockquote><ol><li><p>你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？</p></li><li><p>你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？</p></li><li><p>Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）</p></li><li><p>是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。</p></li><li><p>NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？（虽然protocol和delegate这种东西面试已经面烂了…）</p></li><li><p>你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，实现了什么？请描述它和GCD的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。</p></li><li><p>既然提到GCD，那么问一下在使用GCD以及block时要注意些什么？它们两是一回事儿么？block在ARC中和传统的MRC中的行为和用法有没有什么区别，需要注意些什么？</p></li><li><p>您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？</p></li><li><p>对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？</p></li><li><p>你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。</p></li></ol><blockquote><p>申请的空间的内存在哪个区？</p></blockquote><ul><li>new 申请的时候，申请的空间在内存的堆区，（程序动态分配的内存空间）</li><li>初始化的时候，如果实例变量是基本类型，此时给初始化的为0，如果是字符串，初始化为null，</li></ul><blockquote><p>实例变量又保存在什么地方？</p></blockquote><ul><li>实例变量，存放在堆区，指针变量，对象名存放在栈区，</li></ul><blockquote><p>对象方法保存在什么地方？</p></blockquote><ul><li>对象的方法存放在代码区 </li><li>首先找到p对应的堆区空间，然后找到－isa指针，在找到指向的代码区，然后到该空间中找方法，</li><li>一个类可以创建多个对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apple Pay</title>
      <link href="/2015/03/23/2015b/Apple%20Pay/"/>
      <url>/2015/03/23/2015b/Apple%20Pay/</url>
      
        <content type="html"><![CDATA[<h3 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h3><ul><li><p>Apple Pay并不是独立的第三方支付服务，相比较支付宝和微信支付，他没有自己的账户，也不参与资金的流动， Apple Pay只是将原有的实体银行卡变成手机上“虚拟的银行卡”。Apple Pay依赖iPhone系统底层的整合,在便捷程度上,非第三方支付能比。和第三方的支付对比：一个是系统级的，一个是应用级的。</p></li><li><p>iOS 8 中第一次被介绍，支持到iOS9以上的系统</p></li></ul><h3 id="2配置证书："><a href="#2配置证书：" class="headerlink" title="2配置证书："></a>2配置证书：</h3><ul><li><p>需要有一个具有ApplePay服务的APPid.以及真机测试的证书和描述文件</p></li><li><p>创建或者编辑appID的支持Apple pay</p>  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay1.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay2.png"></li></ul><ul><li><p>编辑Merchant ID  </p>  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay3.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay4.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay5.png"></li></ul><ul><li><p>从钥匙串中请求证书</p>  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay6.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay7.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay8.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay9.png">  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay10.png"></li><li><p>在Xcode 中设置允许Apple pay </p>  <img src="/2015/03/23/2015b/Apple%20Pay/ApplePay11.png"></li></ul><h3 id="3-在界面中设置pay-button"><a href="#3-在界面中设置pay-button" class="headerlink" title="3. 在界面中设置pay button"></a>3. 在界面中设置pay button</h3><ul><li><code>PKPaymentButton</code> –我们需要添加一个按钮，进行支付代码的实现</li><li>切图可以拉伸，但是不可以变窄！</li><li>这个按钮有三个样式：White; WhiteOutLine; Black</li><li>同样具有三个不同类型：Plain; Buy；SetUp</li></ul><h3 id="4-上代码"><a href="#4-上代码" class="headerlink" title="4.上代码"></a>4.上代码</h3><ul><li><p>创建button </p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;PassKit/PassKit.h&gt;</span><br><span class="line"><span class="comment">//    Type : 类型</span></span><br><span class="line"><span class="comment">//    PKPaymentButtonTypePlain</span></span><br><span class="line"><span class="comment">//    PKPaymentButtonTypeBuy</span></span><br><span class="line"><span class="comment">//    PKPaymentButtonTypeSetUp</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    style : 样式</span></span><br><span class="line"><span class="comment">//    PKPaymentButtonStyleWhite</span></span><br><span class="line"><span class="comment">//    PKPaymentButtonStyleWhiteOutline</span></span><br><span class="line"><span class="comment">//    PKPaymentButtonStyleBlack</span></span><br><span class="line">    <span class="comment">//以上的样式和类型，大家可以更换下，运行后可以直接查看到效果。在这里就不在解释。</span></span><br><span class="line">    <span class="type">PKPaymentButton</span> * payButton = [<span class="type">PKPaymentButton</span> buttonWithType:<span class="type">PKPaymentButtonTypePlain</span> style:<span class="type">PKPaymentButtonStyleWhiteOutline</span>];</span><br><span class="line">    payButton.center = <span class="keyword">self</span>.view.center;</span><br><span class="line">    [payButton addTarget:<span class="keyword">self</span> action:@selector(payAction:) forControlEvents:<span class="type">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:payButton];</span><br></pre></td></tr></table></figure></li><li><p>开始支付 </p></li><li><p>系统提供了API来判断当前设备是否支持Apple Pay支付的功能。</p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>([PKPaymentAuthorizationViewController canMakePayments])&#123;</span><br><span class="line">        <span class="comment">//设备支持支付</span></span><br><span class="line">        <span class="comment">//PKPayment类来创建支付请求</span></span><br><span class="line">        PKPaymentRequest *request = [[PKPaymentRequest alloc] init];</span><br><span class="line">        <span class="comment">//国家 //HK 香港   CN :  中国大陆</span></span><br><span class="line">        request.countryCode = @<span class="string">"CN"</span>;</span><br><span class="line">        <span class="comment">//人民币 // HKD  港币  CNY : 人民币    USD : 美元</span></span><br><span class="line">        request.currencyCode = @<span class="string">"CNY"</span>;<span class="comment">// 其他国家以及币种的缩写自行百度</span></span><br><span class="line">        <span class="comment">///由商家支持的支付网络 所支持的卡类型</span></span><br><span class="line">        <span class="comment">//此属性限制支付卡，可以支付。</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkAmex : 美国运通</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkChinaUnionPay : 中国银联</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkVisa  : Visa卡</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkMasterCard : 万事达信用卡</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkDiscover</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkInterac</span></span><br><span class="line">        <span class="comment">//        PKPaymentNetworkPrivateLabel</span></span><br><span class="line">        <span class="comment">//        PKEncryptionSchemeECC_V2</span></span><br><span class="line">        request.supportedNetworks = @[PKPaymentNetworkAmex, PKPaymentNetworkChinaUnionPay, PKPaymentNetworkDiscover, PKPaymentNetworkInterac, PKPaymentNetworkMasterCard, PKPaymentNetworkPrivateLabel, PKPaymentNetworkVisa, PKEncryptionSchemeECC_V2];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//        PKMerchantCapability3DS // 美国的一个卡 必须支持</span></span><br><span class="line">        <span class="comment">//        PKMerchantCapabilityEMV // 欧洲的卡</span></span><br><span class="line">        <span class="comment">//        PKMerchantCapabilityCredit //信用卡</span></span><br><span class="line">        <span class="comment">//        PKMerchantCapabilityDebit //借记卡</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//商家的支付处理能力</span></span><br><span class="line">        <span class="comment">//PKMerchantCapabilityEMV : 他的旗下有三大银行 ： 中国银联 Visa卡 万事达信用卡</span></span><br><span class="line">        <span class="comment">//也就是说merchantCapabilities指的支付的银行卡的范围。</span></span><br><span class="line">        request.merchantCapabilities =   PKMerchantCapabilityDebit | PKMerchantCapabilityCredit | PKMerchantCapabilityEMV;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//merchantIdentifier 要和你在开发者中心生成的id保持一致</span></span><br><span class="line">        request.merchantIdentifier = @<span class="string">"merchant.com.lanou3g.hanshanhuApplePayTest"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需要的配送信息和账单信息</span></span><br><span class="line">        request.requiredBillingAddressFields = PKAddressFieldAll;</span><br><span class="line">        request.requiredShippingAddressFields = PKAddressFieldAll;</span><br><span class="line">        <span class="comment">//运输方式</span></span><br><span class="line">        NSDecimalNumber * shippingPrice = [NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"11.0"</span>];</span><br><span class="line">        PKShippingMethod *method = [PKShippingMethod <span class="string">summaryItemWithLabel:</span>@<span class="string">"快递公司"</span> <span class="string">amount:</span>shippingPrice];</span><br><span class="line">        method.detail = @<span class="string">"24小时送到！"</span>;</span><br><span class="line">        method.identifier = @<span class="string">"kuaidi"</span>;</span><br><span class="line">        request.shippingMethods = @[method];</span><br><span class="line">        request.shippingType = PKShippingTypeServicePickup;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.9 存储额外信息</span></span><br><span class="line">        <span class="comment">// 使用applicationData属性来存储一些在你的应用中关于这次支付请求的唯一标识信息，比如一个购物车的标识符。在用户授权支付之后，这个属性的哈希值会出现在这次支付的token中。</span></span><br><span class="line">        request.applicationData = [@<span class="string">"商品ID:123456"</span> <span class="string">dataUsingEncoding:</span>NSUTF8StringEncoding];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加物品到支付页</span></span><br><span class="line">        <span class="comment">//创建物品并显示，这个对象描述了一个物品和它的价格，数组最后的对象必须是总价格。</span></span><br><span class="line">        <span class="comment">//使用PKPaymentSummaryItem来创建商品信息</span></span><br><span class="line">        </span><br><span class="line">        PKPaymentSummaryItem *widget1 = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"商品1"</span> <span class="string">amount:</span>[NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"20.0"</span>]];</span><br><span class="line">        </span><br><span class="line">        PKPaymentSummaryItem *widget2 = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"商品2"</span> <span class="string">amount:</span>[NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"10.0"</span>]];</span><br><span class="line">        </span><br><span class="line">        PKPaymentSummaryItem *total = [PKPaymentSummaryItem <span class="string">summaryItemWithLabel:</span>@<span class="string">"商品3"</span> <span class="string">amount:</span>[NSDecimalNumber <span class="string">decimalNumberWithString:</span>@<span class="string">"25.0"</span>]];</span><br><span class="line">        </span><br><span class="line">        request.paymentSummaryItems = @[widget1, widget2, total];</span><br><span class="line">        <span class="comment">//        request.paymentSummaryItems = @[widget1];</span></span><br><span class="line">        <span class="comment">//显示认证视图</span></span><br><span class="line">        PKPaymentAuthorizationViewController * paymentPane = [[PKPaymentAuthorizationViewController alloc] <span class="string">initWithPaymentRequest:</span>request];</span><br><span class="line">        paymentPane.delegate = self;</span><br><span class="line">        </span><br><span class="line">        [self <span class="string">presentViewController:</span>paymentPane <span class="string">animated:</span>TRUE <span class="string">completion:</span>nil];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//设备不支持支付</span></span><br><span class="line">        NSLog(@<span class="string">"设备不支持支付"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ```  </span><br><span class="line"></span><br><span class="line">- 支付过程中会进行调用 `PKPaymentAuthorizationViewControllerDelegate`</span><br><span class="line">      </span><br><span class="line">    ``` swift</span><br><span class="line">    <span class="comment">//这个代理方法指的是支付过程中会进行调用</span></span><br><span class="line">    - (<span class="keyword">void</span>)<span class="string">paymentAuthorizationViewController:</span>(PKPaymentAuthorizationViewController *)controller</span><br><span class="line"><span class="symbol">                        didAuthorizePayment:</span>(PKPayment *)payment</span><br><span class="line"><span class="symbol">                                completion:</span>(<span class="keyword">void</span> (^)(PKPaymentAuthorizationStatus status))completion</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//payment:代表的是一个支付对象， 支付相关的所有信息都在他的身上：1.token.   2.address</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">//completion : 是一个回调的block  ，block回调的参数，直接影响到界面结果的展示。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*PKPaymentAuthorizationStatus 交易状态</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusSuccess, // 成功交易</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusFailure // 没有授权交易</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusInvalidBillingPostalAddress  // 拒绝账单地址</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusInvalidShippingPostalAddress, // 拒绝收货地址</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusInvalidShippingContact //提供的信息不够</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusPINRequired  // 交易需要指纹输入</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusPINIncorrect // 输入不正确,重新输入.</span></span><br><span class="line"><span class="comment">        PKPaymentAuthorizationStatusPINLockout// 输入次数超出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        PKPaymentToken * token = payment.token;</span><br><span class="line">        NSLog(@<span class="string">"获取token---%@"</span>, token);</span><br><span class="line">        <span class="comment">//获取订单地址</span></span><br><span class="line">        NSString * address = payment.billingContact.postalAddress.city;</span><br><span class="line">        NSLog(@<span class="string">"获取到地址： %@"</span>, address);</span><br><span class="line">        NSLog(@<span class="string">"验证通过后, 需要开发者继续完成交易"</span>);</span><br><span class="line">        <span class="comment">// 在这个位置， 我们开发人员需要把token值和商品的其他信息如：地址 id  这些 ， 上传到自己公司的服务器。然后公司的服务器和银行的商家接口进行接口的调用，并将接口调用返回的支付结果信息返回到这里。</span></span><br><span class="line">        <span class="comment">//根据不同的支付结果状态，让block调用不同的交易状态；</span></span><br><span class="line">        <span class="comment">//比如说：服务器调用支付结果是成功的， 就让        completion(PKPaymentAuthorizationStatusSuccess);          如果失败 调用        completion(PKPaymentAuthorizationStatusFailure);</span></span><br><span class="line">        <span class="comment">//如：</span></span><br><span class="line">        BOOL isSuccess = YES;</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            completion(PKPaymentAuthorizationStatusSuccess);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            completion(PKPaymentAuthorizationStatusFailure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>授权成功之后或者取消授权之后会调用这个代理方法</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)controller &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"取消或者交易完成"</span>);</span><br><span class="line">[<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>viewController的生命周期</title>
      <link href="/2015/03/23/2015b/viewController%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2015/03/23/2015b/viewController%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIViewController</span>中的view显示步骤</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">进入<span class="type">UIViewController</span>时的情况:</span><br><span class="line">viewDidLoad</span><br><span class="line">viewWillLayoutSubviews</span><br><span class="line">viewDidLayoutSubviews</span><br><span class="line">viewWillAppear</span><br><span class="line">viewWillLayoutSubviews</span><br><span class="line">viewDidLayoutSubviews</span><br><span class="line">viewDidAppear</span><br><span class="line">切换了<span class="type">Controller</span>后的情况(比如你在<span class="type">TabbarController</span>中切换了):</span><br><span class="line">viewWillDisappear</span><br><span class="line">viewDidDisappear</span><br><span class="line">再次切换回来后的情况:</span><br><span class="line">viewWillLayoutSubviews</span><br><span class="line">viewDidLayoutSubviews</span><br><span class="line">viewWillAppear</span><br><span class="line">viewWillLayoutSubviews</span><br><span class="line">viewDidLayoutSubviews</span><br><span class="line">viewDidAppear</span><br><span class="line">退入到后台后的情况:</span><br><span class="line">无</span><br><span class="line">从后台进入程序时的情况:</span><br><span class="line">viewWillLayoutSubviews</span><br><span class="line">viewDidLayoutSubviews</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支付-微信支付（2）</title>
      <link href="/2015/03/22/2015b/%E6%94%AF%E4%BB%98-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%EF%BC%882%EF%BC%89/"/>
      <url>/2015/03/22/2015b/%E6%94%AF%E4%BB%98-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>1 微信支付2 ，参与后台接口：</p><pre><code><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">-(void)textWeixin&#123;</span><br><span class="line">    <span class="comment">// 1.拼接请求参数</span></span><br><span class="line">    <span class="type">JYUserInfomation</span> *info=[<span class="type">JYUserInfomation</span> allObjects].firstObject;</span><br><span class="line">    <span class="keyword">if</span> (info==<span class="literal">nil</span>|| !info.isLoged) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">WeakSelf</span>(weakSelf);</span><br><span class="line">    <span class="type">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                        @<span class="string">"person_id"</span>:info.person_id,</span><br><span class="line">                        @<span class="string">"orderId"</span>:<span class="keyword">self</span>.listModel.id,</span><br><span class="line">                        @<span class="string">"token"</span>:info.appkey,</span><br><span class="line">                        @<span class="string">"version"</span>:<span class="type">AppVersion</span>,</span><br><span class="line">                        &#125;;</span><br><span class="line">    </span><br><span class="line">    [<span class="type">LOHttpHelper</span> lo_requestWithType:<span class="type">LO_HttpRequestTypeGet</span> withPath:@<span class="string">"app/pay/weixinPay.htm?"</span> params:dic successOrFail:^(<span class="type">NSDictionary</span> *responseDic, <span class="type">NSError</span> *error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([responseDic[@<span class="string">"status"</span>] integerValue]==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">NSLog</span>(@<span class="string">"%@"</span>,responseDic);</span><br><span class="line">                <span class="type">NSDictionary</span> *dict=responseDic[@<span class="string">"data"</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="type">NSMutableString</span> *retcode = [dict objectForKey:@<span class="string">"retcode"</span>];</span><br><span class="line">                <span class="keyword">if</span> (retcode.intValue == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">NSMutableString</span> *stamp  = [dict objectForKey:@<span class="string">"timestamp"</span>];</span><br><span class="line">                    <span class="comment">//调起微信支付</span></span><br><span class="line">                    <span class="type">PayReq</span>* req             = [[<span class="type">PayReq</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">                    req.partnerId           = [dict objectForKey:@<span class="string">"partnerid"</span>];</span><br><span class="line">                    req.prepayId            = [dict objectForKey:@<span class="string">"prepayid"</span>];</span><br><span class="line">                    req.nonceStr            = [dict objectForKey:@<span class="string">"noncestr"</span>];</span><br><span class="line">                    req.timeStamp           = stamp.intValue;</span><br><span class="line">                    req.package             = [dict objectForKey:@<span class="string">"package"</span>];</span><br><span class="line">                    req.sign                = [dict objectForKey:@<span class="string">"sign"</span>];</span><br><span class="line">                    [<span class="type">WXApi</span> sendReq:req];</span><br><span class="line">                    <span class="comment">//日志输出</span></span><br><span class="line">                    <span class="type">NSLog</span>(@<span class="string">"appid=%@\npartid=%@\nprepayid=%@\nnoncestr=%@\ntimestamp=%ld\npackage=%@\nsign=%@"</span>,[dict objectForKey:@<span class="string">"appid"</span>],req.partnerId,req.prepayId,req.nonceStr,(long)req.timeStamp,req.package,req.sign );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                </span><br><span class="line">                [<span class="type">KVNProgress</span> showErrorWithStatus:responseDic[@<span class="string">"msg"</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            [<span class="type">KVNProgress</span> showErrorWithStatus:@<span class="string">"请重新再试!"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>拼接参数，掉后台接口，接受后台参数：</p>   <img src="/2015/03/22/2015b/支付-微信支付（2）/微信支付2-1.png"></li><li><p>根据返回的参数，调用微信SDK，进行支付：</p>   <img src="/2015/03/22/2015b/支付-微信支付（2）/微信支付2-2.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支付-微信支付（1）</title>
      <link href="/2015/03/21/2015b/%E6%94%AF%E4%BB%98-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%EF%BC%881%EF%BC%89/"/>
      <url>/2015/03/21/2015b/%E6%94%AF%E4%BB%98-%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ol><li>微信支付</li></ol><pre><code><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">- (void)wechatPayClick&#123;</span><br><span class="line">    <span class="type">NSMutableDictionary</span> *dict = [<span class="type">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [dict setObject:<span class="type">WeChatAppID</span> forKey:@<span class="string">"appid"</span>];</span><br><span class="line">    [dict setObject:@<span class="string">"税务代理预缴税金"</span> forKey:@<span class="string">"body"</span>];</span><br><span class="line">    [dict setObject:<span class="type">WeChatMCH_ID</span> forKey:@<span class="string">"mch_id"</span>];</span><br><span class="line">    [dict setObject:[<span class="type">AppMethod</span> getRandomString] forKey:@<span class="string">"nonce_str"</span>];</span><br><span class="line">    [dict setObject:<span class="type">WeChatNOTIFY_URL</span> forKey:@<span class="string">"notify_url"</span>];</span><br><span class="line">    </span><br><span class="line">    [dict setObject:@<span class="string">"ZLDD-201703070014"</span> forKey:@<span class="string">"out_trade_no"</span>];</span><br><span class="line">    [dict setObject:[<span class="type">AppMethod</span> deviceIPAdress] forKey:@<span class="string">"spbill_create_ip"</span>];</span><br><span class="line">    [dict setObject:@<span class="string">"1"</span> forKey:@<span class="string">"total_fee"</span>];</span><br><span class="line">    [dict setObject:@<span class="string">"APP"</span> forKey:@<span class="string">"trade_type"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSDictionary</span> *params = [<span class="type">AppMethod</span> partnerSignOrder:dict];</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSString</span> *postStr = [params <span class="type">XMLString</span>];</span><br><span class="line">    <span class="type">NSMutableURLRequest</span> *request = [<span class="type">NSMutableURLRequest</span> requestWithURL:[<span class="type">NSURL</span> <span class="type">URLWithString</span>:@<span class="string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>]];</span><br><span class="line">    [request setHTTPMethod:@<span class="string">"POST"</span>];</span><br><span class="line">    [request addValue: @<span class="string">"text/html,text/plain,text/json"</span> forHTTPHeaderField:@<span class="string">"Content-Type"</span>];</span><br><span class="line">    [request setHTTPBody:[postStr dataUsingEncoding:<span class="type">NSUTF8StringEncoding</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSURLSession</span> *requestSession = [<span class="type">NSURLSession</span> sessionWithConfiguration:[<span class="type">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    </span><br><span class="line">    <span class="type">NSURLSessionDataTask</span> *task = [requestSession  dataTaskWithRequest:request completionHandler:^(<span class="type">NSData</span> * _Nullable body , <span class="type">NSURLResponse</span> * _Nullable response, <span class="type">NSError</span> * _Nullable error) &#123;</span><br><span class="line">                                                    </span><br><span class="line">                    <span class="type">NSLog</span>(@<span class="string">"Response object: %@"</span> , response);</span><br><span class="line">                    <span class="type">NSString</span> *bodyString = [[<span class="type">NSString</span> alloc] initWithData:body encoding:<span class="type">NSUTF8StringEncoding</span>];</span><br><span class="line">                    <span class="comment">//   NSDictionary *dic=[bodyString mj_JSONObject];</span></span><br><span class="line">                    <span class="comment">//打印应答中的body</span></span><br><span class="line">                    <span class="type">NSLog</span>(@<span class="string">"Response body: %@"</span> , body);</span><br><span class="line">                    <span class="type">NSDictionary</span> *dic=     [[<span class="type">XMLDictionaryParser</span> sharedInstance] dictionaryWithData:body];</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">PayReq</span>* req             = [[<span class="type">PayReq</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">                    req.partnerId           = <span class="type">WeChatMCH_ID</span>;</span><br><span class="line">                    req.prepayId            = [dic objectForKey:@<span class="string">"prepay_id"</span>];</span><br><span class="line">                    req.nonceStr            = [dic objectForKey:@<span class="string">"nonce_str"</span>];</span><br><span class="line">                    req.timeStamp           = [[<span class="type">NSString</span> stringWithFormat:@<span class="string">"%.0f"</span>,[[<span class="type">NSDate</span> date] timeIntervalSince1970]] intValue];</span><br><span class="line">                    req.package             = @<span class="string">"Sign=WXPay"</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">NSMutableDictionary</span> *rdict = [<span class="type">NSMutableDictionary</span> dictionary];</span><br><span class="line">                    [rdict setObject:<span class="type">WeChatAppID</span> forKey:@<span class="string">"appid"</span>];</span><br><span class="line">                    [rdict setObject:req.partnerId forKey:@<span class="string">"partnerid"</span>];</span><br><span class="line">                    [rdict setObject:req.prepayId forKey:@<span class="string">"prepayid"</span>];</span><br><span class="line">                    [rdict setObject:req.nonceStr forKey:@<span class="string">"noncestr"</span>];</span><br><span class="line">                    [rdict setObject:[<span class="type">NSString</span> stringWithFormat:@<span class="string">"%u"</span>,(unsigned int)req.timeStamp] forKey:@<span class="string">"timestamp"</span>];</span><br><span class="line">                    [rdict setObject:req.package forKey:@<span class="string">"package"</span>];</span><br><span class="line">                    <span class="type">NSDictionary</span> *result = [<span class="type">AppMethod</span> partnerSignOrder:rdict];</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    req.sign                = [result objectForKey:@<span class="string">"sign"</span>];</span><br><span class="line">                    </span><br><span class="line">                    [<span class="type">WXApi</span> sendReq:req];</span><br><span class="line">                                                    </span><br><span class="line">                                                    </span><br><span class="line">                &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>拼接参数：</p>   <img src="/2015/03/21/2015b/支付-微信支付（1）/微信支付1-1.png"></li><li><p>上传接口，获取预下单ID，打开微信，支付</p>   <img src="/2015/03/21/2015b/支付-微信支付（1）/微信支付1-2.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支付-支付宝支付</title>
      <link href="/2015/03/20/2015b/%E6%94%AF%E4%BB%98-%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
      <url>/2015/03/20/2015b/%E6%94%AF%E4%BB%98-%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<p>1.支付宝支付，获取上传的参数加密参数等在后台处理，手机端拿到拼接好的sign，直接调取支付宝SDK：</p><pre><code><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JYUserInfomation</span> *info=[<span class="type">JYUserInfomation</span> allObjects].firstObject;</span><br><span class="line"><span class="keyword">if</span> (info==<span class="literal">nil</span>|| !info.isLoged) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">NSDictionary</span> *dic=@&#123;@<span class="string">"person_id"</span>:info.person_id,</span><br><span class="line">                    @<span class="string">"orderId"</span>:<span class="keyword">self</span>.listModel.id,</span><br><span class="line">                    @<span class="string">"token"</span>:info.appkey,</span><br><span class="line">                    @<span class="string">"version"</span>:<span class="type">AppVersion</span>,</span><br><span class="line">                    &#125;;</span><br><span class="line">[<span class="type">LOHttpHelper</span> lo_requestWithType:<span class="type">LO_HttpRequestTypeGet</span> withPath:@<span class="string">"app/pay/getOrderInfo.htm?"</span> params:dic successOrFail:^(<span class="type">NSDictionary</span> *responseDic, <span class="type">NSError</span> *error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([responseDic[@<span class="string">"status"</span>] integerValue]==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">NSLog</span>(@<span class="string">"%@"</span>,responseDic);</span><br><span class="line">            <span class="type">NSDictionary</span> *data=responseDic[@<span class="string">"data"</span>];</span><br><span class="line">            <span class="keyword">if</span> ([data isKindOfClass:[<span class="type">NSNull</span> <span class="class"><span class="keyword">class</span>]]) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">NSString</span> *orderInfo=data[@<span class="string">"orderInfo"</span>];</span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> 调用支付结果开始支付</span></span><br><span class="line">                [[<span class="type">AlipaySDK</span> defaultService] payOrder:orderInfo fromScheme:@<span class="string">"JYAliPaySDK"</span> callback:^(<span class="type">NSDictionary</span> *resultDic) &#123;</span><br><span class="line">                <span class="type">NSLog</span>(@<span class="string">"%@"</span>,resultDic);</span><br><span class="line">                <span class="keyword">if</span> ([[resultDic objectForKey:@<span class="string">"resultStatus"</span>]intValue] == <span class="number">9000</span>) &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ([[resultDic objectForKey:@<span class="string">"resultStatus"</span>]intValue] == <span class="number">8000</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//处理中</span></span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            [<span class="type">KVNProgress</span> showErrorWithStatus:responseDic[@<span class="string">"msg"</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        [<span class="type">KVNProgress</span> showErrorWithStatus:@<span class="string">"请重新再试!"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>调取后台接口，获取sign</p>   <img src="/2015/03/20/2015b/支付-支付宝支付/支付宝支付1.png"></li><li><p>调取支付宝SDK </p>   <img src="/2015/03/20/2015b/支付-支付宝支付/支付宝支付2.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取音视频文件AVMetadata数据</title>
      <link href="/2015/03/19/2015b/%E8%8E%B7%E5%8F%96%E9%9F%B3%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6AVMetadata%E6%95%B0%E6%8D%AE/"/>
      <url>/2015/03/19/2015b/%E8%8E%B7%E5%8F%96%E9%9F%B3%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6AVMetadata%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<ul><li>做音乐播放器应用有时候需要获取音乐文件的一些数据信息,比如该音乐文件中的封面图片,艺人名,专辑名等,如何获取呢?本人抛砖引玉,写一个获取封面图片的类供大家参考.</li></ul><ul><li><p>创建一个工具类</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;AVFoundation/AVFoundation.h&gt;</span><br><span class="line">#warning 需要引入<span class="type">AVFoundation</span>.framework</span><br><span class="line">@interface <span class="type">AVMetadataInfo</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">获取音视频文件的Metadata信息(可以获取到mp3以及m4a的相关信息)</span></span><br><span class="line"><span class="comment">*AVMetadataCommonKeyArtwork这个参数是可以换的,换不同的参数可以取得不同的值</span></span><br><span class="line"><span class="comment">*[注意]此方法中用到了信号量将异步操作转换成了同步操作,尽量在主线程中使用</span></span><br><span class="line"><span class="comment">@param fileURL 文件的URL地址</span></span><br><span class="line"><span class="comment">@return 一个包含了相关内容的字典</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="type">NSDictionary</span> *)dataInfoFromFileURL:(<span class="type">NSURL</span> *)fileURL;</span><br></pre></td></tr></table></figure> <img src="/2015/03/19/2015b/获取音视频文件AVMetadata数据/获取音视频文件AVMetadata数据1.png"></li><li><p>实现方法</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">NSDictionary</span> *)dataInfoFromFileURL:(<span class="type">NSURL</span> *)fileURL&#123;</span><br><span class="line">    <span class="comment">// 创建字典</span></span><br><span class="line">    <span class="type">NSMutableDictionary</span> *dic = [<span class="type">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="comment">// 创建信号量(将异步变成同步)</span></span><br><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">AVAsset</span> *asset = [<span class="type">AVURLAsset</span> <span class="type">URLAssetWithURL</span>:fileURL options:<span class="literal">nil</span>];</span><br><span class="line">    [asset loadValuesAsynchronouslyForKeys:@[@<span class="string">"commonMetadata"</span>]</span><br><span class="line">                        completionHandler:^&#123;</span><br><span class="line">                            <span class="comment">// 发送信号量</span></span><br><span class="line">                            dispatch_semaphore_signal(semaphore);</span><br><span class="line">                        &#125;];</span><br><span class="line">    <span class="comment">// 无限等待</span></span><br><span class="line">    dispatch_semaphore_wait(semaphore, <span class="type">DISPATCH_TIME_FOREVER</span>);</span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">NSArray</span> *artworks = [<span class="type">AVMetadataItem</span> metadataItemsFromArray:asset.commonMetadata</span><br><span class="line">                                                    withKey:<span class="type">AVMetadataCommonKeyArtwork</span></span><br><span class="line">                                                    keySpace:<span class="type">AVMetadataKeySpaceCommon</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">AVMetadataItem</span> *item <span class="keyword">in</span> artworks)&#123;</span><br><span class="line">        <span class="keyword">if</span> ([item.keySpace isEqualToString:<span class="type">AVMetadataKeySpaceID3</span>])&#123;</span><br><span class="line">            <span class="type">NSDictionary</span> *dict = [item.value copyWithZone:<span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取图片</span></span><br><span class="line">            <span class="type">UIImage</span>  *image = [<span class="type">UIImage</span> imageWithData:[dict objectForKey:@<span class="string">"data"</span>]];</span><br><span class="line">            [dic setObject:image forKey:@<span class="string">"Artwork"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ([item.keySpace isEqualToString:<span class="type">AVMetadataKeySpaceiTunes</span>])&#123;</span><br><span class="line">            <span class="comment">// 获取图片</span></span><br><span class="line">            <span class="type">UIImage</span> *image = [<span class="type">UIImage</span> imageWithData:[item.value copyWithZone:<span class="literal">nil</span>]];</span><br><span class="line">            [dic setObject:image forKey:@<span class="string">"Artwork"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="type">NSDictionary</span> dictionaryWithDictionary:dic];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="/2015/03/19/2015b/获取音视频文件AVMetadata数据/获取音视频文件AVMetadata数据2.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UIsearchViewControl</title>
      <link href="/2015/03/18/2015b/UIsearchViewControl/"/>
      <url>/2015/03/18/2015b/UIsearchViewControl/</url>
      
        <content type="html"><![CDATA[<ul><li><p>创建UItableViewVC   </p><ul><li><code>UISearchController alloc init</code>  ResultsController 一个tableVC，搜索到的数据源呈现在tableVC</li><li><p>继承UITableViewController .h文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@interface <span class="type">TestTableViewController</span> : <span class="type">UITableViewController</span></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p>继承UITableViewController .m文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@interface <span class="type">TestTableViewController</span> ()&lt;<span class="type">UISearchResultsUpdating</span>, <span class="type">UISearchBarDelegate</span>&gt;</span><br><span class="line">@property (nonatomic, strong) <span class="type">UISearchController</span> *searchController;</span><br><span class="line">@property (nonatomic, strong) <span class="type">NSMutableArray</span> *searchResults; <span class="comment">// Filtered search results</span></span><br><span class="line">@property (nonatomic, strong) <span class="type">NSArray</span> *products;</span><br><span class="line">@end</span><br><span class="line">@implementation <span class="type">TestTableViewController</span></span><br><span class="line">- (void)viewDidLoad&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.title = @<span class="string">"全部品牌"</span>;</span><br><span class="line">    <span class="keyword">self</span>.products = [<span class="type">Product</span> allProducts];</span><br><span class="line">    <span class="type">TestResultTableViewController</span> *result = [[<span class="type">TestResultTableViewController</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">    result.view.frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [<span class="type">UIScreen</span> mainScreen].bounds.size.width, [<span class="type">UIScreen</span> mainScreen].bounds.size.height);</span><br><span class="line">    <span class="keyword">self</span>.searchController = [[<span class="type">UISearchController</span> alloc] initWithSearchResultsController:result];</span><br><span class="line">    <span class="keyword">self</span>.searchController.searchResultsUpdater = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.searchController.searchBar.placeholder = @<span class="string">"搜索品牌"</span>;</span><br><span class="line">    <span class="keyword">self</span>.searchController.searchBar.frame = <span class="type">CGRectMake</span>(<span class="keyword">self</span>.searchController.searchBar.frame.origin.x, <span class="keyword">self</span>.searchController.searchBar.frame.origin.y, <span class="keyword">self</span>.searchController.searchBar.frame.size.width, <span class="number">44.0</span>);</span><br><span class="line">    <span class="keyword">self</span>.tableView.tableHeaderView = <span class="keyword">self</span>.searchController.searchBar;</span><br><span class="line">    <span class="keyword">self</span>.definesPresentationContext = <span class="type">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>UISearchResultsUpdating   UISearchBarDelegate 的代理</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - <span class="type">UISearchResultsUpdating</span></span><br><span class="line">- (void)updateSearchResultsForSearchController:(<span class="type">UISearchController</span> *)searchController&#123;</span><br><span class="line">    <span class="type">NSString</span> *searchString = [<span class="keyword">self</span>.searchController.searchBar text];</span><br><span class="line">    <span class="type">NSString</span> *scope = <span class="literal">nil</span>;</span><br><span class="line">    <span class="type">NSInteger</span> selectedScopeButtonIndex = [<span class="keyword">self</span>.searchController.searchBar selectedScopeButtonIndex];</span><br><span class="line">    <span class="keyword">if</span> (selectedScopeButtonIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        scope = [[<span class="type">Product</span> deviceTypeNames] objectAtIndex:(selectedScopeButtonIndex - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> updateFilteredContentForProductName:searchString type:scope];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.searchController.searchResultsController) &#123;</span><br><span class="line">        <span class="type">TestResultTableViewController</span> *vc = (<span class="type">TestResultTableViewController</span> *)<span class="keyword">self</span>.searchController.searchResultsController;</span><br><span class="line">        vc.searchResults = <span class="keyword">self</span>.searchResults;</span><br><span class="line">        [vc.tableView reloadData];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - <span class="type">Content</span> <span class="type">Filtering</span></span><br><span class="line">- (void)updateFilteredContentForProductName:(<span class="type">NSString</span> *)productName type:(<span class="type">NSString</span> *)typeName&#123;</span><br><span class="line">    <span class="keyword">if</span> ((productName == <span class="literal">nil</span>) || [productName length] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.searchResults = [<span class="keyword">self</span>.products mutableCopy];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">NSMutableArray</span> *searchResults = [[<span class="type">NSMutableArray</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Product</span> *product <span class="keyword">in</span> <span class="keyword">self</span>.products) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([product.type isEqualToString:typeName]) &#123;</span><br><span class="line">                    [searchResults addObject:product];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">self</span>.searchResults = searchResults;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span>.searchResults removeAllObjects];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Product</span> *product <span class="keyword">in</span> <span class="keyword">self</span>.products) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((typeName == <span class="literal">nil</span>) || [product.type isEqualToString:typeName]) &#123;</span><br><span class="line">            <span class="type">NSUInteger</span> searchOptions = <span class="type">NSCaseInsensitiveSearch</span> | <span class="type">NSDiacriticInsensitiveSearch</span>;</span><br><span class="line">            <span class="type">NSRange</span> productNameRange = <span class="type">NSMakeRange</span>(<span class="number">0</span>, product.name.length);</span><br><span class="line">            <span class="type">NSRange</span> foundRange = [product.name rangeOfString:productName options:searchOptions range:productNameRange];</span><br><span class="line">            <span class="keyword">if</span> (foundRange.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                [<span class="keyword">self</span>.searchResults addObject:product];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - <span class="type">UISearchBarDelegate</span></span><br><span class="line">- (void)searchBar:(<span class="type">UISearchBar</span> *)searchBar selectedScopeButtonIndexDidChange:(<span class="type">NSInteger</span>)selectedScope&#123;</span><br><span class="line">    [<span class="keyword">self</span> updateSearchResultsForSearchController:<span class="keyword">self</span>.searchController];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码 </p>   <img src="/2015/03/18/2015b/UIsearchViewControl/UIsearchViewControl1.png">   <img src="/2015/03/18/2015b/UIsearchViewControl/UIsearchViewControl2.png">   <img src="/2015/03/18/2015b/UIsearchViewControl/UIsearchViewControl3.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MJRefreshGifHeader设置刷新动画</title>
      <link href="/2015/03/17/2015b/MJRefreshGifHeader%E8%AE%BE%E7%BD%AE%E5%88%B7%E6%96%B0%E5%8A%A8%E7%94%BB/"/>
      <url>/2015/03/17/2015b/MJRefreshGifHeader%E8%AE%BE%E7%BD%AE%E5%88%B7%E6%96%B0%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>设置MJRefreshGifHeader 的子类，重写prepare 方法。</p></blockquote><ul><li>interface<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@interface <span class="type">CLRefreshHeaderCLRefreshHeader</span> : <span class="type">MJRefreshGifHeaderMJRefreshGifHeader</span></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>prepare() </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-(void)prepare&#123;</span><br><span class="line">    [<span class="keyword">super</span> prepare];</span><br><span class="line">    <span class="comment">// 设置普通状态的动画图片</span></span><br><span class="line">    <span class="type">NSMutableArray</span> *idleImages = [<span class="type">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSUInteger</span> i = <span class="number">1</span>; i&lt;=<span class="number">60</span>; i++) &#123;</span><br><span class="line">        <span class="type">UIImage</span> *image = [<span class="type">UIImage</span> imageNamed:@<span class="string">"icon_refresh_1"</span>];</span><br><span class="line">        [idleImages addObject:image];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setImages:idleImages forState:<span class="type">MJRefreshStateIdle</span>];</span><br><span class="line">    <span class="comment">// 设置即将刷新状态的动画图片（一松开就会刷新的状态）</span></span><br><span class="line">    <span class="type">NSMutableArray</span> *refreshingImages = [<span class="type">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSUInteger</span> i = <span class="number">1</span>; i&lt;=<span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="type">UIImage</span> *image = [<span class="type">UIImage</span> imageNamed:[<span class="type">NSString</span> stringWithFormat:@<span class="string">"icon_refresh_%zd"</span>, i]];</span><br><span class="line">        [refreshingImages addObject:image];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> setImages:refreshingImages forState:<span class="type">MJRefreshStatePulling</span>];</span><br><span class="line">    <span class="comment">// 设置正在刷新状态的动画图片</span></span><br><span class="line">    [<span class="keyword">self</span> setImages:refreshingImages forState:<span class="type">MJRefreshStateRefreshing</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2015/03/17/2015b/MJRefreshGifHeader设置刷新动画/MJRefreshGifHeader设置刷新动画1.png"></li><li><p>设置tableView的header 刷新方法</p>  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.mTableView.header = [<span class="built_in">CLRefreshHeader</span> headerWithRefreshingTarget:<span class="keyword">self</span> refreshingAction:<span class="keyword">@selector</span>(loadNewData)];</span><br></pre></td></tr></table></figure>  <img src="/2015/03/17/2015b/MJRefreshGifHeader设置刷新动画/MJRefreshGifHeader设置刷新动画2.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CAShapeLayer</title>
      <link href="/2015/03/16/2015b/CAShapeLayer/"/>
      <url>/2015/03/16/2015b/CAShapeLayer/</url>
      
        <content type="html"><![CDATA[<ul><li><p><code>CAShapeLayer</code>  和 <code>CALayer</code> 的区别</p></li><li><p>普通CALayer在被初始化时是需要给一个frame值的,这个frame值一般都与给定view的bounds值一致,它本身是有形状的,而且是矩形.</p></li><li><p>CAShapeLayer在初始化时也需要给一个frame值,但是,它本身没有形状,它的形状来源于你给定的一个path,然后它去取CGPath值,它与CALayer有着很大的区别</p></li></ul><ul><li><p>使用UIBezierPath绘制不规则曲线1</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取path</span></span><br><span class="line"><span class="type">UIBezierPath</span> *aPath = [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定起始点</span></span><br><span class="line">[aPath moveToPoint:<span class="type">CGPointMake</span>(<span class="number">0</span>.0f, <span class="number">0</span>.0f)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个不规则点</span></span><br><span class="line">[aPath addCurveToPoint:<span class="type">CGPointMake</span>(<span class="number">100</span>.f, <span class="number">100</span>.f)</span><br><span class="line">        controlPoint1:<span class="type">CGPointMake</span>(<span class="number">50</span>.f, <span class="number">0</span>.f)     <span class="comment">// 开始点</span></span><br><span class="line">        controlPoint2:<span class="type">CGPointMake</span>(<span class="number">0</span>.f, <span class="number">50</span>.f)];   <span class="comment">// 结束点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个点</span></span><br><span class="line">[aPath addLineToPoint:<span class="type">CGPointMake</span>(<span class="number">0</span>.0f, <span class="number">100</span>.f)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭合path</span></span><br><span class="line">[aPath closePath];</span><br></pre></td></tr></table></figure>   <img src="/2015/03/16/2015b/CAShapeLayer/CAShapeLayer1.png" width="200"></li><li><p>使用UIBezierPath绘制不规则曲线2</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取path</span></span><br><span class="line"><span class="type">UIBezierPath</span> *aPath = [<span class="type">UIBezierPath</span> bezierPath];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定起始点</span></span><br><span class="line">[aPath moveToPoint:<span class="type">CGPointMake</span>(<span class="number">0</span>.0f, <span class="number">0</span>.0f)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个不规则点</span></span><br><span class="line">[aPath addQuadCurveToPoint:<span class="type">CGPointMake</span>(<span class="number">100</span>.f, <span class="number">100</span>.f)</span><br><span class="line">              controlPoint:<span class="type">CGPointMake</span>(<span class="number">0</span>.f, <span class="number">90</span>.f)];   <span class="comment">// 控制点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个点</span></span><br><span class="line">[aPath addLineToPoint:<span class="type">CGPointMake</span>(<span class="number">0</span>.0f, <span class="number">100</span>.f)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭合path</span></span><br><span class="line">[aPath closePath];</span><br></pre></td></tr></table></figure>   <img src="/2015/03/16/2015b/CAShapeLayer/CAShapeLayer2.png" width="200"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Predicate</title>
      <link href="/2015/03/15/2015b/Predicate/"/>
      <url>/2015/03/15/2015b/Predicate/</url>
      
        <content type="html"><![CDATA[<blockquote><p>谓词：  NSPredicate</p></blockquote><ul><li><p>1.比较操作</p>  <img src="/2015/03/15/2015b/Predicate/NSPredicate1.png"></li><li><p>2.字符串常规操作</p>  <img src="/2015/03/15/2015b/Predicate/NSPredicate2.png"></li><li><p>3.范围</p>  <img src="/2015/03/15/2015b/Predicate/NSPredicate3.png"></li><li><p>4.通配符</p>  <img src="/2015/03/15/2015b/Predicate/NSPredicate4.png"></li><li><p>5.逻辑运算符</p>  <img src="/2015/03/15/2015b/Predicate/NSPredicate5.png"></li><li><p>6.正则表达式</p>  <img src="/2015/03/15/2015b/Predicate/NSPredicate6.png"></li></ul><ul><li><p>判断是不是字母，判断是不是数字，判断是是不是字母和数字</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If my string contains ony letters</span></span><br><span class="line">- (<span class="type">BOOL</span>)containsOnlyLetters</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSCharacterSet</span> *letterCharacterset = [[<span class="type">NSCharacterSet</span> letterCharacterSet] invertedSet];</span><br><span class="line">    <span class="keyword">return</span> ([<span class="keyword">self</span> rangeOfCharacterFromSet:letterCharacterset].location == <span class="type">NSNotFound</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If my string contains only numbers</span></span><br><span class="line">- (<span class="type">BOOL</span>)containsOnlyNumbers</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSCharacterSet</span> *numbersCharacterSet = [[<span class="type">NSCharacterSet</span> characterSetWithCharactersInString:@<span class="string">"0123456789"</span>] invertedSet];</span><br><span class="line">    <span class="keyword">return</span> ([<span class="keyword">self</span> rangeOfCharacterFromSet:numbersCharacterSet].location == <span class="type">NSNotFound</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If my string contains letters and numbers</span></span><br><span class="line">- (<span class="type">BOOL</span>)containsOnlyNumbersAndLetters</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSCharacterSet</span> *numAndLetterCharSet = [[<span class="type">NSCharacterSet</span> alphanumericCharacterSet] invertedSet];</span><br><span class="line">    <span class="keyword">return</span> ([<span class="keyword">self</span> rangeOfCharacterFromSet:numAndLetterCharSet].location == <span class="type">NSNotFound</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <img src="/2015/03/15/2015b/Predicate/NSPredicate7.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ARC下的block导致的循环引用问题解析</title>
      <link href="/2015/03/14/2015b/ARC%E4%B8%8B%E7%9A%84block%E5%AF%BC%E8%87%B4%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
      <url>/2015/03/14/2015b/ARC%E4%B8%8B%E7%9A%84block%E5%AF%BC%E8%87%B4%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="1-在ARC下面使用block-无论怎样-你都需要注意这几点"><a href="#1-在ARC下面使用block-无论怎样-你都需要注意这几点" class="headerlink" title="1.在ARC下面使用block,无论怎样,你都需要注意这几点:"></a>1.在ARC下面使用block,无论怎样,你都需要注意这几点:</h3><ul><li><p>外部对象进入block,请使用__weak修饰后再进入到block中</p></li><li><p>不要在block中初始化对象,请在block的外面初始化对象后再进入到block中去</p></li><li><p>无论该block是不是copy的,请都当做copy的block来处理</p></li><li><p>传入到堆区block中的对象会被强引用</p></li></ul><h3 id="2-Block的类型与内存管理"><a href="#2-Block的类型与内存管理" class="headerlink" title="2.Block的类型与内存管理"></a>2.Block的类型与内存管理</h3><ul><li>据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。<ul><li>NSGlobalBlock：类似函数，位于text段；</li><li>NSStackBlock：位于栈内存，函数返回后Block将无效；</li><li>NSMallocBlock：位于堆内存。</li></ul></li><li><p>此处我们可以得知,在处理对象时,block会malloc的.</p></li><li><p>:这种block会导致_model对象泄露吗?</p>   <img src="/2015/03/14/2015b/ARC下的block导致的循环引用问题解析/ARC下的block导致的循环引用问题解析1.png" width="400"></li><li><p>问:方法中的block是怎么回事呢?</p>   <img src="/2015/03/14/2015b/ARC下的block导致的循环引用问题解析/ARC下的block导致的循环引用问题解析2.png" width="400"></li><li><p>:MRC中的<code>__block</code>与ARC中的<code>__weak</code>有啥联系?</p><ul><li><p>在MRC中, <code>__block</code> 可以让一个变量在 block 中进行修改而不会被这个 block retain.</p></li><li><p>在ARC中, <code>__weak</code> 才能让一个变量在 block 中不被这个block强引用.</p></li><li><p><code>__block</code>是在MRC中使用的.</p></li><li><p><code>__weak</code>是在ARC中使用的.</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
